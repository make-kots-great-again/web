{
  "stats": {
    "suites": 7,
    "tests": 13,
    "passes": 13,
    "pending": 0,
    "failures": 0,
    "start": "2020-12-03T12:12:55.223Z",
    "end": "2020-12-03T12:12:57.312Z",
    "duration": 2089,
    "testsRegistered": 13,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "d138461a-fa62-496f-8010-41ae7e8ae2e2",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "a6781ae7-e44c-4656-a80f-99aa21dab093",
          "title": "Users",
          "fullFile": "/Users/martinmichotte/Documents/EPHEC-Projects-3/Projet_Integration/web/server-side/tests/integration-tests/users..js",
          "file": "/server-side/tests/integration-tests/users..js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "Users \"before all\" hook",
              "timedOut": false,
              "duration": 513,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await _chai.default.request(_app.default).post('/server/api/signup').send({ ...user\n});\nloginUser = await _chai.default.request(_app.default).post('/server/api/login').send({\n  pseudo: user.username,\n  password: user.password\n});",
              "err": {},
              "uuid": "e52b946a-66b5-4f0c-a0dc-ebf30865cbdd",
              "parentUUID": "a6781ae7-e44c-4656-a80f-99aa21dab093",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "Users \"after all\" hook",
              "timedOut": false,
              "duration": 5,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const findUser = await _repository.userRepository.findByUsername({\n  username: user.username\n});\nawait _services.userService.removeUser({\n  userId: findUser.dataValues.userId\n});",
              "err": {},
              "uuid": "4e49c5ad-55b2-4788-ab35-6cec364490be",
              "parentUUID": "a6781ae7-e44c-4656-a80f-99aa21dab093",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "9284e750-87dd-40a9-a1e8-9789d32ed947",
              "title": "/login user",
              "fullFile": "/Users/martinmichotte/Documents/EPHEC-Projects-3/Projet_Integration/web/server-side/tests/integration-tests/users..js",
              "file": "/server-side/tests/integration-tests/users..js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should login a user",
                  "fullTitle": "Users /login user it should login a user",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "loginUser.status.should.be.eql(200);\nloginUser.body.user.should.have.property('token');\n(0, _chai.expect)(loginUser.body.success).to.be.true;",
                  "err": {},
                  "uuid": "64d20a8a-0634-426b-a03b-94dc3f249f13",
                  "parentUUID": "9284e750-87dd-40a9-a1e8-9789d32ed947",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should NOT login a user with a wrong password",
                  "fullTitle": "Users /login user it should NOT login a user with a wrong password",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const loggedIn = await _chai.default.request(_app.default).post('/server/api/login').send({\n  pseudo: 'xxxxxx',\n  password: 'xxxxxx'\n});\nloggedIn.status.should.be.eql(401);\n(0, _chai.expect)(loggedIn.body.success).to.be.false;\nloggedIn.body.should.have.property('message').eql('Authentication failed !');",
                  "err": {},
                  "uuid": "7c4b69b9-2dd5-443b-96b8-31dbb6066f0a",
                  "parentUUID": "9284e750-87dd-40a9-a1e8-9789d32ed947",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "64d20a8a-0634-426b-a03b-94dc3f249f13",
                "7c4b69b9-2dd5-443b-96b8-31dbb6066f0a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 11,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "4d3b5816-588e-4b82-b6d4-8af097c18cc5",
              "title": "/singup user",
              "fullFile": "/Users/martinmichotte/Documents/EPHEC-Projects-3/Projet_Integration/web/server-side/tests/integration-tests/users..js",
              "file": "/server-side/tests/integration-tests/users..js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should create a new user",
                  "fullTitle": "Users /singup user it should create a new user",
                  "timedOut": false,
                  "duration": 184,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const newUser = (0, _fakeUser.default)();\nconst createdUser = await _chai.default.request(_app.default).post('/server/api/signup').send({ ...newUser\n});\ncreatedUser.status.should.be.eql(201);\ncreatedUser.body.should.have.property('personnalGroup');\ncreatedUser.body.should.have.property('message').eql('User has been created successfully !');\n(0, _chai.expect)(createdUser.body.success).to.be.true;\nawait _services.userService.removeUser({\n  userId: createdUser.body.user.userId\n});",
                  "err": {},
                  "uuid": "f0ad9e67-2a87-4668-9465-c74d4dd2e64b",
                  "parentUUID": "4d3b5816-588e-4b82-b6d4-8af097c18cc5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should NOT create a user if he/she already exists",
                  "fullTitle": "Users /singup user it should NOT create a user if he/she already exists",
                  "timedOut": false,
                  "duration": 138,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const newUser = (0, _fakeUser.default)();\nconst createdUser1 = await _chai.default.request(_app.default).post('/server/api/signup').send({ ...newUser\n});\nconst createdUser2 = await _chai.default.request(_app.default).post('/server/api/signup').send({ ...newUser\n});\ncreatedUser2.status.should.be.eql(409);\ncreatedUser2.body.should.have.property('message').eql('A user with the same username or email already exists !');\n(0, _chai.expect)(createdUser2.body.success).to.be.false;\nawait _services.userService.removeUser({\n  userId: createdUser1.body.user.userId\n});",
                  "err": {},
                  "uuid": "44df4077-be53-4d54-b4f5-6d61e2f2d3d5",
                  "parentUUID": "4d3b5816-588e-4b82-b6d4-8af097c18cc5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f0ad9e67-2a87-4668-9465-c74d4dd2e64b",
                "44df4077-be53-4d54-b4f5-6d61e2f2d3d5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 322,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "8b48fb97-9a67-4506-9c18-f199b2e3e8cd",
              "title": "/GET users",
              "fullFile": "/Users/martinmichotte/Documents/EPHEC-Projects-3/Projet_Integration/web/server-side/tests/integration-tests/users..js",
              "file": "/server-side/tests/integration-tests/users..js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should GET all users",
                  "fullTitle": "Users /GET users it should GET all users",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const users = await _chai.default.request(_app.default).get('/server/api/users/profiles').set('Authorization', loginUser.body.user.token);\nusers.status.should.be.eql(200);\nusers.body.should.be.an('array');",
                  "err": {},
                  "uuid": "33c3396c-cb93-47d9-907d-9483ea67a32b",
                  "parentUUID": "8b48fb97-9a67-4506-9c18-f199b2e3e8cd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should NOT GET all user with a missing or invalid JWT",
                  "fullTitle": "Users /GET users it should NOT GET all user with a missing or invalid JWT",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const users = await _chai.default.request(_app.default).get('/server/api/users/profiles');\nconst users1 = await _chai.default.request(_app.default).get('/server/api/users/profiles').set('Authorization', \"abc\");\nusers.status.should.be.eql(401);\nusers1.status.should.be.eql(401);\nusers.body.should.be.empty;\nusers1.body.should.be.empty;",
                  "err": {},
                  "uuid": "3fa14d1d-1eba-46b0-b602-55e90284d9e8",
                  "parentUUID": "8b48fb97-9a67-4506-9c18-f199b2e3e8cd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "33c3396c-cb93-47d9-907d-9483ea67a32b",
                "3fa14d1d-1eba-46b0-b602-55e90284d9e8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 22,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "7dcf4384-404f-46f0-abf9-950c4eb147e8",
              "title": "/GET user",
              "fullFile": "/Users/martinmichotte/Documents/EPHEC-Projects-3/Projet_Integration/web/server-side/tests/integration-tests/users..js",
              "file": "/server-side/tests/integration-tests/users..js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should GET one user",
                  "fullTitle": "Users /GET user it should GET one user",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const getUser = await _chai.default.request(_app.default).get('/server/api/user/').set('Authorization', loginUser.body.user.token);\ngetUser.status.should.be.eql(200);\ngetUser.body.should.have.lengthOf(1);",
                  "err": {},
                  "uuid": "76584f41-7147-4d0e-b5d2-ddc071817ebc",
                  "parentUUID": "7dcf4384-404f-46f0-abf9-950c4eb147e8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should NOT GET a user with a missing or invalid JWT",
                  "fullTitle": "Users /GET user it should NOT GET a user with a missing or invalid JWT",
                  "timedOut": false,
                  "duration": 22,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const users = await _chai.default.request(_app.default).get('/server/api/user/');\nconst users1 = await _chai.default.request(_app.default).get('/server/api/user/').set('Authorization', \"abc\");\nusers.status.should.be.eql(401);\nusers1.status.should.be.eql(401);\nusers.body.should.be.empty;\nusers1.body.should.be.empty;",
                  "err": {},
                  "uuid": "d2ee7c7a-4c4d-4e61-8c34-8162819b561b",
                  "parentUUID": "7dcf4384-404f-46f0-abf9-950c4eb147e8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "76584f41-7147-4d0e-b5d2-ddc071817ebc",
                "d2ee7c7a-4c4d-4e61-8c34-8162819b561b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 34,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "17e7c9fa-0d32-4f61-9cea-5f7c602cb6b4",
              "title": "/PATCH user",
              "fullFile": "/Users/martinmichotte/Documents/EPHEC-Projects-3/Projet_Integration/web/server-side/tests/integration-tests/users..js",
              "file": "/server-side/tests/integration-tests/users..js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should PATCH a user",
                  "fullTitle": "Users /PATCH user it should PATCH a user",
                  "timedOut": false,
                  "duration": 300,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const userToUpdate = (0, _fakeUser.default)();\nawait _chai.default.request(_app.default).post('/server/api/signup').send({ ...userToUpdate\n});\nconst logInUser = await _chai.default.request(_app.default).post('/server/api/login').send({\n  pseudo: userToUpdate.username,\n  password: userToUpdate.password\n});\nconst patchedUser = await _chai.default.request(_app.default).put('/server/api/user/').set('Authorization', logInUser.body.user.token).send({ ...(0, _fakeUser.default)({\n    username: 'toto123'\n  })\n});\npatchedUser.status.should.be.eql(200);\n(0, _chai.expect)(patchedUser.body.success).to.be.true;\npatchedUser.body.user.should.have.property('username').eql('toto123');\npatchedUser.body.should.have.property('message').eql('User info has been updated successfully !');\nawait _services.userService.removeUser({\n  userId: logInUser.body.user.userId\n});",
                  "err": {},
                  "uuid": "58c27f84-b99e-46b3-965d-a869dee96459",
                  "parentUUID": "17e7c9fa-0d32-4f61-9cea-5f7c602cb6b4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should NOT PATCH a user with a taken username",
                  "fullTitle": "Users /PATCH user it should NOT PATCH a user with a taken username",
                  "timedOut": false,
                  "duration": 359,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const userToUpdate = (0, _fakeUser.default)();\nawait _chai.default.request(_app.default).post('/server/api/signup').send({ ...userToUpdate\n});\nconst user2 = await _chai.default.request(_app.default).post('/server/api/signup').send({ ...(0, _fakeUser.default)()\n});\nconst logInUser = await _chai.default.request(_app.default).post('/server/api/login').send({\n  pseudo: userToUpdate.username,\n  password: userToUpdate.password\n});\nconst patchedUser = await _chai.default.request(_app.default).put('/server/api/user/').set('Authorization', logInUser.body.user.token).send({ ...(0, _fakeUser.default)({\n    username: user2.body.user.username\n  })\n});\npatchedUser.status.should.be.eql(409);\n(0, _chai.expect)(patchedUser.body.success).to.be.false;\npatchedUser.body.should.have.property('message').eql('A user with the same username already exists !');\nawait _services.userService.removeUser({\n  userId: logInUser.body.user.userId\n});\nawait _services.userService.removeUser({\n  userId: user2.body.user.userId\n});",
                  "err": {},
                  "uuid": "78f49c43-097f-4fbc-9347-c045dd2fef92",
                  "parentUUID": "17e7c9fa-0d32-4f61-9cea-5f7c602cb6b4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should NOT PATCH a user with a missing or invalid JWT",
                  "fullTitle": "Users /PATCH user it should NOT PATCH a user with a missing or invalid JWT",
                  "timedOut": false,
                  "duration": 39,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const users = await _chai.default.request(_app.default).put('/server/api/user/');\nconst users1 = await _chai.default.request(_app.default).put('/server/api/user/').set('Authorization', \"abc\");\nusers.status.should.be.eql(401);\nusers1.status.should.be.eql(401);\nusers.body.should.be.empty;\nusers1.body.should.be.empty;",
                  "err": {},
                  "uuid": "79c1ba6e-08c0-4e1d-a78f-69fe9a8e297a",
                  "parentUUID": "17e7c9fa-0d32-4f61-9cea-5f7c602cb6b4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "58c27f84-b99e-46b3-965d-a869dee96459",
                "78f49c43-097f-4fbc-9347-c045dd2fef92",
                "79c1ba6e-08c0-4e1d-a78f-69fe9a8e297a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 698,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "7d988148-d2de-41a3-bf7d-771ed5360b0a",
              "title": "/DELETE user",
              "fullFile": "/Users/martinmichotte/Documents/EPHEC-Projects-3/Projet_Integration/web/server-side/tests/integration-tests/users..js",
              "file": "/server-side/tests/integration-tests/users..js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should DELETE a user",
                  "fullTitle": "Users /DELETE user it should DELETE a user",
                  "timedOut": false,
                  "duration": 366,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const userToDelete = (0, _fakeUser.default)();\nawait _chai.default.request(_app.default).post('/server/api/signup').send({ ...userToDelete\n});\nconst logInUser = await _chai.default.request(_app.default).post('/server/api/login').send({\n  pseudo: userToDelete.username,\n  password: userToDelete.password\n});\nconst deletedUser = await _chai.default.request(_app.default).delete('/server/api/user/').set('Authorization', logInUser.body.user.token);\ndeletedUser.status.should.be.eql(200);\ndeletedUser.body.should.have.property('message').eql('User deleted successfully !');\ndeletedUser.body.should.have.property('removedUser').eql(1);",
                  "err": {},
                  "uuid": "902e6105-3c96-4705-a929-5b72a0a0fdfa",
                  "parentUUID": "7d988148-d2de-41a3-bf7d-771ed5360b0a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should NOT DELETE a user with a missing or invalid JWT",
                  "fullTitle": "Users /DELETE user it should NOT DELETE a user with a missing or invalid JWT",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const users = await _chai.default.request(_app.default).delete('/server/api/user/');\nconst users1 = await _chai.default.request(_app.default).delete('/server/api/user/').set('Authorization', \"abc\");\nusers.status.should.be.eql(401);\nusers1.status.should.be.eql(401);\nusers.body.should.be.empty;\nusers1.body.should.be.empty;",
                  "err": {},
                  "uuid": "5cb79724-a4f0-4eb7-82c5-366dcc2bf190",
                  "parentUUID": "7d988148-d2de-41a3-bf7d-771ed5360b0a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "902e6105-3c96-4705-a929-5b72a0a0fdfa",
                "5cb79724-a4f0-4eb7-82c5-366dcc2bf190"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 371,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.1.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "index",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.1.1"
    },
    "marge": {
      "options": {
        "reportDir": "test-reports/integration",
        "reportFilename": "index"
      },
      "version": "5.1.0"
    }
  }
}