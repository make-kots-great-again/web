{
  "stats": {
    "suites": 7,
    "tests": 13,
    "passes": 13,
    "pending": 0,
    "failures": 0,
    "start": "2020-12-03T12:22:10.710Z",
    "end": "2020-12-03T12:22:12.324Z",
    "duration": 1614,
    "testsRegistered": 13,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "cf6ff5da-61c1-46ed-96fc-afc2d67c921d",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "d2eb004b-90e4-4e9b-81ee-31206538996e",
          "title": "Users",
          "fullFile": "C:\\Users\\morga\\Documents\\web\\server-side\\tests\\integration-tests\\users..js",
          "file": "\\server-side\\tests\\integration-tests\\users..js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "Users \"before all\" hook",
              "timedOut": false,
              "duration": 629,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await _chai.default.request(_app.default).post('/server/api/signup').send({ ...user\n});\nloginUser = await _chai.default.request(_app.default).post('/server/api/login').send({\n  pseudo: user.username,\n  password: user.password\n});",
              "err": {},
              "uuid": "7a4bb662-f71e-4901-91d7-524481194fd6",
              "parentUUID": "d2eb004b-90e4-4e9b-81ee-31206538996e",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "Users \"after all\" hook",
              "timedOut": false,
              "duration": 3,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const findUser = await _repository.userRepository.findByUsername({\n  username: user.username\n});\nawait _services.userService.removeUser({\n  userId: findUser.dataValues.userId\n});",
              "err": {},
              "uuid": "a6146086-629d-4664-831c-9c807dd0ebe6",
              "parentUUID": "d2eb004b-90e4-4e9b-81ee-31206538996e",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "e26062c4-877f-4b8a-86fb-a246511b3624",
              "title": "/login user",
              "fullFile": "C:\\Users\\morga\\Documents\\web\\server-side\\tests\\integration-tests\\users..js",
              "file": "\\server-side\\tests\\integration-tests\\users..js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should login a user",
                  "fullTitle": "Users /login user it should login a user",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "loginUser.status.should.be.eql(200);\nloginUser.body.user.should.have.property('token');\n(0, _chai.expect)(loginUser.body.success).to.be.true;",
                  "err": {},
                  "uuid": "d376d289-ada8-4ae0-905f-a86b72bebe96",
                  "parentUUID": "e26062c4-877f-4b8a-86fb-a246511b3624",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should NOT login a user with a wrong password",
                  "fullTitle": "Users /login user it should NOT login a user with a wrong password",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const loggedIn = await _chai.default.request(_app.default).post('/server/api/login').send({\n  pseudo: 'xxxxxx',\n  password: 'xxxxxx'\n});\nloggedIn.status.should.be.eql(401);\n(0, _chai.expect)(loggedIn.body.success).to.be.false;\nloggedIn.body.should.have.property('message').eql('Authentication failed !');",
                  "err": {},
                  "uuid": "07a0c2ce-0b17-42c8-b4f5-9ae367d928c6",
                  "parentUUID": "e26062c4-877f-4b8a-86fb-a246511b3624",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d376d289-ada8-4ae0-905f-a86b72bebe96",
                "07a0c2ce-0b17-42c8-b4f5-9ae367d928c6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 7,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "98405bfd-f36e-4ea9-8555-37324991fee0",
              "title": "/singup user",
              "fullFile": "C:\\Users\\morga\\Documents\\web\\server-side\\tests\\integration-tests\\users..js",
              "file": "\\server-side\\tests\\integration-tests\\users..js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should create a new user",
                  "fullTitle": "Users /singup user it should create a new user",
                  "timedOut": false,
                  "duration": 103,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const newUser = (0, _fakeUser.default)();\nconst createdUser = await _chai.default.request(_app.default).post('/server/api/signup').send({ ...newUser\n});\ncreatedUser.status.should.be.eql(201);\ncreatedUser.body.should.have.property('personnalGroup');\ncreatedUser.body.should.have.property('message').eql('User has been created successfully !');\n(0, _chai.expect)(createdUser.body.success).to.be.true;\nawait _services.userService.removeUser({\n  userId: createdUser.body.user.userId\n});",
                  "err": {},
                  "uuid": "6be74f3d-38f3-4e5a-8c1a-f2a7df67d1ed",
                  "parentUUID": "98405bfd-f36e-4ea9-8555-37324991fee0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should NOT create a user if he/she already exists",
                  "fullTitle": "Users /singup user it should NOT create a user if he/she already exists",
                  "timedOut": false,
                  "duration": 108,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const newUser = (0, _fakeUser.default)();\nconst createdUser1 = await _chai.default.request(_app.default).post('/server/api/signup').send({ ...newUser\n});\nconst createdUser2 = await _chai.default.request(_app.default).post('/server/api/signup').send({ ...newUser\n});\ncreatedUser2.status.should.be.eql(409);\ncreatedUser2.body.should.have.property('message').eql('A user with the same username or email already exists !');\n(0, _chai.expect)(createdUser2.body.success).to.be.false;\nawait _services.userService.removeUser({\n  userId: createdUser1.body.user.userId\n});",
                  "err": {},
                  "uuid": "cb41a5d0-b3da-4799-a0d6-6959d0dcab1d",
                  "parentUUID": "98405bfd-f36e-4ea9-8555-37324991fee0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6be74f3d-38f3-4e5a-8c1a-f2a7df67d1ed",
                "cb41a5d0-b3da-4799-a0d6-6959d0dcab1d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 211,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "135833b5-cc5f-4fe2-b912-95b07e237bc2",
              "title": "/GET users",
              "fullFile": "C:\\Users\\morga\\Documents\\web\\server-side\\tests\\integration-tests\\users..js",
              "file": "\\server-side\\tests\\integration-tests\\users..js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should GET all users",
                  "fullTitle": "Users /GET users it should GET all users",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const users = await _chai.default.request(_app.default).get('/server/api/users/profiles').set('Authorization', loginUser.body.user.token);\nusers.status.should.be.eql(200);\nusers.body.should.be.an('array');",
                  "err": {},
                  "uuid": "a667c1a0-7c2c-496d-b388-363098cb22b4",
                  "parentUUID": "135833b5-cc5f-4fe2-b912-95b07e237bc2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should NOT GET all user with a missing or invalid JWT",
                  "fullTitle": "Users /GET users it should NOT GET all user with a missing or invalid JWT",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const users = await _chai.default.request(_app.default).get('/server/api/users/profiles');\nconst users1 = await _chai.default.request(_app.default).get('/server/api/users/profiles').set('Authorization', \"abc\");\nusers.status.should.be.eql(401);\nusers1.status.should.be.eql(401);\nusers.body.should.be.empty;\nusers1.body.should.be.empty;",
                  "err": {},
                  "uuid": "c7f8fe91-9d9b-467b-9188-ac99aa81e4f1",
                  "parentUUID": "135833b5-cc5f-4fe2-b912-95b07e237bc2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a667c1a0-7c2c-496d-b388-363098cb22b4",
                "c7f8fe91-9d9b-467b-9188-ac99aa81e4f1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 23,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "12e31108-c23d-457b-8c7a-ab4925bfd302",
              "title": "/GET user",
              "fullFile": "C:\\Users\\morga\\Documents\\web\\server-side\\tests\\integration-tests\\users..js",
              "file": "\\server-side\\tests\\integration-tests\\users..js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should GET one user",
                  "fullTitle": "Users /GET user it should GET one user",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const getUser = await _chai.default.request(_app.default).get('/server/api/user/').set('Authorization', loginUser.body.user.token);\ngetUser.status.should.be.eql(200);\ngetUser.body.should.have.lengthOf(1);",
                  "err": {},
                  "uuid": "111312f7-0c0a-48f9-9d56-45617a02eaca",
                  "parentUUID": "12e31108-c23d-457b-8c7a-ab4925bfd302",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should NOT GET a user with a missing or invalid JWT",
                  "fullTitle": "Users /GET user it should NOT GET a user with a missing or invalid JWT",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const users = await _chai.default.request(_app.default).get('/server/api/user/');\nconst users1 = await _chai.default.request(_app.default).get('/server/api/user/').set('Authorization', \"abc\");\nusers.status.should.be.eql(401);\nusers1.status.should.be.eql(401);\nusers.body.should.be.empty;\nusers1.body.should.be.empty;",
                  "err": {},
                  "uuid": "7346e6c4-ae8b-4b45-9ea0-ece52147e5c2",
                  "parentUUID": "12e31108-c23d-457b-8c7a-ab4925bfd302",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "111312f7-0c0a-48f9-9d56-45617a02eaca",
                "7346e6c4-ae8b-4b45-9ea0-ece52147e5c2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 23,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "0b467b90-7da5-4765-9f3f-61b4f8c1ab98",
              "title": "/PATCH user",
              "fullFile": "C:\\Users\\morga\\Documents\\web\\server-side\\tests\\integration-tests\\users..js",
              "file": "\\server-side\\tests\\integration-tests\\users..js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should PATCH a user",
                  "fullTitle": "Users /PATCH user it should PATCH a user",
                  "timedOut": false,
                  "duration": 206,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const userToUpdate = (0, _fakeUser.default)();\nawait _chai.default.request(_app.default).post('/server/api/signup').send({ ...userToUpdate\n});\nconst logInUser = await _chai.default.request(_app.default).post('/server/api/login').send({\n  pseudo: userToUpdate.username,\n  password: userToUpdate.password\n});\nconst patchedUser = await _chai.default.request(_app.default).put('/server/api/user/').set('Authorization', logInUser.body.user.token).send({ ...(0, _fakeUser.default)({\n    username: 'toto123'\n  })\n});\npatchedUser.status.should.be.eql(200);\n(0, _chai.expect)(patchedUser.body.success).to.be.true;\npatchedUser.body.user.should.have.property('username').eql('toto123');\npatchedUser.body.should.have.property('message').eql('User info has been updated successfully !');\nawait _services.userService.removeUser({\n  userId: logInUser.body.user.userId\n});",
                  "err": {},
                  "uuid": "8f652205-2d6c-4f14-a360-16df357eb7f4",
                  "parentUUID": "0b467b90-7da5-4765-9f3f-61b4f8c1ab98",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should NOT PATCH a user with a taken username",
                  "fullTitle": "Users /PATCH user it should NOT PATCH a user with a taken username",
                  "timedOut": false,
                  "duration": 290,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const userToUpdate = (0, _fakeUser.default)();\nawait _chai.default.request(_app.default).post('/server/api/signup').send({ ...userToUpdate\n});\nconst user2 = await _chai.default.request(_app.default).post('/server/api/signup').send({ ...(0, _fakeUser.default)()\n});\nconst logInUser = await _chai.default.request(_app.default).post('/server/api/login').send({\n  pseudo: userToUpdate.username,\n  password: userToUpdate.password\n});\nconst patchedUser = await _chai.default.request(_app.default).put('/server/api/user/').set('Authorization', logInUser.body.user.token).send({ ...(0, _fakeUser.default)({\n    username: user2.body.user.username\n  })\n});\npatchedUser.status.should.be.eql(409);\n(0, _chai.expect)(patchedUser.body.success).to.be.false;\npatchedUser.body.should.have.property('message').eql('A user with the same username already exists !');\nawait _services.userService.removeUser({\n  userId: logInUser.body.user.userId\n});\nawait _services.userService.removeUser({\n  userId: user2.body.user.userId\n});",
                  "err": {},
                  "uuid": "6ea8f69d-1dac-4206-be7c-7223d3e400fc",
                  "parentUUID": "0b467b90-7da5-4765-9f3f-61b4f8c1ab98",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should NOT PATCH a user with a missing or invalid JWT",
                  "fullTitle": "Users /PATCH user it should NOT PATCH a user with a missing or invalid JWT",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const users = await _chai.default.request(_app.default).put('/server/api/user/');\nconst users1 = await _chai.default.request(_app.default).put('/server/api/user/').set('Authorization', \"abc\");\nusers.status.should.be.eql(401);\nusers1.status.should.be.eql(401);\nusers.body.should.be.empty;\nusers1.body.should.be.empty;",
                  "err": {},
                  "uuid": "b875b04d-1301-44af-8464-e53f5268ac55",
                  "parentUUID": "0b467b90-7da5-4765-9f3f-61b4f8c1ab98",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8f652205-2d6c-4f14-a360-16df357eb7f4",
                "6ea8f69d-1dac-4206-be7c-7223d3e400fc",
                "b875b04d-1301-44af-8464-e53f5268ac55"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 504,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "d9ee833e-5544-4bae-ad08-20aed7041ac9",
              "title": "/DELETE user",
              "fullFile": "C:\\Users\\morga\\Documents\\web\\server-side\\tests\\integration-tests\\users..js",
              "file": "\\server-side\\tests\\integration-tests\\users..js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should DELETE a user",
                  "fullTitle": "Users /DELETE user it should DELETE a user",
                  "timedOut": false,
                  "duration": 188,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const userToDelete = (0, _fakeUser.default)();\nawait _chai.default.request(_app.default).post('/server/api/signup').send({ ...userToDelete\n});\nconst logInUser = await _chai.default.request(_app.default).post('/server/api/login').send({\n  pseudo: userToDelete.username,\n  password: userToDelete.password\n});\nconst deletedUser = await _chai.default.request(_app.default).delete('/server/api/user/').set('Authorization', logInUser.body.user.token);\ndeletedUser.status.should.be.eql(200);\ndeletedUser.body.should.have.property('message').eql('User deleted successfully !');\ndeletedUser.body.should.have.property('removedUser').eql(1);",
                  "err": {},
                  "uuid": "f2ac983c-bc88-4446-a5c8-e1edd166d178",
                  "parentUUID": "d9ee833e-5544-4bae-ad08-20aed7041ac9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should NOT DELETE a user with a missing or invalid JWT",
                  "fullTitle": "Users /DELETE user it should NOT DELETE a user with a missing or invalid JWT",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const users = await _chai.default.request(_app.default).delete('/server/api/user/');\nconst users1 = await _chai.default.request(_app.default).delete('/server/api/user/').set('Authorization', \"abc\");\nusers.status.should.be.eql(401);\nusers1.status.should.be.eql(401);\nusers.body.should.be.empty;\nusers1.body.should.be.empty;",
                  "err": {},
                  "uuid": "e474d5cb-2301-41a7-b353-4950ebc8376c",
                  "parentUUID": "d9ee833e-5544-4bae-ad08-20aed7041ac9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f2ac983c-bc88-4446-a5c8-e1edd166d178",
                "e474d5cb-2301-41a7-b353-4950ebc8376c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 194,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.1.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "index",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.1.1"
    },
    "marge": {
      "options": {
        "reportDir": "test-reports/integration",
        "reportFilename": "index"
      },
      "version": "5.1.0"
    }
  }
}