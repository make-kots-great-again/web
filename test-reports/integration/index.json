{
  "stats": {
    "suites": 7,
    "tests": 13,
    "passes": 13,
    "pending": 0,
    "failures": 0,
    "start": "2020-12-01T04:45:35.683Z",
    "end": "2020-12-01T04:45:37.498Z",
    "duration": 1815,
    "testsRegistered": 13,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "3b13269d-2b7e-4afe-8ca3-7f1e118c1c0b",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "4d588d78-7ee6-4962-a6d8-e6367151ec1d",
          "title": "Users",
          "fullFile": "C:\\Users\\morga\\Documents\\web\\server-side\\tests\\integration-tests\\users..js",
          "file": "\\server-side\\tests\\integration-tests\\users..js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "Users \"before all\" hook",
              "timedOut": false,
              "duration": 698,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await _chai.default.request(_app.default).post('/server/api/signup').send({ ...user\n});\nloginUser = await _chai.default.request(_app.default).post('/server/api/login').send({\n  pseudo: user.username,\n  password: user.password\n});",
              "err": {},
              "uuid": "b9c99af6-8858-43f3-93c4-3e4fce100b90",
              "parentUUID": "4d588d78-7ee6-4962-a6d8-e6367151ec1d",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "Users \"after all\" hook",
              "timedOut": false,
              "duration": 5,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const findUser = await _repository.userRepository.findByUsername({\n  username: user.username\n});\nawait _services.userService.removeUser({\n  userId: findUser.dataValues.userId\n});",
              "err": {},
              "uuid": "bb6032c2-5a14-49ee-af10-c231bfe50034",
              "parentUUID": "4d588d78-7ee6-4962-a6d8-e6367151ec1d",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "ca980eb8-acc2-41ae-b69c-576804458389",
              "title": "/login user",
              "fullFile": "C:\\Users\\morga\\Documents\\web\\server-side\\tests\\integration-tests\\users..js",
              "file": "\\server-side\\tests\\integration-tests\\users..js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should login a user",
                  "fullTitle": "Users /login user it should login a user",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "loginUser.status.should.be.eql(200);\nloginUser.body.user.should.have.property('token');\n(0, _chai.expect)(loginUser.body.success).to.be.true;",
                  "err": {},
                  "uuid": "ffddc683-c2be-4873-8156-4435b7b1b505",
                  "parentUUID": "ca980eb8-acc2-41ae-b69c-576804458389",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should NOT login a user with a wrong password",
                  "fullTitle": "Users /login user it should NOT login a user with a wrong password",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const loggedIn = await _chai.default.request(_app.default).post('/server/api/login').send({\n  pseudo: 'xxxxxx',\n  password: 'xxxxxx'\n});\nloggedIn.status.should.be.eql(401);\n(0, _chai.expect)(loggedIn.body.success).to.be.false;\nloggedIn.body.should.have.property('message').eql('Authentication failed !');",
                  "err": {},
                  "uuid": "7e9c21dd-91ae-4e03-90f2-5e28e0e86ca3",
                  "parentUUID": "ca980eb8-acc2-41ae-b69c-576804458389",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ffddc683-c2be-4873-8156-4435b7b1b505",
                "7e9c21dd-91ae-4e03-90f2-5e28e0e86ca3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 9,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "13560aac-24f9-4982-806c-5f4cd3b1ce22",
              "title": "/singup user",
              "fullFile": "C:\\Users\\morga\\Documents\\web\\server-side\\tests\\integration-tests\\users..js",
              "file": "\\server-side\\tests\\integration-tests\\users..js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should create a new user",
                  "fullTitle": "Users /singup user it should create a new user",
                  "timedOut": false,
                  "duration": 124,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const newUser = (0, _fakeUser.default)();\nconst createdUser = await _chai.default.request(_app.default).post('/server/api/signup').send({ ...newUser\n});\ncreatedUser.status.should.be.eql(201);\ncreatedUser.body.should.have.property('personnalGroup');\ncreatedUser.body.should.have.property('message').eql('User has been created successfully !');\n(0, _chai.expect)(createdUser.body.success).to.be.true;\nawait _services.userService.removeUser({\n  userId: createdUser.body.user.userId\n});",
                  "err": {},
                  "uuid": "863a7a48-72d5-4e1e-b219-249891d49692",
                  "parentUUID": "13560aac-24f9-4982-806c-5f4cd3b1ce22",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should NOT create a user if he/she already exists",
                  "fullTitle": "Users /singup user it should NOT create a user if he/she already exists",
                  "timedOut": false,
                  "duration": 124,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const newUser = (0, _fakeUser.default)();\nconst createdUser1 = await _chai.default.request(_app.default).post('/server/api/signup').send({ ...newUser\n});\nconst createdUser2 = await _chai.default.request(_app.default).post('/server/api/signup').send({ ...newUser\n});\ncreatedUser2.status.should.be.eql(409);\ncreatedUser2.body.should.have.property('message').eql('A user with the same username or email already exists !');\n(0, _chai.expect)(createdUser2.body.success).to.be.false;\nawait _services.userService.removeUser({\n  userId: createdUser1.body.user.userId\n});",
                  "err": {},
                  "uuid": "14ef49df-2c03-48bc-a5cd-04bf4780d0bf",
                  "parentUUID": "13560aac-24f9-4982-806c-5f4cd3b1ce22",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "863a7a48-72d5-4e1e-b219-249891d49692",
                "14ef49df-2c03-48bc-a5cd-04bf4780d0bf"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 248,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "9dd5dec5-91a4-4a66-bb42-9d2f47f4a3fb",
              "title": "/GET users",
              "fullFile": "C:\\Users\\morga\\Documents\\web\\server-side\\tests\\integration-tests\\users..js",
              "file": "\\server-side\\tests\\integration-tests\\users..js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should GET all users",
                  "fullTitle": "Users /GET users it should GET all users",
                  "timedOut": false,
                  "duration": 15,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const users = await _chai.default.request(_app.default).get('/server/api/users/profiles').set('Authorization', loginUser.body.user.token);\nusers.status.should.be.eql(200);\nusers.body.should.be.an('array');",
                  "err": {},
                  "uuid": "6e278da3-524b-4ef8-8bb2-cf7ae08b411a",
                  "parentUUID": "9dd5dec5-91a4-4a66-bb42-9d2f47f4a3fb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should NOT GET all user with a missing or invalid JWT",
                  "fullTitle": "Users /GET users it should NOT GET all user with a missing or invalid JWT",
                  "timedOut": false,
                  "duration": 17,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const users = await _chai.default.request(_app.default).get('/server/api/users/profiles');\nconst users1 = await _chai.default.request(_app.default).get('/server/api/users/profiles').set('Authorization', \"abc\");\nusers.status.should.be.eql(401);\nusers1.status.should.be.eql(401);\nusers.body.should.be.empty;\nusers1.body.should.be.empty;",
                  "err": {},
                  "uuid": "5b71bee8-9010-4e10-9741-4c8e10fe5ab4",
                  "parentUUID": "9dd5dec5-91a4-4a66-bb42-9d2f47f4a3fb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6e278da3-524b-4ef8-8bb2-cf7ae08b411a",
                "5b71bee8-9010-4e10-9741-4c8e10fe5ab4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 32,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "418cbfa2-6bd7-41c5-a09d-de4c46708b52",
              "title": "/GET user",
              "fullFile": "C:\\Users\\morga\\Documents\\web\\server-side\\tests\\integration-tests\\users..js",
              "file": "\\server-side\\tests\\integration-tests\\users..js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should GET one user",
                  "fullTitle": "Users /GET user it should GET one user",
                  "timedOut": false,
                  "duration": 15,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const getUser = await _chai.default.request(_app.default).get('/server/api/user/').set('Authorization', loginUser.body.user.token);\ngetUser.status.should.be.eql(200);\ngetUser.body.should.have.lengthOf(1);",
                  "err": {},
                  "uuid": "252146fc-7859-4ee7-a44d-9ed7e74c448a",
                  "parentUUID": "418cbfa2-6bd7-41c5-a09d-de4c46708b52",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should NOT GET a user with a missing or invalid JWT",
                  "fullTitle": "Users /GET user it should NOT GET a user with a missing or invalid JWT",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const users = await _chai.default.request(_app.default).get('/server/api/user/');\nconst users1 = await _chai.default.request(_app.default).get('/server/api/user/').set('Authorization', \"abc\");\nusers.status.should.be.eql(401);\nusers1.status.should.be.eql(401);\nusers.body.should.be.empty;\nusers1.body.should.be.empty;",
                  "err": {},
                  "uuid": "c3a0e12a-53ca-427e-8cb0-ed1dde5bae08",
                  "parentUUID": "418cbfa2-6bd7-41c5-a09d-de4c46708b52",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "252146fc-7859-4ee7-a44d-9ed7e74c448a",
                "c3a0e12a-53ca-427e-8cb0-ed1dde5bae08"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 28,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "f9075920-e14e-448f-8cfd-cd6921d47d65",
              "title": "/PATCH user",
              "fullFile": "C:\\Users\\morga\\Documents\\web\\server-side\\tests\\integration-tests\\users..js",
              "file": "\\server-side\\tests\\integration-tests\\users..js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should PATCH a user",
                  "fullTitle": "Users /PATCH user it should PATCH a user",
                  "timedOut": false,
                  "duration": 224,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const userToUpdate = (0, _fakeUser.default)();\nawait _chai.default.request(_app.default).post('/server/api/signup').send({ ...userToUpdate\n});\nconst logInUser = await _chai.default.request(_app.default).post('/server/api/login').send({\n  pseudo: userToUpdate.username,\n  password: userToUpdate.password\n});\nconst patchedUser = await _chai.default.request(_app.default).put('/server/api/user/').set('Authorization', logInUser.body.user.token).send({ ...(0, _fakeUser.default)({\n    username: 'toto123'\n  })\n});\npatchedUser.status.should.be.eql(200);\n(0, _chai.expect)(patchedUser.body.success).to.be.true;\npatchedUser.body.user.should.have.property('username').eql('toto123');\npatchedUser.body.should.have.property('message').eql('User info has been updated successfully !');\nawait _services.userService.removeUser({\n  userId: logInUser.body.user.userId\n});",
                  "err": {},
                  "uuid": "122fa2c7-bbd5-4ad5-b1d2-e89c25cace63",
                  "parentUUID": "f9075920-e14e-448f-8cfd-cd6921d47d65",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should NOT PATCH a user with a taken username",
                  "fullTitle": "Users /PATCH user it should NOT PATCH a user with a taken username",
                  "timedOut": false,
                  "duration": 300,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const userToUpdate = (0, _fakeUser.default)();\nawait _chai.default.request(_app.default).post('/server/api/signup').send({ ...userToUpdate\n});\nconst user2 = await _chai.default.request(_app.default).post('/server/api/signup').send({ ...(0, _fakeUser.default)()\n});\nconst logInUser = await _chai.default.request(_app.default).post('/server/api/login').send({\n  pseudo: userToUpdate.username,\n  password: userToUpdate.password\n});\nconst patchedUser = await _chai.default.request(_app.default).put('/server/api/user/').set('Authorization', logInUser.body.user.token).send({ ...(0, _fakeUser.default)({\n    username: user2.body.user.username\n  })\n});\npatchedUser.status.should.be.eql(409);\n(0, _chai.expect)(patchedUser.body.success).to.be.false;\npatchedUser.body.should.have.property('message').eql('A user with the same username already exists !');\nawait _services.userService.removeUser({\n  userId: logInUser.body.user.userId\n});\nawait _services.userService.removeUser({\n  userId: user2.body.user.userId\n});",
                  "err": {},
                  "uuid": "86d98ab9-d408-4f80-84c4-4b273be9d08d",
                  "parentUUID": "f9075920-e14e-448f-8cfd-cd6921d47d65",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should NOT PATCH a user with a missing or invalid JWT",
                  "fullTitle": "Users /PATCH user it should NOT PATCH a user with a missing or invalid JWT",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const users = await _chai.default.request(_app.default).put('/server/api/user/');\nconst users1 = await _chai.default.request(_app.default).put('/server/api/user/').set('Authorization', \"abc\");\nusers.status.should.be.eql(401);\nusers1.status.should.be.eql(401);\nusers.body.should.be.empty;\nusers1.body.should.be.empty;",
                  "err": {},
                  "uuid": "fe548d70-5766-4e51-8d50-322ab1cd7a82",
                  "parentUUID": "f9075920-e14e-448f-8cfd-cd6921d47d65",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "122fa2c7-bbd5-4ad5-b1d2-e89c25cace63",
                "86d98ab9-d408-4f80-84c4-4b273be9d08d",
                "fe548d70-5766-4e51-8d50-322ab1cd7a82"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 537,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "b0f11ecd-47e9-4616-bd3d-b28d61b1f8ed",
              "title": "/DELETE user",
              "fullFile": "C:\\Users\\morga\\Documents\\web\\server-side\\tests\\integration-tests\\users..js",
              "file": "\\server-side\\tests\\integration-tests\\users..js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should DELETE a user",
                  "fullTitle": "Users /DELETE user it should DELETE a user",
                  "timedOut": false,
                  "duration": 213,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const userToDelete = (0, _fakeUser.default)();\nawait _chai.default.request(_app.default).post('/server/api/signup').send({ ...userToDelete\n});\nconst logInUser = await _chai.default.request(_app.default).post('/server/api/login').send({\n  pseudo: userToDelete.username,\n  password: userToDelete.password\n});\nconst deletedUser = await _chai.default.request(_app.default).delete('/server/api/user/').set('Authorization', logInUser.body.user.token);\ndeletedUser.status.should.be.eql(200);\ndeletedUser.body.should.have.property('message').eql('User deleted successfully !');\ndeletedUser.body.should.have.property('removedUser').eql(1);",
                  "err": {},
                  "uuid": "1838a007-74f6-449a-a13e-861ffd532f92",
                  "parentUUID": "b0f11ecd-47e9-4616-bd3d-b28d61b1f8ed",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should NOT DELETE a user with a missing or invalid JWT",
                  "fullTitle": "Users /DELETE user it should NOT DELETE a user with a missing or invalid JWT",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const users = await _chai.default.request(_app.default).delete('/server/api/user/');\nconst users1 = await _chai.default.request(_app.default).delete('/server/api/user/').set('Authorization', \"abc\");\nusers.status.should.be.eql(401);\nusers1.status.should.be.eql(401);\nusers.body.should.be.empty;\nusers1.body.should.be.empty;",
                  "err": {},
                  "uuid": "827729cf-d559-4325-88e4-47a2e17f77b0",
                  "parentUUID": "b0f11ecd-47e9-4616-bd3d-b28d61b1f8ed",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1838a007-74f6-449a-a13e-861ffd532f92",
                "827729cf-d559-4325-88e4-47a2e17f77b0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 222,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.1.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "index",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.1.1"
    },
    "marge": {
      "options": {
        "reportDir": "test-reports/integration",
        "reportFilename": "index"
      },
      "version": "5.1.0"
    }
  }
}