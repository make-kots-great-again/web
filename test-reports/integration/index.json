{
  "stats": {
    "suites": 7,
    "tests": 13,
    "passes": 13,
    "pending": 0,
    "failures": 0,
    "start": "2020-12-03T12:05:01.090Z",
    "end": "2020-12-03T12:05:02.554Z",
    "duration": 1464,
    "testsRegistered": 13,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "732718fc-a16c-41a3-8b3f-c9b56186765c",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "edc10b0b-d3c7-44d6-90c1-ec80d1fdb1b6",
          "title": "Users",
          "fullFile": "C:\\Users\\morga\\Documents\\web\\server-side\\tests\\integration-tests\\users..js",
          "file": "\\server-side\\tests\\integration-tests\\users..js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "Users \"before all\" hook",
              "timedOut": false,
              "duration": 483,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await _chai.default.request(_app.default).post('/server/api/signup').send({ ...user\n});\nloginUser = await _chai.default.request(_app.default).post('/server/api/login').send({\n  pseudo: user.username,\n  password: user.password\n});",
              "err": {},
              "uuid": "e1cdbcc5-2c51-4857-a7a8-51c86634096c",
              "parentUUID": "edc10b0b-d3c7-44d6-90c1-ec80d1fdb1b6",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "Users \"after all\" hook",
              "timedOut": false,
              "duration": 3,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const findUser = await _repository.userRepository.findByUsername({\n  username: user.username\n});\nawait _services.userService.removeUser({\n  userId: findUser.dataValues.userId\n});",
              "err": {},
              "uuid": "2d4dd394-05d4-4e87-9260-8807e67fb8d6",
              "parentUUID": "edc10b0b-d3c7-44d6-90c1-ec80d1fdb1b6",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "cbdefaf6-c51e-4389-9caf-fb0b2ed2f6cc",
              "title": "/login user",
              "fullFile": "C:\\Users\\morga\\Documents\\web\\server-side\\tests\\integration-tests\\users..js",
              "file": "\\server-side\\tests\\integration-tests\\users..js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should login a user",
                  "fullTitle": "Users /login user it should login a user",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "loginUser.status.should.be.eql(200);\nloginUser.body.user.should.have.property('token');\n(0, _chai.expect)(loginUser.body.success).to.be.true;",
                  "err": {},
                  "uuid": "5483006a-e6cd-4fcf-9cf4-86c240ada873",
                  "parentUUID": "cbdefaf6-c51e-4389-9caf-fb0b2ed2f6cc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should NOT login a user with a wrong password",
                  "fullTitle": "Users /login user it should NOT login a user with a wrong password",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const loggedIn = await _chai.default.request(_app.default).post('/server/api/login').send({\n  pseudo: 'xxxxxx',\n  password: 'xxxxxx'\n});\nloggedIn.status.should.be.eql(401);\n(0, _chai.expect)(loggedIn.body.success).to.be.false;\nloggedIn.body.should.have.property('message').eql('Authentication failed !');",
                  "err": {},
                  "uuid": "11b102d8-9b0d-42ac-b590-a8c9f4da9788",
                  "parentUUID": "cbdefaf6-c51e-4389-9caf-fb0b2ed2f6cc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5483006a-e6cd-4fcf-9cf4-86c240ada873",
                "11b102d8-9b0d-42ac-b590-a8c9f4da9788"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 12,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "85e45311-0eab-4f25-abf7-03cc48ac2c8b",
              "title": "/singup user",
              "fullFile": "C:\\Users\\morga\\Documents\\web\\server-side\\tests\\integration-tests\\users..js",
              "file": "\\server-side\\tests\\integration-tests\\users..js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should create a new user",
                  "fullTitle": "Users /singup user it should create a new user",
                  "timedOut": false,
                  "duration": 106,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const newUser = (0, _fakeUser.default)();\nconst createdUser = await _chai.default.request(_app.default).post('/server/api/signup').send({ ...newUser\n});\ncreatedUser.status.should.be.eql(201);\ncreatedUser.body.should.have.property('personnalGroup');\ncreatedUser.body.should.have.property('message').eql('User has been created successfully !');\n(0, _chai.expect)(createdUser.body.success).to.be.true;\nawait _services.userService.removeUser({\n  userId: createdUser.body.user.userId\n});",
                  "err": {},
                  "uuid": "a3885d8f-f648-4c4a-a06e-ef4b9253ebb5",
                  "parentUUID": "85e45311-0eab-4f25-abf7-03cc48ac2c8b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should NOT create a user if he/she already exists",
                  "fullTitle": "Users /singup user it should NOT create a user if he/she already exists",
                  "timedOut": false,
                  "duration": 106,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const newUser = (0, _fakeUser.default)();\nconst createdUser1 = await _chai.default.request(_app.default).post('/server/api/signup').send({ ...newUser\n});\nconst createdUser2 = await _chai.default.request(_app.default).post('/server/api/signup').send({ ...newUser\n});\ncreatedUser2.status.should.be.eql(409);\ncreatedUser2.body.should.have.property('message').eql('A user with the same username or email already exists !');\n(0, _chai.expect)(createdUser2.body.success).to.be.false;\nawait _services.userService.removeUser({\n  userId: createdUser1.body.user.userId\n});",
                  "err": {},
                  "uuid": "74e24819-4db3-4f82-acac-956ce2ce9363",
                  "parentUUID": "85e45311-0eab-4f25-abf7-03cc48ac2c8b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a3885d8f-f648-4c4a-a06e-ef4b9253ebb5",
                "74e24819-4db3-4f82-acac-956ce2ce9363"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 212,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "0c721b82-e236-4c97-b26e-cb2c1be86b82",
              "title": "/GET users",
              "fullFile": "C:\\Users\\morga\\Documents\\web\\server-side\\tests\\integration-tests\\users..js",
              "file": "\\server-side\\tests\\integration-tests\\users..js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should GET all users",
                  "fullTitle": "Users /GET users it should GET all users",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const users = await _chai.default.request(_app.default).get('/server/api/users/profiles').set('Authorization', loginUser.body.user.token);\nusers.status.should.be.eql(200);\nusers.body.should.be.an('array');",
                  "err": {},
                  "uuid": "21d9cb83-1b05-4f2e-b9da-8ab526305d67",
                  "parentUUID": "0c721b82-e236-4c97-b26e-cb2c1be86b82",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should NOT GET all user with a missing or invalid JWT",
                  "fullTitle": "Users /GET users it should NOT GET all user with a missing or invalid JWT",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const users = await _chai.default.request(_app.default).get('/server/api/users/profiles');\nconst users1 = await _chai.default.request(_app.default).get('/server/api/users/profiles').set('Authorization', \"abc\");\nusers.status.should.be.eql(401);\nusers1.status.should.be.eql(401);\nusers.body.should.be.empty;\nusers1.body.should.be.empty;",
                  "err": {},
                  "uuid": "d4ab554d-efc6-4ab1-bf97-86e3557e9e64",
                  "parentUUID": "0c721b82-e236-4c97-b26e-cb2c1be86b82",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "21d9cb83-1b05-4f2e-b9da-8ab526305d67",
                "d4ab554d-efc6-4ab1-bf97-86e3557e9e64"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 24,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "491e17c2-7b8c-445a-b0c3-d2ba5021c942",
              "title": "/GET user",
              "fullFile": "C:\\Users\\morga\\Documents\\web\\server-side\\tests\\integration-tests\\users..js",
              "file": "\\server-side\\tests\\integration-tests\\users..js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should GET one user",
                  "fullTitle": "Users /GET user it should GET one user",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const getUser = await _chai.default.request(_app.default).get('/server/api/user/').set('Authorization', loginUser.body.user.token);\ngetUser.status.should.be.eql(200);\ngetUser.body.should.have.lengthOf(1);",
                  "err": {},
                  "uuid": "d5c3575c-a0e8-479b-b89e-0986044f2ac2",
                  "parentUUID": "491e17c2-7b8c-445a-b0c3-d2ba5021c942",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should NOT GET a user with a missing or invalid JWT",
                  "fullTitle": "Users /GET user it should NOT GET a user with a missing or invalid JWT",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const users = await _chai.default.request(_app.default).get('/server/api/user/');\nconst users1 = await _chai.default.request(_app.default).get('/server/api/user/').set('Authorization', \"abc\");\nusers.status.should.be.eql(401);\nusers1.status.should.be.eql(401);\nusers.body.should.be.empty;\nusers1.body.should.be.empty;",
                  "err": {},
                  "uuid": "6f71da48-0563-41a6-920f-74927f8cd555",
                  "parentUUID": "491e17c2-7b8c-445a-b0c3-d2ba5021c942",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d5c3575c-a0e8-479b-b89e-0986044f2ac2",
                "6f71da48-0563-41a6-920f-74927f8cd555"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 22,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "9bc63fb5-77e6-4eaa-b0f2-9a6b7c497907",
              "title": "/PATCH user",
              "fullFile": "C:\\Users\\morga\\Documents\\web\\server-side\\tests\\integration-tests\\users..js",
              "file": "\\server-side\\tests\\integration-tests\\users..js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should PATCH a user",
                  "fullTitle": "Users /PATCH user it should PATCH a user",
                  "timedOut": false,
                  "duration": 195,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const userToUpdate = (0, _fakeUser.default)();\nawait _chai.default.request(_app.default).post('/server/api/signup').send({ ...userToUpdate\n});\nconst logInUser = await _chai.default.request(_app.default).post('/server/api/login').send({\n  pseudo: userToUpdate.username,\n  password: userToUpdate.password\n});\nconst patchedUser = await _chai.default.request(_app.default).put('/server/api/user/').set('Authorization', logInUser.body.user.token).send({ ...(0, _fakeUser.default)({\n    username: 'toto123'\n  })\n});\npatchedUser.status.should.be.eql(200);\n(0, _chai.expect)(patchedUser.body.success).to.be.true;\npatchedUser.body.user.should.have.property('username').eql('toto123');\npatchedUser.body.should.have.property('message').eql('User info has been updated successfully !');\nawait _services.userService.removeUser({\n  userId: logInUser.body.user.userId\n});",
                  "err": {},
                  "uuid": "af4ea94a-f32f-4bc5-92de-0319124e75f1",
                  "parentUUID": "9bc63fb5-77e6-4eaa-b0f2-9a6b7c497907",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should NOT PATCH a user with a taken username",
                  "fullTitle": "Users /PATCH user it should NOT PATCH a user with a taken username",
                  "timedOut": false,
                  "duration": 286,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const userToUpdate = (0, _fakeUser.default)();\nawait _chai.default.request(_app.default).post('/server/api/signup').send({ ...userToUpdate\n});\nconst user2 = await _chai.default.request(_app.default).post('/server/api/signup').send({ ...(0, _fakeUser.default)()\n});\nconst logInUser = await _chai.default.request(_app.default).post('/server/api/login').send({\n  pseudo: userToUpdate.username,\n  password: userToUpdate.password\n});\nconst patchedUser = await _chai.default.request(_app.default).put('/server/api/user/').set('Authorization', logInUser.body.user.token).send({ ...(0, _fakeUser.default)({\n    username: user2.body.user.username\n  })\n});\npatchedUser.status.should.be.eql(409);\n(0, _chai.expect)(patchedUser.body.success).to.be.false;\npatchedUser.body.should.have.property('message').eql('A user with the same username already exists !');\nawait _services.userService.removeUser({\n  userId: logInUser.body.user.userId\n});\nawait _services.userService.removeUser({\n  userId: user2.body.user.userId\n});",
                  "err": {},
                  "uuid": "51d7727a-3810-4860-87b2-cdea6e823be4",
                  "parentUUID": "9bc63fb5-77e6-4eaa-b0f2-9a6b7c497907",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should NOT PATCH a user with a missing or invalid JWT",
                  "fullTitle": "Users /PATCH user it should NOT PATCH a user with a missing or invalid JWT",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const users = await _chai.default.request(_app.default).put('/server/api/user/');\nconst users1 = await _chai.default.request(_app.default).put('/server/api/user/').set('Authorization', \"abc\");\nusers.status.should.be.eql(401);\nusers1.status.should.be.eql(401);\nusers.body.should.be.empty;\nusers1.body.should.be.empty;",
                  "err": {},
                  "uuid": "6b6c15d4-634b-4b0d-9490-c19d3f85cf8d",
                  "parentUUID": "9bc63fb5-77e6-4eaa-b0f2-9a6b7c497907",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "af4ea94a-f32f-4bc5-92de-0319124e75f1",
                "51d7727a-3810-4860-87b2-cdea6e823be4",
                "6b6c15d4-634b-4b0d-9490-c19d3f85cf8d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 490,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "fb756962-4075-4517-ba3c-ade168d37f0a",
              "title": "/DELETE user",
              "fullFile": "C:\\Users\\morga\\Documents\\web\\server-side\\tests\\integration-tests\\users..js",
              "file": "\\server-side\\tests\\integration-tests\\users..js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should DELETE a user",
                  "fullTitle": "Users /DELETE user it should DELETE a user",
                  "timedOut": false,
                  "duration": 187,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const userToDelete = (0, _fakeUser.default)();\nawait _chai.default.request(_app.default).post('/server/api/signup').send({ ...userToDelete\n});\nconst logInUser = await _chai.default.request(_app.default).post('/server/api/login').send({\n  pseudo: userToDelete.username,\n  password: userToDelete.password\n});\nconst deletedUser = await _chai.default.request(_app.default).delete('/server/api/user/').set('Authorization', logInUser.body.user.token);\ndeletedUser.status.should.be.eql(200);\ndeletedUser.body.should.have.property('message').eql('User deleted successfully !');\ndeletedUser.body.should.have.property('removedUser').eql(1);",
                  "err": {},
                  "uuid": "ad26a77f-26ed-4221-ab13-7c546533c71f",
                  "parentUUID": "fb756962-4075-4517-ba3c-ade168d37f0a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should NOT DELETE a user with a missing or invalid JWT",
                  "fullTitle": "Users /DELETE user it should NOT DELETE a user with a missing or invalid JWT",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const users = await _chai.default.request(_app.default).delete('/server/api/user/');\nconst users1 = await _chai.default.request(_app.default).delete('/server/api/user/').set('Authorization', \"abc\");\nusers.status.should.be.eql(401);\nusers1.status.should.be.eql(401);\nusers.body.should.be.empty;\nusers1.body.should.be.empty;",
                  "err": {},
                  "uuid": "e1dd61ab-8795-4a06-a061-1ed96a0e225a",
                  "parentUUID": "fb756962-4075-4517-ba3c-ade168d37f0a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ad26a77f-26ed-4221-ab13-7c546533c71f",
                "e1dd61ab-8795-4a06-a061-1ed96a0e225a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 200,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.1.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "index",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.1.1"
    },
    "marge": {
      "options": {
        "reportDir": "test-reports/integration",
        "reportFilename": "index"
      },
      "version": "5.1.0"
    }
  }
}