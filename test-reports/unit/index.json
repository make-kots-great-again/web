{
  "stats": {
    "suites": 26,
    "tests": 53,
    "passes": 53,
    "pending": 0,
    "failures": 0,
    "start": "2020-12-03T03:05:18.159Z",
    "end": "2020-12-03T03:05:19.817Z",
    "duration": 1658,
    "testsRegistered": 53,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "85941302-4d37-451a-ba47-0697365ef472",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "0fdb8673-4655-426c-997e-eac84c2fda1d",
          "title": "GROUP ENTITY",
          "fullFile": "C:\\Users\\morga\\Documents\\web\\server-side\\tests\\unit-tests\\entities\\group.js",
          "file": "\\server-side\\tests\\unit-tests\\entities\\group.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "1ccc1a6c-a16e-4052-b034-feb3fb4cf2f1",
              "title": "#group",
              "fullFile": "C:\\Users\\morga\\Documents\\web\\server-side\\tests\\unit-tests\\entities\\group.js",
              "file": "\\server-side\\tests\\unit-tests\\entities\\group.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should make a group",
                  "fullTitle": "GROUP ENTITY #group it should make a group",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const randomGroup = Math.random().toString(36).substr(2, 9);\nconst group = (0, _fakeGroup.default)(randomGroup, randomGroup + randomGroup);\nconst buildGroup = (0, _domain.makeGroup)({ ...group\n});\n(0, _chai.expect)(buildGroup.getGroupName()).to.be.eql(group.groupName);\n(0, _chai.expect)(buildGroup.getGroupDescription()).to.be.eql(group.groupDescription);",
                  "err": {},
                  "uuid": "ef6aae01-a890-4ae8-b030-60858e5af4aa",
                  "parentUUID": "1ccc1a6c-a16e-4052-b034-feb3fb4cf2f1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ef6aae01-a890-4ae8-b030-60858e5af4aa"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "e540da11-279f-4eec-b7eb-4449a4436852",
              "title": "#groupName",
              "fullFile": "C:\\Users\\morga\\Documents\\web\\server-side\\tests\\unit-tests\\entities\\group.js",
              "file": "\\server-side\\tests\\unit-tests\\entities\\group.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "a group must have a groupName",
                  "fullTitle": "GROUP ENTITY #groupName a group must have a groupName",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const group = (0, _fakeGroup.default)(undefined, \"test\");\n(0, _chai.expect)(() => (0, _domain.makeGroup)({ ...group\n})).to.throw(_errors.RequiredParameterError, 'A groupName is a required.');",
                  "err": {},
                  "uuid": "04570622-b751-400b-a941-d2fd0f0c37fe",
                  "parentUUID": "e540da11-279f-4eec-b7eb-4449a4436852",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "a groupName can't be null",
                  "fullTitle": "GROUP ENTITY #groupName a groupName can't be null",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const group = (0, _fakeGroup.default)(null, \"test\");\n(0, _chai.expect)(() => (0, _domain.makeGroup)({ ...group\n})).to.throw(TypeError, 'A groupName must be a string.');",
                  "err": {},
                  "uuid": "70027aa3-2ed6-4312-a099-a146b2666c4a",
                  "parentUUID": "e540da11-279f-4eec-b7eb-4449a4436852",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "a groupName can't be a number",
                  "fullTitle": "GROUP ENTITY #groupName a groupName can't be a number",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const group = (0, _fakeGroup.default)(404, \"test\");\n(0, _chai.expect)(() => (0, _domain.makeGroup)({ ...group\n})).to.throw(TypeError, 'A groupName must be a string.');",
                  "err": {},
                  "uuid": "e1a81430-4728-4b45-bfb0-e96c3f8ec28b",
                  "parentUUID": "e540da11-279f-4eec-b7eb-4449a4436852",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "04570622-b751-400b-a941-d2fd0f0c37fe",
                "70027aa3-2ed6-4312-a099-a146b2666c4a",
                "e1a81430-4728-4b45-bfb0-e96c3f8ec28b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 10,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "8a22edac-e16b-4478-91e4-7ef053379665",
              "title": "#groupDescription",
              "fullFile": "C:\\Users\\morga\\Documents\\web\\server-side\\tests\\unit-tests\\entities\\group.js",
              "file": "\\server-side\\tests\\unit-tests\\entities\\group.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "a group must have a groupDescription",
                  "fullTitle": "GROUP ENTITY #groupDescription a group must have a groupDescription",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const group = (0, _fakeGroup.default)(\"test\", undefined);\n(0, _chai.expect)(() => (0, _domain.makeGroup)({ ...group\n})).to.throw(_errors.RequiredParameterError, 'A group description is a required.');",
                  "err": {},
                  "uuid": "66d4ac59-1cf2-4d0f-88b2-53469e5971b6",
                  "parentUUID": "8a22edac-e16b-4478-91e4-7ef053379665",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "a groupDescription can't be null",
                  "fullTitle": "GROUP ENTITY #groupDescription a groupDescription can't be null",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const group = (0, _fakeGroup.default)(\"test\", null);\n(0, _chai.expect)(() => (0, _domain.makeGroup)({ ...group\n})).to.throw(TypeError, 'A group description must be a string.');",
                  "err": {},
                  "uuid": "ab864ba3-8a37-47fa-9f7b-9421de49aab2",
                  "parentUUID": "8a22edac-e16b-4478-91e4-7ef053379665",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "a groupDescription can't be a number",
                  "fullTitle": "GROUP ENTITY #groupDescription a groupDescription can't be a number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const group = (0, _fakeGroup.default)(\"test\", 404);\n(0, _chai.expect)(() => (0, _domain.makeGroup)({ ...group\n})).to.throw(TypeError, 'A group description must be a string.');",
                  "err": {},
                  "uuid": "343ed225-dc84-47be-a17f-956d677bdde4",
                  "parentUUID": "8a22edac-e16b-4478-91e4-7ef053379665",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "66d4ac59-1cf2-4d0f-88b2-53469e5971b6",
                "ab864ba3-8a37-47fa-9f7b-9421de49aab2",
                "343ed225-dc84-47be-a17f-956d677bdde4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "7f74f537-f7e2-4480-9086-e89a9a49efd9",
          "title": "PRODUCT ENTITY",
          "fullFile": "C:\\Users\\morga\\Documents\\web\\server-side\\tests\\unit-tests\\entities\\product.js",
          "file": "\\server-side\\tests\\unit-tests\\entities\\product.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "8f75eed0-97cf-4cab-beba-8f91d07213d9",
              "title": "#product",
              "fullFile": "C:\\Users\\morga\\Documents\\web\\server-side\\tests\\unit-tests\\entities\\product.js",
              "file": "\\server-side\\tests\\unit-tests\\entities\\product.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should make a product",
                  "fullTitle": "PRODUCT ENTITY #product it should make a product",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const product = (0, _fakeProduct.default)(\"jasmin\");\nconst buildProduct = (0, _domain.makeProduct)({ ...product\n});\n(0, _chai.expect)(buildProduct.getProductName()).to.be.eql(product.productName);",
                  "err": {},
                  "uuid": "89a5eb11-7a3b-4952-97e4-70672f0b5e77",
                  "parentUUID": "8f75eed0-97cf-4cab-beba-8f91d07213d9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "89a5eb11-7a3b-4952-97e4-70672f0b5e77"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "0261b9ea-92a2-4a7d-9492-c601a054d4b1",
              "title": "#productName",
              "fullFile": "C:\\Users\\morga\\Documents\\web\\server-side\\tests\\unit-tests\\entities\\product.js",
              "file": "\\server-side\\tests\\unit-tests\\entities\\product.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "a product must have a productName",
                  "fullTitle": "PRODUCT ENTITY #productName a product must have a productName",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const product = (0, _fakeProduct.default)(undefined);\n(0, _chai.expect)(() => (0, _domain.makeProduct)({ ...product\n})).to.throw(_errors.RequiredParameterError, 'A productName is a required.');",
                  "err": {},
                  "uuid": "604363ef-b230-4d10-8c13-f187d3aabc38",
                  "parentUUID": "0261b9ea-92a2-4a7d-9492-c601a054d4b1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "a productName can't be null",
                  "fullTitle": "PRODUCT ENTITY #productName a productName can't be null",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const product = (0, _fakeProduct.default)(null);\n(0, _chai.expect)(() => (0, _domain.makeProduct)({ ...product\n})).to.throw(TypeError, 'A product name must be a string.');",
                  "err": {},
                  "uuid": "fb63bc6e-b2cf-4bde-8b81-70ee08a2d299",
                  "parentUUID": "0261b9ea-92a2-4a7d-9492-c601a054d4b1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "a productName can't be a number",
                  "fullTitle": "PRODUCT ENTITY #productName a productName can't be a number",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const product = (0, _fakeProduct.default)(404);\n(0, _chai.expect)(() => (0, _domain.makeProduct)({ ...product\n})).to.throw(TypeError, 'A product name must be a string.');",
                  "err": {},
                  "uuid": "a1ca0464-a44b-48e0-b767-83914d75f7a8",
                  "parentUUID": "0261b9ea-92a2-4a7d-9492-c601a054d4b1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "604363ef-b230-4d10-8c13-f187d3aabc38",
                "fb63bc6e-b2cf-4bde-8b81-70ee08a2d299",
                "a1ca0464-a44b-48e0-b767-83914d75f7a8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "a175b457-f9e6-43e6-8225-a5c3907c259c",
          "title": "SHOPPINGLIST ENTITY",
          "fullFile": "C:\\Users\\morga\\Documents\\web\\server-side\\tests\\unit-tests\\entities\\shoppingList.js",
          "file": "\\server-side\\tests\\unit-tests\\entities\\shoppingList.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "3a226959-551b-429f-afe5-4c0b48d283ad",
              "title": "#shoppingList",
              "fullFile": "C:\\Users\\morga\\Documents\\web\\server-side\\tests\\unit-tests\\entities\\shoppingList.js",
              "file": "\\server-side\\tests\\unit-tests\\entities\\shoppingList.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should make a shopping list",
                  "fullTitle": "SHOPPINGLIST ENTITY #shoppingList it should make a shopping list",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const shoppingList = (0, _fakeShoppingList.default)(11223344, 4);\nconst buildShoppingList = (0, _domain.makeShoppingList)({ ...shoppingList\n});\n(0, _chai.expect)(buildShoppingList.getProductCode()).to.be.eql(shoppingList.code);\n(0, _chai.expect)(buildShoppingList.getProductQuantity()).to.be.eql(shoppingList.quantity);",
                  "err": {},
                  "uuid": "5131a8f2-3af2-4cd7-985a-b5dfce69846b",
                  "parentUUID": "3a226959-551b-429f-afe5-4c0b48d283ad",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5131a8f2-3af2-4cd7-985a-b5dfce69846b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "3b88df92-5379-4979-a506-d07314422855",
              "title": "#code",
              "fullFile": "C:\\Users\\morga\\Documents\\web\\server-side\\tests\\unit-tests\\entities\\shoppingList.js",
              "file": "\\server-side\\tests\\unit-tests\\entities\\shoppingList.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "a shoppingList must have a code",
                  "fullTitle": "SHOPPINGLIST ENTITY #code a shoppingList must have a code",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const shoppingList = (0, _fakeShoppingList.default)(undefined, 4);\n(0, _chai.expect)(() => (0, _domain.makeShoppingList)({ ...shoppingList\n})).to.throw(_errors.RequiredParameterError, 'A product code is a required.');",
                  "err": {},
                  "uuid": "0e79256b-ad70-4b54-a27d-9a781f7fa858",
                  "parentUUID": "3b88df92-5379-4979-a506-d07314422855",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "a code can't be null",
                  "fullTitle": "SHOPPINGLIST ENTITY #code a code can't be null",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const shoppingList = (0, _fakeShoppingList.default)(null, 4);\n(0, _chai.expect)(() => (0, _domain.makeShoppingList)({ ...shoppingList\n})).to.throw(TypeError, 'A product code must be a number.');",
                  "err": {},
                  "uuid": "eba12250-6d92-42f4-ba7b-46b2d895c034",
                  "parentUUID": "3b88df92-5379-4979-a506-d07314422855",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "a code can't be a string",
                  "fullTitle": "SHOPPINGLIST ENTITY #code a code can't be a string",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const shoppingList = (0, _fakeShoppingList.default)(\"404\", 4);\n(0, _chai.expect)(() => (0, _domain.makeShoppingList)({ ...shoppingList\n})).to.throw(TypeError, 'A product code must be a number');",
                  "err": {},
                  "uuid": "ddc3d725-d621-45b5-8085-a309680674e6",
                  "parentUUID": "3b88df92-5379-4979-a506-d07314422855",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0e79256b-ad70-4b54-a27d-9a781f7fa858",
                "eba12250-6d92-42f4-ba7b-46b2d895c034",
                "ddc3d725-d621-45b5-8085-a309680674e6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "33514bda-4990-4b95-a774-0c0ba3fd2ad0",
              "title": "#quantity",
              "fullFile": "C:\\Users\\morga\\Documents\\web\\server-side\\tests\\unit-tests\\entities\\shoppingList.js",
              "file": "\\server-side\\tests\\unit-tests\\entities\\shoppingList.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "a shoppingList must have a quantity",
                  "fullTitle": "SHOPPINGLIST ENTITY #quantity a shoppingList must have a quantity",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const shoppingList = (0, _fakeShoppingList.default)(11223344, undefined);\n(0, _chai.expect)(() => (0, _domain.makeShoppingList)({ ...shoppingList\n})).to.throw(_errors.RequiredParameterError, 'A product quantity is a required.');",
                  "err": {},
                  "uuid": "455f4bd3-dbdb-4749-bdaf-687eeafefd75",
                  "parentUUID": "33514bda-4990-4b95-a774-0c0ba3fd2ad0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "a quantity can't be null",
                  "fullTitle": "SHOPPINGLIST ENTITY #quantity a quantity can't be null",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const shoppingList = (0, _fakeShoppingList.default)(11223344, null);\n(0, _chai.expect)(() => (0, _domain.makeShoppingList)({ ...shoppingList\n})).to.throw(TypeError, \"A product's quantity must be a number.\");",
                  "err": {},
                  "uuid": "360366ba-b558-400c-be64-61d127ef060b",
                  "parentUUID": "33514bda-4990-4b95-a774-0c0ba3fd2ad0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "a quantity can't be a string",
                  "fullTitle": "SHOPPINGLIST ENTITY #quantity a quantity can't be a string",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const shoppingList = (0, _fakeShoppingList.default)(11223344, \"404\");\n(0, _chai.expect)(() => (0, _domain.makeShoppingList)({ ...shoppingList\n})).to.throw(TypeError, \"A product's quantity must be a number.\");",
                  "err": {},
                  "uuid": "11c2be47-edac-4881-b187-98686b87bc4e",
                  "parentUUID": "33514bda-4990-4b95-a774-0c0ba3fd2ad0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "a quantity can't be to big",
                  "fullTitle": "SHOPPINGLIST ENTITY #quantity a quantity can't be to big",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const shoppingList = (0, _fakeShoppingList.default)(11223344, 22);\n(0, _chai.expect)(() => (0, _domain.makeShoppingList)({ ...shoppingList\n})).to.throw(RangeError, \"A product's quantity must be between 1 and 20.\");",
                  "err": {},
                  "uuid": "8ec040b4-a994-44f7-9f51-b7faf79d7179",
                  "parentUUID": "33514bda-4990-4b95-a774-0c0ba3fd2ad0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "a quantity can't be small than 1",
                  "fullTitle": "SHOPPINGLIST ENTITY #quantity a quantity can't be small than 1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const shoppingList = (0, _fakeShoppingList.default)(11223344, 0);\n(0, _chai.expect)(() => (0, _domain.makeShoppingList)({ ...shoppingList\n})).to.throw(RangeError, \"A product's quantity must be between 1 and 20.\");",
                  "err": {},
                  "uuid": "82ebcca8-2e68-41b1-bb2d-3263ea89fc51",
                  "parentUUID": "33514bda-4990-4b95-a774-0c0ba3fd2ad0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "455f4bd3-dbdb-4749-bdaf-687eeafefd75",
                "360366ba-b558-400c-be64-61d127ef060b",
                "11c2be47-edac-4881-b187-98686b87bc4e",
                "8ec040b4-a994-44f7-9f51-b7faf79d7179",
                "82ebcca8-2e68-41b1-bb2d-3263ea89fc51"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "317013a0-db84-40c6-a744-edb86f3b2a5d",
          "title": "USER ENTITY",
          "fullFile": "C:\\Users\\morga\\Documents\\web\\server-side\\tests\\unit-tests\\entities\\user.js",
          "file": "\\server-side\\tests\\unit-tests\\entities\\user.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "b38ac224-6eb9-4295-92a5-c436d51fb68a",
              "title": "#user",
              "fullFile": "C:\\Users\\morga\\Documents\\web\\server-side\\tests\\unit-tests\\entities\\user.js",
              "file": "\\server-side\\tests\\unit-tests\\entities\\user.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should make a user",
                  "fullTitle": "USER ENTITY #user it should make a user",
                  "timedOut": false,
                  "duration": 79,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = (0, _fakeUser.default)();\nconst buildUser = (0, _domain.makeUser)({ ...user\n});\n(0, _chai.expect)(buildUser.getFirstName()).to.be.eql(user.firstName);\n(0, _chai.expect)(buildUser.getLastName()).to.be.eql(user.lastName);\n(0, _chai.expect)(buildUser.getUsername()).to.be.eql(user.username);\n(0, _chai.expect)(buildUser.getEmail()).to.be.eql(user.email);\n(0, _chai.expect)(buildUser.getPassword()).not.to.be.eql(user.password);",
                  "err": {},
                  "uuid": "d972df86-8239-4874-bc92-82db0339b357",
                  "parentUUID": "b38ac224-6eb9-4295-92a5-c436d51fb68a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d972df86-8239-4874-bc92-82db0339b357"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 79,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "b987bb32-a463-43eb-bce5-7a6fba980744",
              "title": "#username",
              "fullFile": "C:\\Users\\morga\\Documents\\web\\server-side\\tests\\unit-tests\\entities\\user.js",
              "file": "\\server-side\\tests\\unit-tests\\entities\\user.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "a user must have a username",
                  "fullTitle": "USER ENTITY #username a user must have a username",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = (0, _fakeUser.default)({\n  username: undefined\n});\n(0, _chai.expect)(() => (0, _domain.makeUser)({ ...user\n})).to.throw(_errors.RequiredParameterError, 'A username is a required.');",
                  "err": {},
                  "uuid": "d513d062-22fd-42cb-a115-fc60cadbbe6c",
                  "parentUUID": "b987bb32-a463-43eb-bce5-7a6fba980744",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "a username can't be null",
                  "fullTitle": "USER ENTITY #username a username can't be null",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = (0, _fakeUser.default)({\n  username: null\n});\n(0, _chai.expect)(() => (0, _domain.makeUser)({ ...user\n})).to.throw(TypeError, 'A username must be a string.');",
                  "err": {},
                  "uuid": "dc30ae3c-8a30-4928-a643-e3f60a260394",
                  "parentUUID": "b987bb32-a463-43eb-bce5-7a6fba980744",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "a username can't be a number",
                  "fullTitle": "USER ENTITY #username a username can't be a number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = (0, _fakeUser.default)({\n  username: 123\n});\n(0, _chai.expect)(() => (0, _domain.makeUser)({ ...user\n})).to.throw(TypeError, 'A username must be a string.');",
                  "err": {},
                  "uuid": "5b6de99a-7c2e-4a60-a237-db3386d9eafb",
                  "parentUUID": "b987bb32-a463-43eb-bce5-7a6fba980744",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "a username max length must be 32",
                  "fullTitle": "USER ENTITY #username a username max length must be 32",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = (0, _fakeUser.default)({\n  username: \"abc\".repeat(35)\n});\n(0, _chai.expect)(() => (0, _domain.makeUser)({ ...user\n})).to.throw(RangeError, 'A username length must be between 4 and 32.');",
                  "err": {},
                  "uuid": "46829dd5-9f92-4690-a41b-0b3ff86f38cd",
                  "parentUUID": "b987bb32-a463-43eb-bce5-7a6fba980744",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "a username min length must be 4",
                  "fullTitle": "USER ENTITY #username a username min length must be 4",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = (0, _fakeUser.default)({\n  username: \"ab\"\n});\n(0, _chai.expect)(() => (0, _domain.makeUser)({ ...user\n})).to.throw(RangeError, 'A username length must be between 4 and 32.');",
                  "err": {},
                  "uuid": "df34f517-a56f-4e90-866e-e385a087133b",
                  "parentUUID": "b987bb32-a463-43eb-bce5-7a6fba980744",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d513d062-22fd-42cb-a115-fc60cadbbe6c",
                "dc30ae3c-8a30-4928-a643-e3f60a260394",
                "5b6de99a-7c2e-4a60-a237-db3386d9eafb",
                "46829dd5-9f92-4690-a41b-0b3ff86f38cd",
                "df34f517-a56f-4e90-866e-e385a087133b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "2e50d8b9-5e54-42ff-b56f-1c8356a51865",
              "title": "#email",
              "fullFile": "C:\\Users\\morga\\Documents\\web\\server-side\\tests\\unit-tests\\entities\\user.js",
              "file": "\\server-side\\tests\\unit-tests\\entities\\user.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "a user must have an email",
                  "fullTitle": "USER ENTITY #email a user must have an email",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = (0, _fakeUser.default)({\n  email: undefined\n});\n(0, _chai.expect)(() => (0, _domain.makeUser)({ ...user\n})).to.throw(_errors.RequiredParameterError, 'An email is a required.');",
                  "err": {},
                  "uuid": "7a917a3d-b4c7-4759-a76c-5630915e9c24",
                  "parentUUID": "2e50d8b9-5e54-42ff-b56f-1c8356a51865",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "an email must be a valid email",
                  "fullTitle": "USER ENTITY #email an email must be a valid email",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = (0, _fakeUser.default)({\n  email: \"dangamil.com\"\n});\n(0, _chai.expect)(() => (0, _domain.makeUser)({ ...user\n})).to.throw(SyntaxError, 'Invalid email.');",
                  "err": {},
                  "uuid": "b6134dff-13c3-4544-8bc9-8714a19046b4",
                  "parentUUID": "2e50d8b9-5e54-42ff-b56f-1c8356a51865",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "an email can't be null",
                  "fullTitle": "USER ENTITY #email an email can't be null",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = (0, _fakeUser.default)({\n  email: null\n});\n(0, _chai.expect)(() => (0, _domain.makeUser)({ ...user\n})).to.throw(SyntaxError, 'An email must be of type string.');",
                  "err": {},
                  "uuid": "e3c6b6ef-1ee2-4290-a41b-4574a9c5920d",
                  "parentUUID": "2e50d8b9-5e54-42ff-b56f-1c8356a51865",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "an email can't be a number",
                  "fullTitle": "USER ENTITY #email an email can't be a number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = (0, _fakeUser.default)({\n  email: 123\n});\n(0, _chai.expect)(() => (0, _domain.makeUser)({ ...user\n})).to.throw(SyntaxError, 'An email must be of type string.');",
                  "err": {},
                  "uuid": "7f961673-b529-4995-b6b1-34c3c01cad9f",
                  "parentUUID": "2e50d8b9-5e54-42ff-b56f-1c8356a51865",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7a917a3d-b4c7-4759-a76c-5630915e9c24",
                "b6134dff-13c3-4544-8bc9-8714a19046b4",
                "e3c6b6ef-1ee2-4290-a41b-4574a9c5920d",
                "7f961673-b529-4995-b6b1-34c3c01cad9f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "55036510-8cf3-4274-a2dd-9806672a3e02",
              "title": "#password",
              "fullFile": "C:\\Users\\morga\\Documents\\web\\server-side\\tests\\unit-tests\\entities\\user.js",
              "file": "\\server-side\\tests\\unit-tests\\entities\\user.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "a user must a have password",
                  "fullTitle": "USER ENTITY #password a user must a have password",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = (0, _fakeUser.default)({\n  password: undefined\n});\n(0, _chai.expect)(() => (0, _domain.makeUser)({ ...user\n})).to.throw(_errors.RequiredParameterError, 'A password is a required.');",
                  "err": {},
                  "uuid": "677dab13-0708-4a80-a311-e3106c855657",
                  "parentUUID": "55036510-8cf3-4274-a2dd-9806672a3e02",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can hash password",
                  "fullTitle": "USER ENTITY #password can hash password",
                  "timedOut": false,
                  "duration": 75,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = (0, _fakeUser.default)();\nconst password = (0, _domain.makeUser)({ ...user\n}).getPassword();\n(0, _chai.expect)(password.match(/^\\$2[aby]?\\$\\d{1,2}\\$[.\\/A-Za-z0-9]{53}$/)).to.not.be.null;",
                  "err": {},
                  "uuid": "a7b4c359-e646-4f1f-9b3b-1fcbe13541ba",
                  "parentUUID": "55036510-8cf3-4274-a2dd-9806672a3e02",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "a password can't be a null",
                  "fullTitle": "USER ENTITY #password a password can't be a null",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = (0, _fakeUser.default)({\n  password: null\n});\n(0, _chai.expect)(() => (0, _domain.makeUser)({ ...user\n})).to.throw(TypeError, 'The password must be of type string.');",
                  "err": {},
                  "uuid": "727d8694-6eb6-40b7-a271-715f8c1b5d6e",
                  "parentUUID": "55036510-8cf3-4274-a2dd-9806672a3e02",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "a password can't be a number",
                  "fullTitle": "USER ENTITY #password a password can't be a number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = (0, _fakeUser.default)({\n  password: 123\n});\n(0, _chai.expect)(() => (0, _domain.makeUser)({ ...user\n})).to.throw(TypeError, 'The password must be of type string.');",
                  "err": {},
                  "uuid": "99e9e317-43fb-4053-96ad-f7c1e3e2bf4e",
                  "parentUUID": "55036510-8cf3-4274-a2dd-9806672a3e02",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "677dab13-0708-4a80-a311-e3106c855657",
                "a7b4c359-e646-4f1f-9b3b-1fcbe13541ba",
                "727d8694-6eb6-40b7-a271-715f8c1b5d6e",
                "99e9e317-43fb-4053-96ad-f7c1e3e2bf4e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 76,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "5051de91-3c73-4c1f-a53e-04c825b3cee5",
          "title": "SHOPPINGLIST SERVICE",
          "fullFile": "C:\\Users\\morga\\Documents\\web\\server-side\\tests\\unit-tests\\services\\shoppingList-service.js",
          "file": "\\server-side\\tests\\unit-tests\\services\\shoppingList-service.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "SHOPPINGLIST SERVICE \"before all\" hook",
              "timedOut": false,
              "duration": 455,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { ...fakeUser\n} = (0, _fakeUser.default)();\nconst { ...fakeGroup\n} = (0, _fakeGroup.default)(\"testoss\", \"testoss\");\ninsertedUser = await _services.userService.addUser({ ...fakeUser\n});\ninsertedGroup = await _services.groupService.addGroup({\n  username: insertedUser.username,\n  ...fakeGroup\n});\ninsertedUserGroup = await _services.groupService.addMembersToGroup({\n  groupId: insertedGroup.dataValues.groupId,\n  username: insertedUser.username\n});",
              "err": {},
              "uuid": "d2ea892f-cc3f-4e2d-b6f1-d819c58583fa",
              "parentUUID": "5051de91-3c73-4c1f-a53e-04c825b3cee5",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "SHOPPINGLIST SERVICE \"after all\" hook",
              "timedOut": false,
              "duration": 10,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await _services.groupService.deleteUserFromGroup({\n  groupId: insertedGroup.dataValues.groupId,\n  userId: insertedUser.userId\n});\nawait _services.groupService.deleteGroup({\n  groupId: insertedGroup.dataValues.groupId\n});\nawait _services.userService.removeUser({\n  userId: insertedUser.userId\n});",
              "err": {},
              "uuid": "31854d38-b2ad-4d1c-8333-590414c54e57",
              "parentUUID": "5051de91-3c73-4c1f-a53e-04c825b3cee5",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "7719823f-baf2-46eb-9b1e-0e320bed7b86",
              "title": "#get-shopping-list",
              "fullFile": "C:\\Users\\morga\\Documents\\web\\server-side\\tests\\unit-tests\\services\\shoppingList-service.js",
              "file": "\\server-side\\tests\\unit-tests\\services\\shoppingList-service.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "not created",
                  "fullTitle": "SHOPPINGLIST SERVICE #get-shopping-list not created",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "c0c0e7d7-8bb9-4aae-af31-5af990f4f00c",
                  "parentUUID": "7719823f-baf2-46eb-9b1e-0e320bed7b86",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c0c0e7d7-8bb9-4aae-af31-5af990f4f00c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "4c722c9b-e9fa-4cf2-845c-aace4eacdf0e",
              "title": "#get-group-shopping-list",
              "fullFile": "C:\\Users\\morga\\Documents\\web\\server-side\\tests\\unit-tests\\services\\shoppingList-service.js",
              "file": "\\server-side\\tests\\unit-tests\\services\\shoppingList-service.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "not created",
                  "fullTitle": "SHOPPINGLIST SERVICE #get-group-shopping-list not created",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "0619e129-2c07-45b5-8fc5-abba193ebe73",
                  "parentUUID": "4c722c9b-e9fa-4cf2-845c-aace4eacdf0e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0619e129-2c07-45b5-8fc5-abba193ebe73"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "bc8319b3-c5d6-4d42-8965-9c95c2c45333",
              "title": "#add-product-to-shopping-list",
              "fullFile": "C:\\Users\\morga\\Documents\\web\\server-side\\tests\\unit-tests\\services\\shoppingList-service.js",
              "file": "\\server-side\\tests\\unit-tests\\services\\shoppingList-service.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "url must include a groupId",
                  "fullTitle": "SHOPPINGLIST SERVICE #add-product-to-shopping-list url must include a groupId",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const addProduct = await _services.shoppingListService.putProductInShoppingList({});\n(0, _chai.expect)(addProduct.message).to.equal(\"You must supply a group id.\");",
                  "err": {},
                  "uuid": "e64a99eb-9946-434e-ac74-e0b936927d57",
                  "parentUUID": "bc8319b3-c5d6-4d42-8965-9c95c2c45333",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can add a new product",
                  "fullTitle": "SHOPPINGLIST SERVICE #add-product-to-shopping-list can add a new product",
                  "timedOut": false,
                  "duration": 30,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const fakeShoppingList = (0, _fakeShoppingList.default)(CODE_BARRE, 4);\nconst addProduct = await _services.shoppingListService.putProductInShoppingList({\n  groupId: insertedGroup.dataValues.groupId,\n  userId: insertedUser.userId,\n  ...fakeShoppingList\n});\n(0, _chai.expect)(Number(addProduct.code)).to.equal(fakeShoppingList.code);\nawait _services.shoppingListService.removeProductFromShoppingList({\n  itemId: addProduct.id,\n  userId: insertedUser.userId\n});",
                  "err": {},
                  "uuid": "45ad4156-9014-426b-9dec-46941d164f34",
                  "parentUUID": "bc8319b3-c5d6-4d42-8965-9c95c2c45333",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "cannot add an inexisting product",
                  "fullTitle": "SHOPPINGLIST SERVICE #add-product-to-shopping-list cannot add an inexisting product",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const fakeShoppingList = (0, _fakeShoppingList.default)(1111111111100, 4);\nconst addProduct = await _services.shoppingListService.putProductInShoppingList({\n  groupId: insertedGroup.dataValues.groupId,\n  userId: insertedUser.userId,\n  ...fakeShoppingList\n});\n(0, _chai.expect)(addProduct.message).to.equal(`No product was found with this code ${fakeShoppingList.code}`);",
                  "err": {},
                  "uuid": "1b038195-f4a7-4b38-91c4-8a269ecf631e",
                  "parentUUID": "bc8319b3-c5d6-4d42-8965-9c95c2c45333",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "cannot add twice a product for a single user",
                  "fullTitle": "SHOPPINGLIST SERVICE #add-product-to-shopping-list cannot add twice a product for a single user",
                  "timedOut": false,
                  "duration": 40,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const fakeShoppingList = (0, _fakeShoppingList.default)(CODE_BARRE, 4);\nconst addProduct = await _services.shoppingListService.putProductInShoppingList({\n  groupId: insertedGroup.dataValues.groupId,\n  userId: insertedUser.userId,\n  ...fakeShoppingList\n});\nconst newAddProduct = await _services.shoppingListService.putProductInShoppingList({\n  groupId: insertedGroup.dataValues.groupId,\n  userId: insertedUser.userId,\n  ...fakeShoppingList\n});\n(0, _chai.expect)(newAddProduct.statusCode).to.equal(409);\nawait _services.shoppingListService.removeProductFromShoppingList({\n  itemId: addProduct.id,\n  userId: insertedUser.userId\n});",
                  "err": {},
                  "uuid": "ee45e614-9252-467a-8198-30b04d53ccb5",
                  "parentUUID": "bc8319b3-c5d6-4d42-8965-9c95c2c45333",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e64a99eb-9946-434e-ac74-e0b936927d57",
                "45ad4156-9014-426b-9dec-46941d164f34",
                "1b038195-f4a7-4b38-91c4-8a269ecf631e",
                "ee45e614-9252-467a-8198-30b04d53ccb5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 81,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "d9627dbd-41ee-43d9-884e-a19cdaba92ff",
              "title": "#remove-product-to-shopping-list",
              "fullFile": "C:\\Users\\morga\\Documents\\web\\server-side\\tests\\unit-tests\\services\\shoppingList-service.js",
              "file": "\\server-side\\tests\\unit-tests\\services\\shoppingList-service.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "itemId must include in parameters",
                  "fullTitle": "SHOPPINGLIST SERVICE #remove-product-to-shopping-list itemId must include in parameters",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const removedProduct = await _services.shoppingListService.removeProductFromShoppingList({\n  itemId: undefined,\n  userId: ''\n});\n(0, _chai.expect)(removedProduct.message).to.equal('You must supply the item id.');",
                  "err": {},
                  "uuid": "1d1e88bb-4e49-4f0b-bdf2-5bec3e2c0ec0",
                  "parentUUID": "d9627dbd-41ee-43d9-884e-a19cdaba92ff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can remove an existing product",
                  "fullTitle": "SHOPPINGLIST SERVICE #remove-product-to-shopping-list can remove an existing product",
                  "timedOut": false,
                  "duration": 20,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const fakeShoppingList = (0, _fakeShoppingList.default)(CODE_BARRE, 4);\nconst addProduct = await _services.shoppingListService.putProductInShoppingList({\n  groupId: insertedGroup.dataValues.groupId,\n  userId: insertedUser.userId,\n  ...fakeShoppingList\n});\nconst removeProduct = await _services.shoppingListService.removeProductFromShoppingList({\n  itemId: addProduct.id,\n  userId: insertedUser.userId\n});\n(0, _chai.expect)(removeProduct).to.equal(1);",
                  "err": {},
                  "uuid": "e399703e-e3d0-4341-b9ac-5e6890d9d984",
                  "parentUUID": "d9627dbd-41ee-43d9-884e-a19cdaba92ff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "cannot remove an inexisting product",
                  "fullTitle": "SHOPPINGLIST SERVICE #remove-product-to-shopping-list cannot remove an inexisting product",
                  "timedOut": false,
                  "duration": 18,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const fakeShoppingList = (0, _fakeShoppingList.default)(CODE_BARRE, 4);\nconst addProduct = await _services.shoppingListService.putProductInShoppingList({\n  groupId: insertedGroup.dataValues.groupId,\n  userId: insertedUser.userId,\n  ...fakeShoppingList\n});\nawait _services.shoppingListService.removeProductFromShoppingList({\n  itemId: addProduct.id,\n  userId: insertedUser.userId\n});\nconst newRemoveProduct = await _services.shoppingListService.removeProductFromShoppingList({\n  itemId: addProduct.id,\n  userId: insertedUser.userId\n});\n(0, _chai.expect)(newRemoveProduct.message).to.equal(`No item with this id '${addProduct.id}' was found in the shopping list !`);",
                  "err": {},
                  "uuid": "2023c457-0e06-4534-9700-667cc6161bd0",
                  "parentUUID": "d9627dbd-41ee-43d9-884e-a19cdaba92ff",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1d1e88bb-4e49-4f0b-bdf2-5bec3e2c0ec0",
                "e399703e-e3d0-4341-b9ac-5e6890d9d984",
                "2023c457-0e06-4534-9700-667cc6161bd0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 39,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "11b97453-82b9-47f7-9cd7-80dcc66d19df",
          "title": "USER SERVICE",
          "fullFile": "C:\\Users\\morga\\Documents\\web\\server-side\\tests\\unit-tests\\services\\user-service.js",
          "file": "\\server-side\\tests\\unit-tests\\services\\user-service.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "3539a077-a658-443b-b420-9875916f8b9a",
              "title": "#register-user",
              "fullFile": "C:\\Users\\morga\\Documents\\web\\server-side\\tests\\unit-tests\\services\\user-service.js",
              "file": "\\server-side\\tests\\unit-tests\\services\\user-service.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "inserts a user in the database",
                  "fullTitle": "USER SERVICE #register-user inserts a user in the database",
                  "timedOut": false,
                  "duration": 86,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { ...fakeUser\n} = (0, _fakeUser.default)();\nconst inserted = await _services.userService.addUser({ ...fakeUser\n});\nfakeUser.password = inserted.password;\nfakeUser.userId = inserted.userId;\n(0, _chai.expect)(inserted).to.deep.include(fakeUser);\nawait _services.userService.removeUser({\n  userId: inserted.userId\n});",
                  "err": {},
                  "uuid": "c737e755-acca-436f-82af-7c8d1fbcbb1c",
                  "parentUUID": "3539a077-a658-443b-b420-9875916f8b9a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can't register a user if he/she already exists",
                  "fullTitle": "USER SERVICE #register-user can't register a user if he/she already exists",
                  "timedOut": false,
                  "duration": 88,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { ...fakeUser\n} = (0, _fakeUser.default)();\nconst firstUser = await _services.userService.addUser({ ...fakeUser\n});\nconst secondtUser = await _services.userService.addUser({ ...fakeUser\n});\n(0, _chai.expect)(secondtUser.message).to.equal(\"A user with the same username or email already exists !\");\nawait _services.userService.removeUser({\n  userId: firstUser.userId\n});",
                  "err": {},
                  "uuid": "71ddbedc-1b80-4aef-ad92-fdd91b8ac813",
                  "parentUUID": "3539a077-a658-443b-b420-9875916f8b9a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c737e755-acca-436f-82af-7c8d1fbcbb1c",
                "71ddbedc-1b80-4aef-ad92-fdd91b8ac813"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 174,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "d583d871-de9d-41c4-82c8-813d0d773d5f",
              "title": "#login-user",
              "fullFile": "C:\\Users\\morga\\Documents\\web\\server-side\\tests\\unit-tests\\services\\user-service.js",
              "file": "\\server-side\\tests\\unit-tests\\services\\user-service.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "can authenticate a user",
                  "fullTitle": "USER SERVICE #login-user can authenticate a user",
                  "timedOut": false,
                  "duration": 178,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { ...fakeUser\n} = (0, _fakeUser.default)();\nconst createdUser = await _services.userService.addUser({ ...fakeUser\n});\nconst loggedInUser = await _services.userService.logInUser({\n  pseudo: fakeUser.username,\n  password: fakeUser.password\n});\n(0, _chai.expect)(loggedInUser).to.have.property('token');\n(0, _chai.expect)(loggedInUser.data.username).to.equal(fakeUser.username);\nawait _services.userService.removeUser({\n  userId: createdUser.userId\n});",
                  "err": {},
                  "uuid": "09cd1cc0-1600-4873-a2e3-ca4c78041595",
                  "parentUUID": "d583d871-de9d-41c4-82c8-813d0d773d5f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "must include an pseudo",
                  "fullTitle": "USER SERVICE #login-user must include an pseudo",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const loggedInUser = await _services.userService.logInUser({\n  pseudo: undefined,\n  password: \"123\"\n});\n(0, _chai.expect)(loggedInUser.message).to.equal(\"You must supply a pseudo.\");",
                  "err": {},
                  "uuid": "003b31ab-1667-4a34-8b88-5bdf57378c6c",
                  "parentUUID": "d583d871-de9d-41c4-82c8-813d0d773d5f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "must include an password",
                  "fullTitle": "USER SERVICE #login-user must include an password",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const loggedInUser = await _services.userService.logInUser({\n  pseudo: \"12345\",\n  password: undefined\n});\n(0, _chai.expect)(loggedInUser.message).to.equal(\"You must supply a password.\");",
                  "err": {},
                  "uuid": "46817088-f15d-46da-ab47-35ca25025937",
                  "parentUUID": "d583d871-de9d-41c4-82c8-813d0d773d5f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can't authenticate unregistered user",
                  "fullTitle": "USER SERVICE #login-user can't authenticate unregistered user",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const loggedInUser = await _services.userService.logInUser({\n  pseudo: '*******',\n  password: '*******'\n});\n(0, _chai.expect)(loggedInUser.message).to.equal(\"Authentication failed !\");",
                  "err": {},
                  "uuid": "58cfe23e-8fae-4b86-b040-836ccfdc7a73",
                  "parentUUID": "d583d871-de9d-41c4-82c8-813d0d773d5f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can't authenticate a user with a wrong password user",
                  "fullTitle": "USER SERVICE #login-user can't authenticate a user with a wrong password user",
                  "timedOut": false,
                  "duration": 165,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { ...fakeUser\n} = (0, _fakeUser.default)();\nconst createdUser = await _services.userService.addUser({ ...fakeUser\n});\nconst loggedInUser = await _services.userService.logInUser({\n  pseudo: fakeUser.username,\n  password: '*******'\n});\n(0, _chai.expect)(loggedInUser.message).to.equal(\"Authentication failed !\");\nawait _services.userService.removeUser({\n  userId: createdUser.userId\n});",
                  "err": {},
                  "uuid": "02ab3de4-5786-4ae9-a2a9-77d1b9cac981",
                  "parentUUID": "d583d871-de9d-41c4-82c8-813d0d773d5f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "09cd1cc0-1600-4873-a2e3-ca4c78041595",
                "003b31ab-1667-4a34-8b88-5bdf57378c6c",
                "46817088-f15d-46da-ab47-35ca25025937",
                "58cfe23e-8fae-4b86-b040-836ccfdc7a73",
                "02ab3de4-5786-4ae9-a2a9-77d1b9cac981"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 345,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "ea851c48-de3f-4ef7-9854-138b52def5a3",
              "title": "#list-one-user",
              "fullFile": "C:\\Users\\morga\\Documents\\web\\server-side\\tests\\unit-tests\\services\\user-service.js",
              "file": "\\server-side\\tests\\unit-tests\\services\\user-service.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "find user by id",
                  "fullTitle": "USER SERVICE #list-one-user find user by id",
                  "timedOut": false,
                  "duration": 84,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { ...fakeUser\n} = (0, _fakeUser.default)();\nconst inserted = await _services.userService.addUser({ ...fakeUser\n});\nfakeUser.userId = inserted.userId;\nconst listedOneUser = await _services.userService.listOneUser({\n  id: fakeUser.userId\n});\n(0, _chai.expect)(listedOneUser.dataValues.username).to.equal(fakeUser.username);\n(0, _chai.expect)(listedOneUser.dataValues.firstName).to.equal(fakeUser.firstName);\n(0, _chai.expect)(listedOneUser.dataValues.lastName).to.equal(fakeUser.lastName);\n(0, _chai.expect)(listedOneUser.dataValues.email).to.equal(fakeUser.email);\nawait _services.userService.removeUser({\n  userId: inserted.userId\n});",
                  "err": {},
                  "uuid": "e19bed02-9ebe-4743-a484-0472df546fef",
                  "parentUUID": "ea851c48-de3f-4ef7-9854-138b52def5a3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e19bed02-9ebe-4743-a484-0472df546fef"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 84,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "c1a0992f-44c4-4c0e-828c-189ee7602a4a",
              "title": "#update-one-user",
              "fullFile": "C:\\Users\\morga\\Documents\\web\\server-side\\tests\\unit-tests\\services\\user-service.js",
              "file": "\\server-side\\tests\\unit-tests\\services\\user-service.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "update one user with userId",
                  "fullTitle": "USER SERVICE #update-one-user update one user with userId",
                  "timedOut": false,
                  "duration": 93,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inserted = await _services.userService.addUser({ ...(0, _fakeUser.default)()\n});\nconst updatedInfo = (0, _fakeUser.default)({\n  username: 'test'\n});\nconst updatedUser = await _services.userService.putUser({\n  userId: inserted.userId,\n  ...updatedInfo\n});\n(0, _chai.expect)(updatedUser[1].dataValues.username).to.equal(updatedInfo.username);\nawait _services.userService.removeUser({\n  userId: inserted.userId\n});",
                  "err": {},
                  "uuid": "794989b1-3853-476f-bf7f-310e1a5a7f83",
                  "parentUUID": "c1a0992f-44c4-4c0e-828c-189ee7602a4a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can not update a user with an existing username or email",
                  "fullTitle": "USER SERVICE #update-one-user can not update a user with an existing username or email",
                  "timedOut": false,
                  "duration": 184,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user1 = await _services.userService.addUser({ ...(0, _fakeUser.default)()\n});\nconst user2 = await _services.userService.addUser({ ...(0, _fakeUser.default)()\n});\nconst updatedInfo = (0, _fakeUser.default)({\n  username: user2.username\n});\nconst updatedUser1 = await _services.userService.putUser({\n  userId: user1.userId,\n  ...updatedInfo\n});\n(0, _chai.expect)(updatedUser1.message).to.equal('A user with the same username already exists !');\nawait _services.userService.removeUser({\n  userId: user1.userId\n});\nawait _services.userService.removeUser({\n  userId: user2.userId\n});",
                  "err": {},
                  "uuid": "1a0c06a8-31a5-4132-a37c-11fd61ad6692",
                  "parentUUID": "c1a0992f-44c4-4c0e-828c-189ee7602a4a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "794989b1-3853-476f-bf7f-310e1a5a7f83",
                "1a0c06a8-31a5-4132-a37c-11fd61ad6692"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 277,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.1.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "index",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.1.1"
    },
    "marge": {
      "options": {
        "reportDir": "test-reports/unit",
        "reportFilename": "index"
      },
      "version": "5.1.0"
    }
  }
}