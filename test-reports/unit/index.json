{
  "stats": {
    "suites": 26,
    "tests": 53,
    "passes": 53,
    "pending": 0,
    "failures": 0,
    "start": "2020-12-04T15:27:49.403Z",
    "end": "2020-12-04T15:27:50.927Z",
    "duration": 1524,
    "testsRegistered": 53,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "3abad32f-7c56-4fb5-8c50-654d9a9b2096",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "4e244492-2fb7-4d1b-9a2c-0a3e21525b43",
          "title": "GROUP ENTITY",
          "fullFile": "C:\\Users\\morga\\Documents\\web\\server-side\\tests\\unit-tests\\entities\\group.js",
          "file": "\\server-side\\tests\\unit-tests\\entities\\group.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "a77714b8-060c-4d71-ab04-888da818a243",
              "title": "#group",
              "fullFile": "C:\\Users\\morga\\Documents\\web\\server-side\\tests\\unit-tests\\entities\\group.js",
              "file": "\\server-side\\tests\\unit-tests\\entities\\group.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should make a group",
                  "fullTitle": "GROUP ENTITY #group it should make a group",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const randomGroup = Math.random().toString(36).substr(2, 9);\nconst group = (0, _fakeGroup.default)(randomGroup, randomGroup + randomGroup);\nconst buildGroup = (0, _domain.makeGroup)({ ...group\n});\n(0, _chai.expect)(buildGroup.getGroupName()).to.be.eql(group.groupName);\n(0, _chai.expect)(buildGroup.getGroupDescription()).to.be.eql(group.groupDescription);",
                  "err": {},
                  "uuid": "2cdf8d66-3cae-4b15-be31-dc946e63b07e",
                  "parentUUID": "a77714b8-060c-4d71-ab04-888da818a243",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2cdf8d66-3cae-4b15-be31-dc946e63b07e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "86dbc912-8566-475a-9cfb-29cffd58c4d1",
              "title": "#groupName",
              "fullFile": "C:\\Users\\morga\\Documents\\web\\server-side\\tests\\unit-tests\\entities\\group.js",
              "file": "\\server-side\\tests\\unit-tests\\entities\\group.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "a group must have a groupName",
                  "fullTitle": "GROUP ENTITY #groupName a group must have a groupName",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const group = (0, _fakeGroup.default)(undefined, \"test\");\n(0, _chai.expect)(() => (0, _domain.makeGroup)({ ...group\n})).to.throw(_errors.RequiredParameterError, 'A groupName is a required.');",
                  "err": {},
                  "uuid": "82145ffc-0cd1-495e-b04e-4d4dbc12345b",
                  "parentUUID": "86dbc912-8566-475a-9cfb-29cffd58c4d1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "a groupName can't be null",
                  "fullTitle": "GROUP ENTITY #groupName a groupName can't be null",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const group = (0, _fakeGroup.default)(null, \"test\");\n(0, _chai.expect)(() => (0, _domain.makeGroup)({ ...group\n})).to.throw(TypeError, 'A groupName must be a string.');",
                  "err": {},
                  "uuid": "b402ba1f-6178-46a7-9a05-4df3164def58",
                  "parentUUID": "86dbc912-8566-475a-9cfb-29cffd58c4d1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "a groupName can't be a number",
                  "fullTitle": "GROUP ENTITY #groupName a groupName can't be a number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const group = (0, _fakeGroup.default)(404, \"test\");\n(0, _chai.expect)(() => (0, _domain.makeGroup)({ ...group\n})).to.throw(TypeError, 'A groupName must be a string.');",
                  "err": {},
                  "uuid": "7e101288-5fa2-4f7f-9240-00ae0c51a117",
                  "parentUUID": "86dbc912-8566-475a-9cfb-29cffd58c4d1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "82145ffc-0cd1-495e-b04e-4d4dbc12345b",
                "b402ba1f-6178-46a7-9a05-4df3164def58",
                "7e101288-5fa2-4f7f-9240-00ae0c51a117"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "f2ff5a7b-115e-43b2-af38-a8be1aedae19",
              "title": "#groupDescription",
              "fullFile": "C:\\Users\\morga\\Documents\\web\\server-side\\tests\\unit-tests\\entities\\group.js",
              "file": "\\server-side\\tests\\unit-tests\\entities\\group.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "a group must have a groupDescription",
                  "fullTitle": "GROUP ENTITY #groupDescription a group must have a groupDescription",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const group = (0, _fakeGroup.default)(\"test\", undefined);\n(0, _chai.expect)(() => (0, _domain.makeGroup)({ ...group\n})).to.throw(_errors.RequiredParameterError, 'A group description is a required.');",
                  "err": {},
                  "uuid": "6adecd58-8b52-4407-83c3-9c4eea27d0c3",
                  "parentUUID": "f2ff5a7b-115e-43b2-af38-a8be1aedae19",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "a groupDescription can't be null",
                  "fullTitle": "GROUP ENTITY #groupDescription a groupDescription can't be null",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const group = (0, _fakeGroup.default)(\"test\", null);\n(0, _chai.expect)(() => (0, _domain.makeGroup)({ ...group\n})).to.throw(TypeError, 'A group description must be a string.');",
                  "err": {},
                  "uuid": "7e1169c9-7ba9-4db9-ab6e-f82ae92e8e4e",
                  "parentUUID": "f2ff5a7b-115e-43b2-af38-a8be1aedae19",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "a groupDescription can't be a number",
                  "fullTitle": "GROUP ENTITY #groupDescription a groupDescription can't be a number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const group = (0, _fakeGroup.default)(\"test\", 404);\n(0, _chai.expect)(() => (0, _domain.makeGroup)({ ...group\n})).to.throw(TypeError, 'A group description must be a string.');",
                  "err": {},
                  "uuid": "9277ec46-44f0-4fa2-b8d9-28c28f6ff35f",
                  "parentUUID": "f2ff5a7b-115e-43b2-af38-a8be1aedae19",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6adecd58-8b52-4407-83c3-9c4eea27d0c3",
                "7e1169c9-7ba9-4db9-ab6e-f82ae92e8e4e",
                "9277ec46-44f0-4fa2-b8d9-28c28f6ff35f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "0e94e259-329b-4a12-84f6-e24b4fa66f5b",
          "title": "PRODUCT ENTITY",
          "fullFile": "C:\\Users\\morga\\Documents\\web\\server-side\\tests\\unit-tests\\entities\\product.js",
          "file": "\\server-side\\tests\\unit-tests\\entities\\product.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "263b8d5f-7313-42b9-95bd-52a7bbbb4c3f",
              "title": "#product",
              "fullFile": "C:\\Users\\morga\\Documents\\web\\server-side\\tests\\unit-tests\\entities\\product.js",
              "file": "\\server-side\\tests\\unit-tests\\entities\\product.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should make a product",
                  "fullTitle": "PRODUCT ENTITY #product it should make a product",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const product = (0, _fakeProduct.default)(\"jasmin\");\nconst buildProduct = (0, _domain.makeProduct)({ ...product\n});\n(0, _chai.expect)(buildProduct.getProductName()).to.be.eql(product.productName);",
                  "err": {},
                  "uuid": "bf7e493d-80fd-4f3e-b66c-1fb053970e5c",
                  "parentUUID": "263b8d5f-7313-42b9-95bd-52a7bbbb4c3f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bf7e493d-80fd-4f3e-b66c-1fb053970e5c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "7b7f29ee-b747-4cb1-b0ad-e2e2e4fc2c82",
              "title": "#productName",
              "fullFile": "C:\\Users\\morga\\Documents\\web\\server-side\\tests\\unit-tests\\entities\\product.js",
              "file": "\\server-side\\tests\\unit-tests\\entities\\product.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "a product must have a productName",
                  "fullTitle": "PRODUCT ENTITY #productName a product must have a productName",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const product = (0, _fakeProduct.default)(undefined);\n(0, _chai.expect)(() => (0, _domain.makeProduct)({ ...product\n})).to.throw(_errors.RequiredParameterError, 'A productName is a required.');",
                  "err": {},
                  "uuid": "3093c1cf-bfc4-4755-bd83-914dbbda77f6",
                  "parentUUID": "7b7f29ee-b747-4cb1-b0ad-e2e2e4fc2c82",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "a productName can't be null",
                  "fullTitle": "PRODUCT ENTITY #productName a productName can't be null",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const product = (0, _fakeProduct.default)(null);\n(0, _chai.expect)(() => (0, _domain.makeProduct)({ ...product\n})).to.throw(TypeError, 'A product name must be a string.');",
                  "err": {},
                  "uuid": "0f08fe87-97e0-4ab4-b40a-2fc8d81a565c",
                  "parentUUID": "7b7f29ee-b747-4cb1-b0ad-e2e2e4fc2c82",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "a productName can't be a number",
                  "fullTitle": "PRODUCT ENTITY #productName a productName can't be a number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const product = (0, _fakeProduct.default)(404);\n(0, _chai.expect)(() => (0, _domain.makeProduct)({ ...product\n})).to.throw(TypeError, 'A product name must be a string.');",
                  "err": {},
                  "uuid": "7a2bf23b-2781-4083-b090-92254198e206",
                  "parentUUID": "7b7f29ee-b747-4cb1-b0ad-e2e2e4fc2c82",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3093c1cf-bfc4-4755-bd83-914dbbda77f6",
                "0f08fe87-97e0-4ab4-b40a-2fc8d81a565c",
                "7a2bf23b-2781-4083-b090-92254198e206"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "99a533b6-553d-4097-81c3-3e6f111b1659",
          "title": "SHOPPINGLIST ENTITY",
          "fullFile": "C:\\Users\\morga\\Documents\\web\\server-side\\tests\\unit-tests\\entities\\shoppingList.js",
          "file": "\\server-side\\tests\\unit-tests\\entities\\shoppingList.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "01306e80-2eda-4993-9e17-b12ce3bfbfd7",
              "title": "#shoppingList",
              "fullFile": "C:\\Users\\morga\\Documents\\web\\server-side\\tests\\unit-tests\\entities\\shoppingList.js",
              "file": "\\server-side\\tests\\unit-tests\\entities\\shoppingList.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should make a shopping list",
                  "fullTitle": "SHOPPINGLIST ENTITY #shoppingList it should make a shopping list",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const shoppingList = (0, _fakeShoppingList.default)(11223344, 4);\nconst buildShoppingList = (0, _domain.makeShoppingList)({ ...shoppingList\n});\n(0, _chai.expect)(buildShoppingList.getProductCode()).to.be.eql(shoppingList.code);\n(0, _chai.expect)(buildShoppingList.getProductQuantity()).to.be.eql(shoppingList.quantity);",
                  "err": {},
                  "uuid": "d1716a71-681d-41d6-9179-46c017b65cdd",
                  "parentUUID": "01306e80-2eda-4993-9e17-b12ce3bfbfd7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d1716a71-681d-41d6-9179-46c017b65cdd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "4e7dd7c2-4e70-4806-9f9a-b04baf55a631",
              "title": "#code",
              "fullFile": "C:\\Users\\morga\\Documents\\web\\server-side\\tests\\unit-tests\\entities\\shoppingList.js",
              "file": "\\server-side\\tests\\unit-tests\\entities\\shoppingList.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "a shoppingList must have a code",
                  "fullTitle": "SHOPPINGLIST ENTITY #code a shoppingList must have a code",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const shoppingList = (0, _fakeShoppingList.default)(undefined, 4);\n(0, _chai.expect)(() => (0, _domain.makeShoppingList)({ ...shoppingList\n})).to.throw(_errors.RequiredParameterError, 'A product code is a required.');",
                  "err": {},
                  "uuid": "4b130f10-eec4-4453-88cd-58a5d2bf7cbc",
                  "parentUUID": "4e7dd7c2-4e70-4806-9f9a-b04baf55a631",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "a code can't be null",
                  "fullTitle": "SHOPPINGLIST ENTITY #code a code can't be null",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const shoppingList = (0, _fakeShoppingList.default)(null, 4);\n(0, _chai.expect)(() => (0, _domain.makeShoppingList)({ ...shoppingList\n})).to.throw(TypeError, 'A product code must be a number.');",
                  "err": {},
                  "uuid": "1dd190ea-1861-4a75-990f-bc00ece036e4",
                  "parentUUID": "4e7dd7c2-4e70-4806-9f9a-b04baf55a631",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "a code can't be a string",
                  "fullTitle": "SHOPPINGLIST ENTITY #code a code can't be a string",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const shoppingList = (0, _fakeShoppingList.default)(\"404\", 4);\n(0, _chai.expect)(() => (0, _domain.makeShoppingList)({ ...shoppingList\n})).to.throw(TypeError, 'A product code must be a number');",
                  "err": {},
                  "uuid": "9ea47567-07eb-4e9a-bd2a-3d90cc3af2f5",
                  "parentUUID": "4e7dd7c2-4e70-4806-9f9a-b04baf55a631",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4b130f10-eec4-4453-88cd-58a5d2bf7cbc",
                "1dd190ea-1861-4a75-990f-bc00ece036e4",
                "9ea47567-07eb-4e9a-bd2a-3d90cc3af2f5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "dc328985-21c1-4b7e-91c2-57d38937d0ef",
              "title": "#quantity",
              "fullFile": "C:\\Users\\morga\\Documents\\web\\server-side\\tests\\unit-tests\\entities\\shoppingList.js",
              "file": "\\server-side\\tests\\unit-tests\\entities\\shoppingList.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "a shoppingList must have a quantity",
                  "fullTitle": "SHOPPINGLIST ENTITY #quantity a shoppingList must have a quantity",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const shoppingList = (0, _fakeShoppingList.default)(11223344, undefined);\n(0, _chai.expect)(() => (0, _domain.makeShoppingList)({ ...shoppingList\n})).to.throw(_errors.RequiredParameterError, 'A product quantity is a required.');",
                  "err": {},
                  "uuid": "e499b8c4-12a7-41bc-b431-8ca66ee73914",
                  "parentUUID": "dc328985-21c1-4b7e-91c2-57d38937d0ef",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "a quantity can't be null",
                  "fullTitle": "SHOPPINGLIST ENTITY #quantity a quantity can't be null",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const shoppingList = (0, _fakeShoppingList.default)(11223344, null);\n(0, _chai.expect)(() => (0, _domain.makeShoppingList)({ ...shoppingList\n})).to.throw(TypeError, \"A product's quantity must be a number.\");",
                  "err": {},
                  "uuid": "4eed467d-b49d-445b-a9e2-0d5dfedfb831",
                  "parentUUID": "dc328985-21c1-4b7e-91c2-57d38937d0ef",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "a quantity can't be a string",
                  "fullTitle": "SHOPPINGLIST ENTITY #quantity a quantity can't be a string",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const shoppingList = (0, _fakeShoppingList.default)(11223344, \"404\");\n(0, _chai.expect)(() => (0, _domain.makeShoppingList)({ ...shoppingList\n})).to.throw(TypeError, \"A product's quantity must be a number.\");",
                  "err": {},
                  "uuid": "ec261fd0-434c-4a3a-9440-820f40c8c866",
                  "parentUUID": "dc328985-21c1-4b7e-91c2-57d38937d0ef",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "a quantity can't be to big",
                  "fullTitle": "SHOPPINGLIST ENTITY #quantity a quantity can't be to big",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const shoppingList = (0, _fakeShoppingList.default)(11223344, 22);\n(0, _chai.expect)(() => (0, _domain.makeShoppingList)({ ...shoppingList\n})).to.throw(RangeError, \"A product's quantity must be between 1 and 20.\");",
                  "err": {},
                  "uuid": "6e2da26d-abde-4036-8581-15ffc977cb9d",
                  "parentUUID": "dc328985-21c1-4b7e-91c2-57d38937d0ef",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "a quantity can't be small than 1",
                  "fullTitle": "SHOPPINGLIST ENTITY #quantity a quantity can't be small than 1",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const shoppingList = (0, _fakeShoppingList.default)(11223344, 0);\n(0, _chai.expect)(() => (0, _domain.makeShoppingList)({ ...shoppingList\n})).to.throw(RangeError, \"A product's quantity must be between 1 and 20.\");",
                  "err": {},
                  "uuid": "f52ad481-a56c-484c-9bec-3fb519ea70fb",
                  "parentUUID": "dc328985-21c1-4b7e-91c2-57d38937d0ef",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e499b8c4-12a7-41bc-b431-8ca66ee73914",
                "4eed467d-b49d-445b-a9e2-0d5dfedfb831",
                "ec261fd0-434c-4a3a-9440-820f40c8c866",
                "6e2da26d-abde-4036-8581-15ffc977cb9d",
                "f52ad481-a56c-484c-9bec-3fb519ea70fb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "3cc2282e-1023-46ad-9be6-27dd7f1554c2",
          "title": "USER ENTITY",
          "fullFile": "C:\\Users\\morga\\Documents\\web\\server-side\\tests\\unit-tests\\entities\\user.js",
          "file": "\\server-side\\tests\\unit-tests\\entities\\user.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "c30c8620-a0e6-442c-9400-223c1841c037",
              "title": "#user",
              "fullFile": "C:\\Users\\morga\\Documents\\web\\server-side\\tests\\unit-tests\\entities\\user.js",
              "file": "\\server-side\\tests\\unit-tests\\entities\\user.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should make a user",
                  "fullTitle": "USER ENTITY #user it should make a user",
                  "timedOut": false,
                  "duration": 82,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = (0, _fakeUser.default)();\nconst buildUser = (0, _domain.makeUser)({ ...user\n});\n(0, _chai.expect)(buildUser.getFirstName()).to.be.eql(user.firstName);\n(0, _chai.expect)(buildUser.getLastName()).to.be.eql(user.lastName);\n(0, _chai.expect)(buildUser.getUsername()).to.be.eql(user.username);\n(0, _chai.expect)(buildUser.getEmail()).to.be.eql(user.email);\n(0, _chai.expect)(buildUser.getPassword()).not.to.be.eql(user.password);",
                  "err": {},
                  "uuid": "1701c3d9-f572-417e-8620-ac15fce650a9",
                  "parentUUID": "c30c8620-a0e6-442c-9400-223c1841c037",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1701c3d9-f572-417e-8620-ac15fce650a9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 82,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "7cd7bdaf-4b2d-4c46-bd0d-844ec3b7b3a9",
              "title": "#username",
              "fullFile": "C:\\Users\\morga\\Documents\\web\\server-side\\tests\\unit-tests\\entities\\user.js",
              "file": "\\server-side\\tests\\unit-tests\\entities\\user.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "a user must have a username",
                  "fullTitle": "USER ENTITY #username a user must have a username",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = (0, _fakeUser.default)({\n  username: undefined\n});\n(0, _chai.expect)(() => (0, _domain.makeUser)({ ...user\n})).to.throw(_errors.RequiredParameterError, 'A username is a required.');",
                  "err": {},
                  "uuid": "8a6417c4-98df-49cb-9b7f-6b363834410f",
                  "parentUUID": "7cd7bdaf-4b2d-4c46-bd0d-844ec3b7b3a9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "a username can't be null",
                  "fullTitle": "USER ENTITY #username a username can't be null",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = (0, _fakeUser.default)({\n  username: null\n});\n(0, _chai.expect)(() => (0, _domain.makeUser)({ ...user\n})).to.throw(TypeError, 'A username must be a string.');",
                  "err": {},
                  "uuid": "e2e8bd03-7d44-460b-84f3-ffac40669860",
                  "parentUUID": "7cd7bdaf-4b2d-4c46-bd0d-844ec3b7b3a9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "a username can't be a number",
                  "fullTitle": "USER ENTITY #username a username can't be a number",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = (0, _fakeUser.default)({\n  username: 123\n});\n(0, _chai.expect)(() => (0, _domain.makeUser)({ ...user\n})).to.throw(TypeError, 'A username must be a string.');",
                  "err": {},
                  "uuid": "0bf72be8-7c18-4410-9893-edb0bd084ccf",
                  "parentUUID": "7cd7bdaf-4b2d-4c46-bd0d-844ec3b7b3a9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "a username max length must be 32",
                  "fullTitle": "USER ENTITY #username a username max length must be 32",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = (0, _fakeUser.default)({\n  username: \"abc\".repeat(35)\n});\n(0, _chai.expect)(() => (0, _domain.makeUser)({ ...user\n})).to.throw(RangeError, 'A username length must be between 4 and 32.');",
                  "err": {},
                  "uuid": "a962944b-bbc1-4c96-aab5-cd3163ee64cf",
                  "parentUUID": "7cd7bdaf-4b2d-4c46-bd0d-844ec3b7b3a9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "a username min length must be 4",
                  "fullTitle": "USER ENTITY #username a username min length must be 4",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = (0, _fakeUser.default)({\n  username: \"ab\"\n});\n(0, _chai.expect)(() => (0, _domain.makeUser)({ ...user\n})).to.throw(RangeError, 'A username length must be between 4 and 32.');",
                  "err": {},
                  "uuid": "1fc82bbf-9236-4dc1-aad0-a0e991a2ff1d",
                  "parentUUID": "7cd7bdaf-4b2d-4c46-bd0d-844ec3b7b3a9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8a6417c4-98df-49cb-9b7f-6b363834410f",
                "e2e8bd03-7d44-460b-84f3-ffac40669860",
                "0bf72be8-7c18-4410-9893-edb0bd084ccf",
                "a962944b-bbc1-4c96-aab5-cd3163ee64cf",
                "1fc82bbf-9236-4dc1-aad0-a0e991a2ff1d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "b224a5d5-cff5-424b-b49c-a20432617fec",
              "title": "#email",
              "fullFile": "C:\\Users\\morga\\Documents\\web\\server-side\\tests\\unit-tests\\entities\\user.js",
              "file": "\\server-side\\tests\\unit-tests\\entities\\user.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "a user must have an email",
                  "fullTitle": "USER ENTITY #email a user must have an email",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = (0, _fakeUser.default)({\n  email: undefined\n});\n(0, _chai.expect)(() => (0, _domain.makeUser)({ ...user\n})).to.throw(_errors.RequiredParameterError, 'An email is a required.');",
                  "err": {},
                  "uuid": "11ac9376-1951-4b71-baca-d8a4f5be7739",
                  "parentUUID": "b224a5d5-cff5-424b-b49c-a20432617fec",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "an email must be a valid email",
                  "fullTitle": "USER ENTITY #email an email must be a valid email",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = (0, _fakeUser.default)({\n  email: \"dangamil.com\"\n});\n(0, _chai.expect)(() => (0, _domain.makeUser)({ ...user\n})).to.throw(SyntaxError, 'Invalid email.');",
                  "err": {},
                  "uuid": "83e703ea-0374-4b46-a713-5b87dbf9006a",
                  "parentUUID": "b224a5d5-cff5-424b-b49c-a20432617fec",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "an email can't be null",
                  "fullTitle": "USER ENTITY #email an email can't be null",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = (0, _fakeUser.default)({\n  email: null\n});\n(0, _chai.expect)(() => (0, _domain.makeUser)({ ...user\n})).to.throw(SyntaxError, 'An email must be of type string.');",
                  "err": {},
                  "uuid": "83c20993-bb9c-4f74-8dd1-dc2eb98a098f",
                  "parentUUID": "b224a5d5-cff5-424b-b49c-a20432617fec",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "an email can't be a number",
                  "fullTitle": "USER ENTITY #email an email can't be a number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = (0, _fakeUser.default)({\n  email: 123\n});\n(0, _chai.expect)(() => (0, _domain.makeUser)({ ...user\n})).to.throw(SyntaxError, 'An email must be of type string.');",
                  "err": {},
                  "uuid": "1731ef5b-877c-4170-94e1-b0e15a967dd3",
                  "parentUUID": "b224a5d5-cff5-424b-b49c-a20432617fec",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "11ac9376-1951-4b71-baca-d8a4f5be7739",
                "83e703ea-0374-4b46-a713-5b87dbf9006a",
                "83c20993-bb9c-4f74-8dd1-dc2eb98a098f",
                "1731ef5b-877c-4170-94e1-b0e15a967dd3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "78cf48f6-6b05-4f2f-be88-dcde2d1d3236",
              "title": "#password",
              "fullFile": "C:\\Users\\morga\\Documents\\web\\server-side\\tests\\unit-tests\\entities\\user.js",
              "file": "\\server-side\\tests\\unit-tests\\entities\\user.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "a user must a have password",
                  "fullTitle": "USER ENTITY #password a user must a have password",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = (0, _fakeUser.default)({\n  password: undefined\n});\n(0, _chai.expect)(() => (0, _domain.makeUser)({ ...user\n})).to.throw(_errors.RequiredParameterError, 'A password is a required.');",
                  "err": {},
                  "uuid": "aef00e0c-6270-488c-864c-9c8fabf95203",
                  "parentUUID": "78cf48f6-6b05-4f2f-be88-dcde2d1d3236",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can hash password",
                  "fullTitle": "USER ENTITY #password can hash password",
                  "timedOut": false,
                  "duration": 79,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = (0, _fakeUser.default)();\nconst password = (0, _domain.makeUser)({ ...user\n}).getPassword();\n(0, _chai.expect)(password.match(/^\\$2[aby]?\\$\\d{1,2}\\$[.\\/A-Za-z0-9]{53}$/)).to.not.be.null;",
                  "err": {},
                  "uuid": "e2ffa2a3-a860-45aa-841d-cf8d9a309242",
                  "parentUUID": "78cf48f6-6b05-4f2f-be88-dcde2d1d3236",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "a password can't be a null",
                  "fullTitle": "USER ENTITY #password a password can't be a null",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = (0, _fakeUser.default)({\n  password: null\n});\n(0, _chai.expect)(() => (0, _domain.makeUser)({ ...user\n})).to.throw(TypeError, 'The password must be of type string.');",
                  "err": {},
                  "uuid": "bb85c1eb-e259-45eb-aa78-16970c7a367b",
                  "parentUUID": "78cf48f6-6b05-4f2f-be88-dcde2d1d3236",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "a password can't be a number",
                  "fullTitle": "USER ENTITY #password a password can't be a number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = (0, _fakeUser.default)({\n  password: 123\n});\n(0, _chai.expect)(() => (0, _domain.makeUser)({ ...user\n})).to.throw(TypeError, 'The password must be of type string.');",
                  "err": {},
                  "uuid": "fd087073-1e05-4d8d-a534-0e960473dfa7",
                  "parentUUID": "78cf48f6-6b05-4f2f-be88-dcde2d1d3236",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "aef00e0c-6270-488c-864c-9c8fabf95203",
                "e2ffa2a3-a860-45aa-841d-cf8d9a309242",
                "bb85c1eb-e259-45eb-aa78-16970c7a367b",
                "fd087073-1e05-4d8d-a534-0e960473dfa7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 79,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "7bde1a38-c97b-45d8-b135-1e19b56e46bf",
          "title": "SHOPPINGLIST SERVICE",
          "fullFile": "C:\\Users\\morga\\Documents\\web\\server-side\\tests\\unit-tests\\services\\shoppingList-service.js",
          "file": "\\server-side\\tests\\unit-tests\\services\\shoppingList-service.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "SHOPPINGLIST SERVICE \"before all\" hook",
              "timedOut": false,
              "duration": 343,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { ...fakeUser\n} = (0, _fakeUser.default)();\nconst { ...fakeGroup\n} = (0, _fakeGroup.default)(\"testoss\", \"testoss\");\ninsertedUser = await _services.userService.addUser({ ...fakeUser\n});\ninsertedGroup = await _services.groupService.addGroup({\n  username: insertedUser.username,\n  ...fakeGroup\n});\ninsertedUserGroup = await _services.groupService.addMembersToGroup({\n  groupId: insertedGroup.dataValues.groupId,\n  username: insertedUser.username\n});",
              "err": {},
              "uuid": "980c2716-6929-4566-8661-6757d2cc8767",
              "parentUUID": "7bde1a38-c97b-45d8-b135-1e19b56e46bf",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "SHOPPINGLIST SERVICE \"after all\" hook",
              "timedOut": false,
              "duration": 8,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await _services.groupService.deleteUserFromGroup({\n  groupId: insertedGroup.dataValues.groupId,\n  userId: insertedUser.userId\n});\nawait _services.groupService.deleteGroup({\n  groupId: insertedGroup.dataValues.groupId\n});\nawait _services.userService.removeUser({\n  userId: insertedUser.userId\n});",
              "err": {},
              "uuid": "9fa69975-143d-463c-91b8-ea8e778a0691",
              "parentUUID": "7bde1a38-c97b-45d8-b135-1e19b56e46bf",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "2dbaa886-7702-4ed5-8ed7-e2b4af50fa8b",
              "title": "#get-shopping-list",
              "fullFile": "C:\\Users\\morga\\Documents\\web\\server-side\\tests\\unit-tests\\services\\shoppingList-service.js",
              "file": "\\server-side\\tests\\unit-tests\\services\\shoppingList-service.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "not created",
                  "fullTitle": "SHOPPINGLIST SERVICE #get-shopping-list not created",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "0b0be359-9eb9-4ad5-a086-78c09da3c67c",
                  "parentUUID": "2dbaa886-7702-4ed5-8ed7-e2b4af50fa8b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0b0be359-9eb9-4ad5-a086-78c09da3c67c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "f86d2648-a3c3-49e9-b7bb-b22250d037f6",
              "title": "#get-group-shopping-list",
              "fullFile": "C:\\Users\\morga\\Documents\\web\\server-side\\tests\\unit-tests\\services\\shoppingList-service.js",
              "file": "\\server-side\\tests\\unit-tests\\services\\shoppingList-service.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "not created",
                  "fullTitle": "SHOPPINGLIST SERVICE #get-group-shopping-list not created",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "c9afa6de-c786-47e5-970d-c9459e1eda9d",
                  "parentUUID": "f86d2648-a3c3-49e9-b7bb-b22250d037f6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c9afa6de-c786-47e5-970d-c9459e1eda9d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "a72fe61c-d60a-459e-b912-dc7cdace8938",
              "title": "#add-product-to-shopping-list",
              "fullFile": "C:\\Users\\morga\\Documents\\web\\server-side\\tests\\unit-tests\\services\\shoppingList-service.js",
              "file": "\\server-side\\tests\\unit-tests\\services\\shoppingList-service.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "url must include a groupId",
                  "fullTitle": "SHOPPINGLIST SERVICE #add-product-to-shopping-list url must include a groupId",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const addProduct = await _services.shoppingListService.putProductInShoppingList({});\n(0, _chai.expect)(addProduct.message).to.equal(\"You must supply a group id.\");",
                  "err": {},
                  "uuid": "591b3b61-1968-4ce3-8cc7-9c4ab3dde03f",
                  "parentUUID": "a72fe61c-d60a-459e-b912-dc7cdace8938",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can add a new product",
                  "fullTitle": "SHOPPINGLIST SERVICE #add-product-to-shopping-list can add a new product",
                  "timedOut": false,
                  "duration": 26,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const fakeShoppingList = (0, _fakeShoppingList.default)(CODE_BARRE, 4);\nconst addProduct = await _services.shoppingListService.putProductInShoppingList({\n  groupId: insertedGroup.dataValues.groupId,\n  userId: insertedUser.userId,\n  ...fakeShoppingList\n});\n(0, _chai.expect)(Number(addProduct.code)).to.equal(fakeShoppingList.code);\nawait _services.shoppingListService.removeProductFromShoppingList({\n  itemId: addProduct.id,\n  userId: insertedUser.userId\n});",
                  "err": {},
                  "uuid": "59464858-97b1-4fc1-9e22-d2a6f360fed4",
                  "parentUUID": "a72fe61c-d60a-459e-b912-dc7cdace8938",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "cannot add an inexisting product",
                  "fullTitle": "SHOPPINGLIST SERVICE #add-product-to-shopping-list cannot add an inexisting product",
                  "timedOut": false,
                  "duration": 23,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const fakeShoppingList = (0, _fakeShoppingList.default)(1111111111100, 4);\nconst addProduct = await _services.shoppingListService.putProductInShoppingList({\n  groupId: insertedGroup.dataValues.groupId,\n  userId: insertedUser.userId,\n  ...fakeShoppingList\n});\n(0, _chai.expect)(addProduct.message).to.equal(`No product was found with this code ${fakeShoppingList.code}`);",
                  "err": {},
                  "uuid": "9fdbfc6d-9411-4848-bfe6-f9a77fc3f125",
                  "parentUUID": "a72fe61c-d60a-459e-b912-dc7cdace8938",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "cannot add twice a product for a single user",
                  "fullTitle": "SHOPPINGLIST SERVICE #add-product-to-shopping-list cannot add twice a product for a single user",
                  "timedOut": false,
                  "duration": 31,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const fakeShoppingList = (0, _fakeShoppingList.default)(CODE_BARRE, 4);\nconst addProduct = await _services.shoppingListService.putProductInShoppingList({\n  groupId: insertedGroup.dataValues.groupId,\n  userId: insertedUser.userId,\n  ...fakeShoppingList\n});\nconst newAddProduct = await _services.shoppingListService.putProductInShoppingList({\n  groupId: insertedGroup.dataValues.groupId,\n  userId: insertedUser.userId,\n  ...fakeShoppingList\n});\n(0, _chai.expect)(newAddProduct.statusCode).to.equal(409);\nawait _services.shoppingListService.removeProductFromShoppingList({\n  itemId: addProduct.id,\n  userId: insertedUser.userId\n});",
                  "err": {},
                  "uuid": "5ccd2eed-2662-444c-befb-a30d72f89c22",
                  "parentUUID": "a72fe61c-d60a-459e-b912-dc7cdace8938",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "591b3b61-1968-4ce3-8cc7-9c4ab3dde03f",
                "59464858-97b1-4fc1-9e22-d2a6f360fed4",
                "9fdbfc6d-9411-4848-bfe6-f9a77fc3f125",
                "5ccd2eed-2662-444c-befb-a30d72f89c22"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 81,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "05a9d98e-c2ac-493b-bff3-19708b235adb",
              "title": "#remove-product-to-shopping-list",
              "fullFile": "C:\\Users\\morga\\Documents\\web\\server-side\\tests\\unit-tests\\services\\shoppingList-service.js",
              "file": "\\server-side\\tests\\unit-tests\\services\\shoppingList-service.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "itemId must include in parameters",
                  "fullTitle": "SHOPPINGLIST SERVICE #remove-product-to-shopping-list itemId must include in parameters",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const removedProduct = await _services.shoppingListService.removeProductFromShoppingList({\n  itemId: undefined,\n  userId: ''\n});\n(0, _chai.expect)(removedProduct.message).to.equal('You must supply the item id.');",
                  "err": {},
                  "uuid": "7e6222c2-23fb-4879-b96c-49562b4711fa",
                  "parentUUID": "05a9d98e-c2ac-493b-bff3-19708b235adb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can remove an existing product",
                  "fullTitle": "SHOPPINGLIST SERVICE #remove-product-to-shopping-list can remove an existing product",
                  "timedOut": false,
                  "duration": 20,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const fakeShoppingList = (0, _fakeShoppingList.default)(CODE_BARRE, 4);\nconst addProduct = await _services.shoppingListService.putProductInShoppingList({\n  groupId: insertedGroup.dataValues.groupId,\n  userId: insertedUser.userId,\n  ...fakeShoppingList\n});\nconst removeProduct = await _services.shoppingListService.removeProductFromShoppingList({\n  itemId: addProduct.id,\n  userId: insertedUser.userId\n});\n(0, _chai.expect)(removeProduct).to.equal(1);",
                  "err": {},
                  "uuid": "7b220fd3-51e3-49bf-9eeb-bef3428a597e",
                  "parentUUID": "05a9d98e-c2ac-493b-bff3-19708b235adb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "cannot remove an inexisting product",
                  "fullTitle": "SHOPPINGLIST SERVICE #remove-product-to-shopping-list cannot remove an inexisting product",
                  "timedOut": false,
                  "duration": 22,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const fakeShoppingList = (0, _fakeShoppingList.default)(CODE_BARRE, 4);\nconst addProduct = await _services.shoppingListService.putProductInShoppingList({\n  groupId: insertedGroup.dataValues.groupId,\n  userId: insertedUser.userId,\n  ...fakeShoppingList\n});\nawait _services.shoppingListService.removeProductFromShoppingList({\n  itemId: addProduct.id,\n  userId: insertedUser.userId\n});\nconst newRemoveProduct = await _services.shoppingListService.removeProductFromShoppingList({\n  itemId: addProduct.id,\n  userId: insertedUser.userId\n});\n(0, _chai.expect)(newRemoveProduct.message).to.equal(`No item with this id '${addProduct.id}' was found in the shopping list !`);",
                  "err": {},
                  "uuid": "d091b3fa-2fdf-4f62-a5ca-ddd23c5646c7",
                  "parentUUID": "05a9d98e-c2ac-493b-bff3-19708b235adb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7e6222c2-23fb-4879-b96c-49562b4711fa",
                "7b220fd3-51e3-49bf-9eeb-bef3428a597e",
                "d091b3fa-2fdf-4f62-a5ca-ddd23c5646c7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 42,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "7dd56a1f-d0ba-4b6c-8203-ae64e3b981ac",
          "title": "USER SERVICE",
          "fullFile": "C:\\Users\\morga\\Documents\\web\\server-side\\tests\\unit-tests\\services\\user-service.js",
          "file": "\\server-side\\tests\\unit-tests\\services\\user-service.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "9edc5d47-f790-4b0a-bcd9-239e957a4b40",
              "title": "#register-user",
              "fullFile": "C:\\Users\\morga\\Documents\\web\\server-side\\tests\\unit-tests\\services\\user-service.js",
              "file": "\\server-side\\tests\\unit-tests\\services\\user-service.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "inserts a user in the database",
                  "fullTitle": "USER SERVICE #register-user inserts a user in the database",
                  "timedOut": false,
                  "duration": 89,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { ...fakeUser\n} = (0, _fakeUser.default)();\nconst inserted = await _services.userService.addUser({ ...fakeUser\n});\nfakeUser.password = inserted.password;\nfakeUser.userId = inserted.userId;\n(0, _chai.expect)(inserted).to.deep.include(fakeUser);\nawait _services.userService.removeUser({\n  userId: inserted.userId\n});",
                  "err": {},
                  "uuid": "83409850-3395-4222-b394-48c5dfc04929",
                  "parentUUID": "9edc5d47-f790-4b0a-bcd9-239e957a4b40",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can't register a user if he/she already exists",
                  "fullTitle": "USER SERVICE #register-user can't register a user if he/she already exists",
                  "timedOut": false,
                  "duration": 84,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { ...fakeUser\n} = (0, _fakeUser.default)();\nconst firstUser = await _services.userService.addUser({ ...fakeUser\n});\nconst secondtUser = await _services.userService.addUser({ ...fakeUser\n});\n(0, _chai.expect)(secondtUser.message).to.equal(\"A user with the same username or email already exists !\");\nawait _services.userService.removeUser({\n  userId: firstUser.userId\n});",
                  "err": {},
                  "uuid": "50d08bc6-66a8-4ce6-b4b3-71d268368856",
                  "parentUUID": "9edc5d47-f790-4b0a-bcd9-239e957a4b40",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "83409850-3395-4222-b394-48c5dfc04929",
                "50d08bc6-66a8-4ce6-b4b3-71d268368856"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 173,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "bc3b62f4-b320-42cc-ba18-d4bc05354487",
              "title": "#login-user",
              "fullFile": "C:\\Users\\morga\\Documents\\web\\server-side\\tests\\unit-tests\\services\\user-service.js",
              "file": "\\server-side\\tests\\unit-tests\\services\\user-service.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "can authenticate a user",
                  "fullTitle": "USER SERVICE #login-user can authenticate a user",
                  "timedOut": false,
                  "duration": 168,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { ...fakeUser\n} = (0, _fakeUser.default)();\nconst createdUser = await _services.userService.addUser({ ...fakeUser\n});\nconst loggedInUser = await _services.userService.logInUser({\n  pseudo: fakeUser.username,\n  password: fakeUser.password\n});\n(0, _chai.expect)(loggedInUser).to.have.property('token');\n(0, _chai.expect)(loggedInUser.data.username).to.equal(fakeUser.username);\nawait _services.userService.removeUser({\n  userId: createdUser.userId\n});",
                  "err": {},
                  "uuid": "fcf46515-4225-4cc9-911a-ea7924b44861",
                  "parentUUID": "bc3b62f4-b320-42cc-ba18-d4bc05354487",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "must include an pseudo",
                  "fullTitle": "USER SERVICE #login-user must include an pseudo",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const loggedInUser = await _services.userService.logInUser({\n  pseudo: undefined,\n  password: \"123\"\n});\n(0, _chai.expect)(loggedInUser.message).to.equal(\"You must supply a pseudo.\");",
                  "err": {},
                  "uuid": "c6c1e7c4-79d5-4d04-8687-602d871f6c07",
                  "parentUUID": "bc3b62f4-b320-42cc-ba18-d4bc05354487",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "must include an password",
                  "fullTitle": "USER SERVICE #login-user must include an password",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const loggedInUser = await _services.userService.logInUser({\n  pseudo: \"12345\",\n  password: undefined\n});\n(0, _chai.expect)(loggedInUser.message).to.equal(\"You must supply a password.\");",
                  "err": {},
                  "uuid": "5075d471-190c-477a-8d37-3785efec02e4",
                  "parentUUID": "bc3b62f4-b320-42cc-ba18-d4bc05354487",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can't authenticate unregistered user",
                  "fullTitle": "USER SERVICE #login-user can't authenticate unregistered user",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const loggedInUser = await _services.userService.logInUser({\n  pseudo: '*******',\n  password: '*******'\n});\n(0, _chai.expect)(loggedInUser.message).to.equal(\"Authentication failed !\");",
                  "err": {},
                  "uuid": "32876c9a-07c3-4e24-8a9c-a9a7a5f597a5",
                  "parentUUID": "bc3b62f4-b320-42cc-ba18-d4bc05354487",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can't authenticate a user with a wrong password user",
                  "fullTitle": "USER SERVICE #login-user can't authenticate a user with a wrong password user",
                  "timedOut": false,
                  "duration": 165,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { ...fakeUser\n} = (0, _fakeUser.default)();\nconst createdUser = await _services.userService.addUser({ ...fakeUser\n});\nconst loggedInUser = await _services.userService.logInUser({\n  pseudo: fakeUser.username,\n  password: '*******'\n});\n(0, _chai.expect)(loggedInUser.message).to.equal(\"Authentication failed !\");\nawait _services.userService.removeUser({\n  userId: createdUser.userId\n});",
                  "err": {},
                  "uuid": "3748ccf6-5fb5-4919-b8fc-a3fe9330bf03",
                  "parentUUID": "bc3b62f4-b320-42cc-ba18-d4bc05354487",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fcf46515-4225-4cc9-911a-ea7924b44861",
                "c6c1e7c4-79d5-4d04-8687-602d871f6c07",
                "5075d471-190c-477a-8d37-3785efec02e4",
                "32876c9a-07c3-4e24-8a9c-a9a7a5f597a5",
                "3748ccf6-5fb5-4919-b8fc-a3fe9330bf03"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 334,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "4aec4419-9904-4fc1-8252-3169da6df0f0",
              "title": "#list-one-user",
              "fullFile": "C:\\Users\\morga\\Documents\\web\\server-side\\tests\\unit-tests\\services\\user-service.js",
              "file": "\\server-side\\tests\\unit-tests\\services\\user-service.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "find user by id",
                  "fullTitle": "USER SERVICE #list-one-user find user by id",
                  "timedOut": false,
                  "duration": 87,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { ...fakeUser\n} = (0, _fakeUser.default)();\nconst inserted = await _services.userService.addUser({ ...fakeUser\n});\nfakeUser.userId = inserted.userId;\nconst listedOneUser = await _services.userService.listOneUser({\n  id: fakeUser.userId\n});\n(0, _chai.expect)(listedOneUser.dataValues.username).to.equal(fakeUser.username);\n(0, _chai.expect)(listedOneUser.dataValues.firstName).to.equal(fakeUser.firstName);\n(0, _chai.expect)(listedOneUser.dataValues.lastName).to.equal(fakeUser.lastName);\n(0, _chai.expect)(listedOneUser.dataValues.email).to.equal(fakeUser.email);\nawait _services.userService.removeUser({\n  userId: inserted.userId\n});",
                  "err": {},
                  "uuid": "05fd1ed9-cf2a-4f80-a87b-3f2356b47bc0",
                  "parentUUID": "4aec4419-9904-4fc1-8252-3169da6df0f0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "05fd1ed9-cf2a-4f80-a87b-3f2356b47bc0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 87,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "0e551193-2964-41c5-9703-332fe04b5b5a",
              "title": "#update-one-user",
              "fullFile": "C:\\Users\\morga\\Documents\\web\\server-side\\tests\\unit-tests\\services\\user-service.js",
              "file": "\\server-side\\tests\\unit-tests\\services\\user-service.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "update one user with userId",
                  "fullTitle": "USER SERVICE #update-one-user update one user with userId",
                  "timedOut": false,
                  "duration": 94,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inserted = await _services.userService.addUser({ ...(0, _fakeUser.default)()\n});\nconst updatedInfo = (0, _fakeUser.default)({\n  username: 'test'\n});\nconst updatedUser = await _services.userService.putUser({\n  userId: inserted.userId,\n  ...updatedInfo\n});\n(0, _chai.expect)(updatedUser[1].dataValues.username).to.equal(updatedInfo.username);\nawait _services.userService.removeUser({\n  userId: inserted.userId\n});",
                  "err": {},
                  "uuid": "0538c6f0-5e60-4bb5-86c9-e473233c155a",
                  "parentUUID": "0e551193-2964-41c5-9703-332fe04b5b5a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can not update a user with an existing username or email",
                  "fullTitle": "USER SERVICE #update-one-user can not update a user with an existing username or email",
                  "timedOut": false,
                  "duration": 168,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user1 = await _services.userService.addUser({ ...(0, _fakeUser.default)()\n});\nconst user2 = await _services.userService.addUser({ ...(0, _fakeUser.default)()\n});\nconst updatedInfo = (0, _fakeUser.default)({\n  username: user2.username\n});\nconst updatedUser1 = await _services.userService.putUser({\n  userId: user1.userId,\n  ...updatedInfo\n});\n(0, _chai.expect)(updatedUser1.message).to.equal('A user with the same username already exists !');\nawait _services.userService.removeUser({\n  userId: user1.userId\n});\nawait _services.userService.removeUser({\n  userId: user2.userId\n});",
                  "err": {},
                  "uuid": "3b2d47f3-5cc1-4d75-9faa-e8a3350f6a8b",
                  "parentUUID": "0e551193-2964-41c5-9703-332fe04b5b5a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0538c6f0-5e60-4bb5-86c9-e473233c155a",
                "3b2d47f3-5cc1-4d75-9faa-e8a3350f6a8b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 262,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.1.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "index",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.1.1"
    },
    "marge": {
      "options": {
        "reportDir": "test-reports/unit",
        "reportFilename": "index"
      },
      "version": "5.1.0"
    }
  }
}