{
  "stats": {
    "suites": 26,
    "tests": 53,
    "passes": 53,
    "pending": 0,
    "failures": 0,
    "start": "2020-12-03T19:20:54.854Z",
    "end": "2020-12-03T19:20:56.346Z",
    "duration": 1492,
    "testsRegistered": 53,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "45abc37d-5f6f-4a00-8186-9fade5ef02d3",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "12d381fe-19d3-4d38-bbb3-5cb7261015fd",
          "title": "GROUP ENTITY",
          "fullFile": "/Users/martinmichotte/Documents/EPHEC-Projects-3/Projet_Integration/web/server-side/tests/unit-tests/entities/group.js",
          "file": "/server-side/tests/unit-tests/entities/group.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "383bb304-554c-4002-891b-0521ac3d8d90",
              "title": "#group",
              "fullFile": "/Users/martinmichotte/Documents/EPHEC-Projects-3/Projet_Integration/web/server-side/tests/unit-tests/entities/group.js",
              "file": "/server-side/tests/unit-tests/entities/group.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should make a group",
                  "fullTitle": "GROUP ENTITY #group it should make a group",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const randomGroup = Math.random().toString(36).substr(2, 9);\nconst group = (0, _fakeGroup.default)(randomGroup, randomGroup + randomGroup);\nconst buildGroup = (0, _domain.makeGroup)({ ...group\n});\n(0, _chai.expect)(buildGroup.getGroupName()).to.be.eql(group.groupName);\n(0, _chai.expect)(buildGroup.getGroupDescription()).to.be.eql(group.groupDescription);",
                  "err": {},
                  "uuid": "57e00a3b-5f0e-4909-9823-436ecdc545e0",
                  "parentUUID": "383bb304-554c-4002-891b-0521ac3d8d90",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "57e00a3b-5f0e-4909-9823-436ecdc545e0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "1fe43e89-6504-477b-b6cb-21b45aee8c38",
              "title": "#groupName",
              "fullFile": "/Users/martinmichotte/Documents/EPHEC-Projects-3/Projet_Integration/web/server-side/tests/unit-tests/entities/group.js",
              "file": "/server-side/tests/unit-tests/entities/group.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "a group must have a groupName",
                  "fullTitle": "GROUP ENTITY #groupName a group must have a groupName",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const group = (0, _fakeGroup.default)(undefined, \"test\");\n(0, _chai.expect)(() => (0, _domain.makeGroup)({ ...group\n})).to.throw(_errors.RequiredParameterError, 'A groupName is a required.');",
                  "err": {},
                  "uuid": "3fc22efb-1a0d-4a18-bfd0-800b0232ab8e",
                  "parentUUID": "1fe43e89-6504-477b-b6cb-21b45aee8c38",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "a groupName can't be null",
                  "fullTitle": "GROUP ENTITY #groupName a groupName can't be null",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const group = (0, _fakeGroup.default)(null, \"test\");\n(0, _chai.expect)(() => (0, _domain.makeGroup)({ ...group\n})).to.throw(TypeError, 'A groupName must be a string.');",
                  "err": {},
                  "uuid": "00f309b9-aeb9-4a7f-8e34-7db6e212b890",
                  "parentUUID": "1fe43e89-6504-477b-b6cb-21b45aee8c38",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "a groupName can't be a number",
                  "fullTitle": "GROUP ENTITY #groupName a groupName can't be a number",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const group = (0, _fakeGroup.default)(404, \"test\");\n(0, _chai.expect)(() => (0, _domain.makeGroup)({ ...group\n})).to.throw(TypeError, 'A groupName must be a string.');",
                  "err": {},
                  "uuid": "3e927cc6-c0f7-4d22-9fbb-a6db4d9c3a18",
                  "parentUUID": "1fe43e89-6504-477b-b6cb-21b45aee8c38",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3fc22efb-1a0d-4a18-bfd0-800b0232ab8e",
                "00f309b9-aeb9-4a7f-8e34-7db6e212b890",
                "3e927cc6-c0f7-4d22-9fbb-a6db4d9c3a18"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "030efad5-c775-445f-8f18-824dfe1ba059",
              "title": "#groupDescription",
              "fullFile": "/Users/martinmichotte/Documents/EPHEC-Projects-3/Projet_Integration/web/server-side/tests/unit-tests/entities/group.js",
              "file": "/server-side/tests/unit-tests/entities/group.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "a group must have a groupDescription",
                  "fullTitle": "GROUP ENTITY #groupDescription a group must have a groupDescription",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const group = (0, _fakeGroup.default)(\"test\", undefined);\n(0, _chai.expect)(() => (0, _domain.makeGroup)({ ...group\n})).to.throw(_errors.RequiredParameterError, 'A group description is a required.');",
                  "err": {},
                  "uuid": "bd4b3afa-b2e9-4af9-851b-e545e422f7ce",
                  "parentUUID": "030efad5-c775-445f-8f18-824dfe1ba059",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "a groupDescription can't be null",
                  "fullTitle": "GROUP ENTITY #groupDescription a groupDescription can't be null",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const group = (0, _fakeGroup.default)(\"test\", null);\n(0, _chai.expect)(() => (0, _domain.makeGroup)({ ...group\n})).to.throw(TypeError, 'A group description must be a string.');",
                  "err": {},
                  "uuid": "4395adce-0345-48d4-8560-7fade649839b",
                  "parentUUID": "030efad5-c775-445f-8f18-824dfe1ba059",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "a groupDescription can't be a number",
                  "fullTitle": "GROUP ENTITY #groupDescription a groupDescription can't be a number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const group = (0, _fakeGroup.default)(\"test\", 404);\n(0, _chai.expect)(() => (0, _domain.makeGroup)({ ...group\n})).to.throw(TypeError, 'A group description must be a string.');",
                  "err": {},
                  "uuid": "bf92399b-633f-446e-8204-a7036098682f",
                  "parentUUID": "030efad5-c775-445f-8f18-824dfe1ba059",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bd4b3afa-b2e9-4af9-851b-e545e422f7ce",
                "4395adce-0345-48d4-8560-7fade649839b",
                "bf92399b-633f-446e-8204-a7036098682f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "539a9c43-2826-45d3-bb38-782b24e7b9dc",
          "title": "PRODUCT ENTITY",
          "fullFile": "/Users/martinmichotte/Documents/EPHEC-Projects-3/Projet_Integration/web/server-side/tests/unit-tests/entities/product.js",
          "file": "/server-side/tests/unit-tests/entities/product.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "5cdca7a8-927e-4559-b88c-99667b0e5f5f",
              "title": "#product",
              "fullFile": "/Users/martinmichotte/Documents/EPHEC-Projects-3/Projet_Integration/web/server-side/tests/unit-tests/entities/product.js",
              "file": "/server-side/tests/unit-tests/entities/product.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should make a product",
                  "fullTitle": "PRODUCT ENTITY #product it should make a product",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const product = (0, _fakeProduct.default)(\"jasmin\");\nconst buildProduct = (0, _domain.makeProduct)({ ...product\n});\n(0, _chai.expect)(buildProduct.getProductName()).to.be.eql(product.productName);",
                  "err": {},
                  "uuid": "02244e04-2184-44e9-9e16-097b4da42028",
                  "parentUUID": "5cdca7a8-927e-4559-b88c-99667b0e5f5f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "02244e04-2184-44e9-9e16-097b4da42028"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "eee1557b-ad09-4ec6-b942-76ccc29afa51",
              "title": "#productName",
              "fullFile": "/Users/martinmichotte/Documents/EPHEC-Projects-3/Projet_Integration/web/server-side/tests/unit-tests/entities/product.js",
              "file": "/server-side/tests/unit-tests/entities/product.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "a product must have a productName",
                  "fullTitle": "PRODUCT ENTITY #productName a product must have a productName",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const product = (0, _fakeProduct.default)(undefined);\n(0, _chai.expect)(() => (0, _domain.makeProduct)({ ...product\n})).to.throw(_errors.RequiredParameterError, 'A productName is a required.');",
                  "err": {},
                  "uuid": "a22ed1c8-9b3b-47b3-8afe-5503386ed40b",
                  "parentUUID": "eee1557b-ad09-4ec6-b942-76ccc29afa51",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "a productName can't be null",
                  "fullTitle": "PRODUCT ENTITY #productName a productName can't be null",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const product = (0, _fakeProduct.default)(null);\n(0, _chai.expect)(() => (0, _domain.makeProduct)({ ...product\n})).to.throw(TypeError, 'A product name must be a string.');",
                  "err": {},
                  "uuid": "df9bae9d-317a-4b46-9e26-a929799da735",
                  "parentUUID": "eee1557b-ad09-4ec6-b942-76ccc29afa51",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "a productName can't be a number",
                  "fullTitle": "PRODUCT ENTITY #productName a productName can't be a number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const product = (0, _fakeProduct.default)(404);\n(0, _chai.expect)(() => (0, _domain.makeProduct)({ ...product\n})).to.throw(TypeError, 'A product name must be a string.');",
                  "err": {},
                  "uuid": "2594d141-f5f5-4af2-a9f5-2fb2e1bf6ae9",
                  "parentUUID": "eee1557b-ad09-4ec6-b942-76ccc29afa51",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a22ed1c8-9b3b-47b3-8afe-5503386ed40b",
                "df9bae9d-317a-4b46-9e26-a929799da735",
                "2594d141-f5f5-4af2-a9f5-2fb2e1bf6ae9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "0a42791d-e718-42b4-9107-c216f3a16b7e",
          "title": "SHOPPINGLIST ENTITY",
          "fullFile": "/Users/martinmichotte/Documents/EPHEC-Projects-3/Projet_Integration/web/server-side/tests/unit-tests/entities/shoppingList.js",
          "file": "/server-side/tests/unit-tests/entities/shoppingList.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "a35574be-53ef-497e-8bd6-0b2cd122f0cf",
              "title": "#shoppingList",
              "fullFile": "/Users/martinmichotte/Documents/EPHEC-Projects-3/Projet_Integration/web/server-side/tests/unit-tests/entities/shoppingList.js",
              "file": "/server-side/tests/unit-tests/entities/shoppingList.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should make a shopping list",
                  "fullTitle": "SHOPPINGLIST ENTITY #shoppingList it should make a shopping list",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const shoppingList = (0, _fakeShoppingList.default)(11223344, 4);\nconst buildShoppingList = (0, _domain.makeShoppingList)({ ...shoppingList\n});\n(0, _chai.expect)(buildShoppingList.getProductCode()).to.be.eql(shoppingList.code);\n(0, _chai.expect)(buildShoppingList.getProductQuantity()).to.be.eql(shoppingList.quantity);",
                  "err": {},
                  "uuid": "ab420a89-d20b-40db-a5cf-974f695af7de",
                  "parentUUID": "a35574be-53ef-497e-8bd6-0b2cd122f0cf",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ab420a89-d20b-40db-a5cf-974f695af7de"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "fd91ec9f-5244-434f-a39b-f80830889463",
              "title": "#code",
              "fullFile": "/Users/martinmichotte/Documents/EPHEC-Projects-3/Projet_Integration/web/server-side/tests/unit-tests/entities/shoppingList.js",
              "file": "/server-side/tests/unit-tests/entities/shoppingList.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "a shoppingList must have a code",
                  "fullTitle": "SHOPPINGLIST ENTITY #code a shoppingList must have a code",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const shoppingList = (0, _fakeShoppingList.default)(undefined, 4);\n(0, _chai.expect)(() => (0, _domain.makeShoppingList)({ ...shoppingList\n})).to.throw(_errors.RequiredParameterError, 'A product code is a required.');",
                  "err": {},
                  "uuid": "0d7fd544-ff9f-43eb-802c-b18c4ff03fd1",
                  "parentUUID": "fd91ec9f-5244-434f-a39b-f80830889463",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "a code can't be null",
                  "fullTitle": "SHOPPINGLIST ENTITY #code a code can't be null",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const shoppingList = (0, _fakeShoppingList.default)(null, 4);\n(0, _chai.expect)(() => (0, _domain.makeShoppingList)({ ...shoppingList\n})).to.throw(TypeError, 'A product code must be a number.');",
                  "err": {},
                  "uuid": "f34f8a97-0aa5-48c7-b5a3-74e54b9ca684",
                  "parentUUID": "fd91ec9f-5244-434f-a39b-f80830889463",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "a code can't be a string",
                  "fullTitle": "SHOPPINGLIST ENTITY #code a code can't be a string",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const shoppingList = (0, _fakeShoppingList.default)(\"404\", 4);\n(0, _chai.expect)(() => (0, _domain.makeShoppingList)({ ...shoppingList\n})).to.throw(TypeError, 'A product code must be a number');",
                  "err": {},
                  "uuid": "8b8c131b-5386-4e94-bed2-7110152f1077",
                  "parentUUID": "fd91ec9f-5244-434f-a39b-f80830889463",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0d7fd544-ff9f-43eb-802c-b18c4ff03fd1",
                "f34f8a97-0aa5-48c7-b5a3-74e54b9ca684",
                "8b8c131b-5386-4e94-bed2-7110152f1077"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "c4183e5f-81e2-4691-8627-5cc1af03f860",
              "title": "#quantity",
              "fullFile": "/Users/martinmichotte/Documents/EPHEC-Projects-3/Projet_Integration/web/server-side/tests/unit-tests/entities/shoppingList.js",
              "file": "/server-side/tests/unit-tests/entities/shoppingList.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "a shoppingList must have a quantity",
                  "fullTitle": "SHOPPINGLIST ENTITY #quantity a shoppingList must have a quantity",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const shoppingList = (0, _fakeShoppingList.default)(11223344, undefined);\n(0, _chai.expect)(() => (0, _domain.makeShoppingList)({ ...shoppingList\n})).to.throw(_errors.RequiredParameterError, 'A product quantity is a required.');",
                  "err": {},
                  "uuid": "39876ced-39f1-444b-9309-6bb6ffb3ad30",
                  "parentUUID": "c4183e5f-81e2-4691-8627-5cc1af03f860",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "a quantity can't be null",
                  "fullTitle": "SHOPPINGLIST ENTITY #quantity a quantity can't be null",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const shoppingList = (0, _fakeShoppingList.default)(11223344, null);\n(0, _chai.expect)(() => (0, _domain.makeShoppingList)({ ...shoppingList\n})).to.throw(TypeError, \"A product's quantity must be a number.\");",
                  "err": {},
                  "uuid": "eb6b18c2-bff3-4fa3-ac7c-d677ef48e044",
                  "parentUUID": "c4183e5f-81e2-4691-8627-5cc1af03f860",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "a quantity can't be a string",
                  "fullTitle": "SHOPPINGLIST ENTITY #quantity a quantity can't be a string",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const shoppingList = (0, _fakeShoppingList.default)(11223344, \"404\");\n(0, _chai.expect)(() => (0, _domain.makeShoppingList)({ ...shoppingList\n})).to.throw(TypeError, \"A product's quantity must be a number.\");",
                  "err": {},
                  "uuid": "a9eb3c33-b418-411c-93e5-8544ac36f01a",
                  "parentUUID": "c4183e5f-81e2-4691-8627-5cc1af03f860",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "a quantity can't be to big",
                  "fullTitle": "SHOPPINGLIST ENTITY #quantity a quantity can't be to big",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const shoppingList = (0, _fakeShoppingList.default)(11223344, 22);\n(0, _chai.expect)(() => (0, _domain.makeShoppingList)({ ...shoppingList\n})).to.throw(RangeError, \"A product's quantity must be between 1 and 20.\");",
                  "err": {},
                  "uuid": "5349f634-8ba8-46b1-92c1-87517ad787ac",
                  "parentUUID": "c4183e5f-81e2-4691-8627-5cc1af03f860",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "a quantity can't be small than 1",
                  "fullTitle": "SHOPPINGLIST ENTITY #quantity a quantity can't be small than 1",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const shoppingList = (0, _fakeShoppingList.default)(11223344, 0);\n(0, _chai.expect)(() => (0, _domain.makeShoppingList)({ ...shoppingList\n})).to.throw(RangeError, \"A product's quantity must be between 1 and 20.\");",
                  "err": {},
                  "uuid": "4a33b49c-741d-4008-8c80-d608bd2eb019",
                  "parentUUID": "c4183e5f-81e2-4691-8627-5cc1af03f860",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "39876ced-39f1-444b-9309-6bb6ffb3ad30",
                "eb6b18c2-bff3-4fa3-ac7c-d677ef48e044",
                "a9eb3c33-b418-411c-93e5-8544ac36f01a",
                "5349f634-8ba8-46b1-92c1-87517ad787ac",
                "4a33b49c-741d-4008-8c80-d608bd2eb019"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "f841c7b5-de0f-4ce4-8b17-5613860b58cb",
          "title": "USER ENTITY",
          "fullFile": "/Users/martinmichotte/Documents/EPHEC-Projects-3/Projet_Integration/web/server-side/tests/unit-tests/entities/user.js",
          "file": "/server-side/tests/unit-tests/entities/user.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "7bbb34e3-cf46-4468-8b84-afe876c721db",
              "title": "#user",
              "fullFile": "/Users/martinmichotte/Documents/EPHEC-Projects-3/Projet_Integration/web/server-side/tests/unit-tests/entities/user.js",
              "file": "/server-side/tests/unit-tests/entities/user.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should make a user",
                  "fullTitle": "USER ENTITY #user it should make a user",
                  "timedOut": false,
                  "duration": 97,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = (0, _fakeUser.default)();\nconst buildUser = (0, _domain.makeUser)({ ...user\n});\n(0, _chai.expect)(buildUser.getFirstName()).to.be.eql(user.firstName);\n(0, _chai.expect)(buildUser.getLastName()).to.be.eql(user.lastName);\n(0, _chai.expect)(buildUser.getUsername()).to.be.eql(user.username);\n(0, _chai.expect)(buildUser.getEmail()).to.be.eql(user.email);\n(0, _chai.expect)(buildUser.getPassword()).not.to.be.eql(user.password);",
                  "err": {},
                  "uuid": "f8e2c013-9b83-47b0-9cdf-f4576e9d1d72",
                  "parentUUID": "7bbb34e3-cf46-4468-8b84-afe876c721db",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f8e2c013-9b83-47b0-9cdf-f4576e9d1d72"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 97,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "03378761-df91-481d-8dd2-69935b078bf4",
              "title": "#username",
              "fullFile": "/Users/martinmichotte/Documents/EPHEC-Projects-3/Projet_Integration/web/server-side/tests/unit-tests/entities/user.js",
              "file": "/server-side/tests/unit-tests/entities/user.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "a user must have a username",
                  "fullTitle": "USER ENTITY #username a user must have a username",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = (0, _fakeUser.default)({\n  username: undefined\n});\n(0, _chai.expect)(() => (0, _domain.makeUser)({ ...user\n})).to.throw(_errors.RequiredParameterError, 'A username is a required.');",
                  "err": {},
                  "uuid": "c57639e6-e790-41a3-8847-d04223de5612",
                  "parentUUID": "03378761-df91-481d-8dd2-69935b078bf4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "a username can't be null",
                  "fullTitle": "USER ENTITY #username a username can't be null",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = (0, _fakeUser.default)({\n  username: null\n});\n(0, _chai.expect)(() => (0, _domain.makeUser)({ ...user\n})).to.throw(TypeError, 'A username must be a string.');",
                  "err": {},
                  "uuid": "f96f25b7-5cc5-4bec-8b38-8dbec028a6cd",
                  "parentUUID": "03378761-df91-481d-8dd2-69935b078bf4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "a username can't be a number",
                  "fullTitle": "USER ENTITY #username a username can't be a number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = (0, _fakeUser.default)({\n  username: 123\n});\n(0, _chai.expect)(() => (0, _domain.makeUser)({ ...user\n})).to.throw(TypeError, 'A username must be a string.');",
                  "err": {},
                  "uuid": "c42e4050-6df8-4734-85e2-fb877093d90d",
                  "parentUUID": "03378761-df91-481d-8dd2-69935b078bf4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "a username max length must be 32",
                  "fullTitle": "USER ENTITY #username a username max length must be 32",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = (0, _fakeUser.default)({\n  username: \"abc\".repeat(35)\n});\n(0, _chai.expect)(() => (0, _domain.makeUser)({ ...user\n})).to.throw(RangeError, 'A username length must be between 4 and 32.');",
                  "err": {},
                  "uuid": "4d23f7c7-5194-4c7b-aec4-fa86aba7c315",
                  "parentUUID": "03378761-df91-481d-8dd2-69935b078bf4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "a username min length must be 4",
                  "fullTitle": "USER ENTITY #username a username min length must be 4",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = (0, _fakeUser.default)({\n  username: \"ab\"\n});\n(0, _chai.expect)(() => (0, _domain.makeUser)({ ...user\n})).to.throw(RangeError, 'A username length must be between 4 and 32.');",
                  "err": {},
                  "uuid": "af39202e-63a8-4a96-a143-d4eaddbf9bf3",
                  "parentUUID": "03378761-df91-481d-8dd2-69935b078bf4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c57639e6-e790-41a3-8847-d04223de5612",
                "f96f25b7-5cc5-4bec-8b38-8dbec028a6cd",
                "c42e4050-6df8-4734-85e2-fb877093d90d",
                "4d23f7c7-5194-4c7b-aec4-fa86aba7c315",
                "af39202e-63a8-4a96-a143-d4eaddbf9bf3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "3700450b-a3ab-4a37-ae1a-58a4bae6c4c9",
              "title": "#email",
              "fullFile": "/Users/martinmichotte/Documents/EPHEC-Projects-3/Projet_Integration/web/server-side/tests/unit-tests/entities/user.js",
              "file": "/server-side/tests/unit-tests/entities/user.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "a user must have an email",
                  "fullTitle": "USER ENTITY #email a user must have an email",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = (0, _fakeUser.default)({\n  email: undefined\n});\n(0, _chai.expect)(() => (0, _domain.makeUser)({ ...user\n})).to.throw(_errors.RequiredParameterError, 'An email is a required.');",
                  "err": {},
                  "uuid": "eb49a017-c750-4ef4-9e91-f74393b09304",
                  "parentUUID": "3700450b-a3ab-4a37-ae1a-58a4bae6c4c9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "an email must be a valid email",
                  "fullTitle": "USER ENTITY #email an email must be a valid email",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = (0, _fakeUser.default)({\n  email: \"dangamil.com\"\n});\n(0, _chai.expect)(() => (0, _domain.makeUser)({ ...user\n})).to.throw(SyntaxError, 'Invalid email.');",
                  "err": {},
                  "uuid": "395947bf-3df1-4fa5-ab08-28a11c72b4f9",
                  "parentUUID": "3700450b-a3ab-4a37-ae1a-58a4bae6c4c9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "an email can't be null",
                  "fullTitle": "USER ENTITY #email an email can't be null",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = (0, _fakeUser.default)({\n  email: null\n});\n(0, _chai.expect)(() => (0, _domain.makeUser)({ ...user\n})).to.throw(SyntaxError, 'An email must be of type string.');",
                  "err": {},
                  "uuid": "99ed0ca9-9eb5-4a9b-86a7-7331483ee9be",
                  "parentUUID": "3700450b-a3ab-4a37-ae1a-58a4bae6c4c9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "an email can't be a number",
                  "fullTitle": "USER ENTITY #email an email can't be a number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = (0, _fakeUser.default)({\n  email: 123\n});\n(0, _chai.expect)(() => (0, _domain.makeUser)({ ...user\n})).to.throw(SyntaxError, 'An email must be of type string.');",
                  "err": {},
                  "uuid": "8a66bf03-fd94-4b67-adb1-7b9fbc9e009e",
                  "parentUUID": "3700450b-a3ab-4a37-ae1a-58a4bae6c4c9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "eb49a017-c750-4ef4-9e91-f74393b09304",
                "395947bf-3df1-4fa5-ab08-28a11c72b4f9",
                "99ed0ca9-9eb5-4a9b-86a7-7331483ee9be",
                "8a66bf03-fd94-4b67-adb1-7b9fbc9e009e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "39d96194-d03f-4ee1-b439-d4ee56b1f132",
              "title": "#password",
              "fullFile": "/Users/martinmichotte/Documents/EPHEC-Projects-3/Projet_Integration/web/server-side/tests/unit-tests/entities/user.js",
              "file": "/server-side/tests/unit-tests/entities/user.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "a user must a have password",
                  "fullTitle": "USER ENTITY #password a user must a have password",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = (0, _fakeUser.default)({\n  password: undefined\n});\n(0, _chai.expect)(() => (0, _domain.makeUser)({ ...user\n})).to.throw(_errors.RequiredParameterError, 'A password is a required.');",
                  "err": {},
                  "uuid": "9371ef74-e65b-4f51-8d43-426e730c6d9a",
                  "parentUUID": "39d96194-d03f-4ee1-b439-d4ee56b1f132",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can hash password",
                  "fullTitle": "USER ENTITY #password can hash password",
                  "timedOut": false,
                  "duration": 87,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = (0, _fakeUser.default)();\nconst password = (0, _domain.makeUser)({ ...user\n}).getPassword();\n(0, _chai.expect)(password.match(/^\\$2[aby]?\\$\\d{1,2}\\$[.\\/A-Za-z0-9]{53}$/)).to.not.be.null;",
                  "err": {},
                  "uuid": "40b76c53-0292-495b-8fbc-71e4e1510e68",
                  "parentUUID": "39d96194-d03f-4ee1-b439-d4ee56b1f132",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "a password can't be a null",
                  "fullTitle": "USER ENTITY #password a password can't be a null",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = (0, _fakeUser.default)({\n  password: null\n});\n(0, _chai.expect)(() => (0, _domain.makeUser)({ ...user\n})).to.throw(TypeError, 'The password must be of type string.');",
                  "err": {},
                  "uuid": "ba116063-5ae7-49b8-870d-11fb41b62b0e",
                  "parentUUID": "39d96194-d03f-4ee1-b439-d4ee56b1f132",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "a password can't be a number",
                  "fullTitle": "USER ENTITY #password a password can't be a number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = (0, _fakeUser.default)({\n  password: 123\n});\n(0, _chai.expect)(() => (0, _domain.makeUser)({ ...user\n})).to.throw(TypeError, 'The password must be of type string.');",
                  "err": {},
                  "uuid": "b133e567-8e85-40ad-8ddb-dd008d3e718a",
                  "parentUUID": "39d96194-d03f-4ee1-b439-d4ee56b1f132",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9371ef74-e65b-4f51-8d43-426e730c6d9a",
                "40b76c53-0292-495b-8fbc-71e4e1510e68",
                "ba116063-5ae7-49b8-870d-11fb41b62b0e",
                "b133e567-8e85-40ad-8ddb-dd008d3e718a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 87,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "4b8ea573-fcfb-4c28-8829-cc0e7d78395c",
          "title": "SHOPPINGLIST SERVICE",
          "fullFile": "/Users/martinmichotte/Documents/EPHEC-Projects-3/Projet_Integration/web/server-side/tests/unit-tests/services/shoppingList-service.js",
          "file": "/server-side/tests/unit-tests/services/shoppingList-service.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "SHOPPINGLIST SERVICE \"before all\" hook",
              "timedOut": false,
              "duration": 172,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { ...fakeUser\n} = (0, _fakeUser.default)();\nconst { ...fakeGroup\n} = (0, _fakeGroup.default)(\"testoss\", \"testoss\");\ninsertedUser = await _services.userService.addUser({ ...fakeUser\n});\ninsertedGroup = await _services.groupService.addGroup({\n  username: insertedUser.username,\n  ...fakeGroup\n});\ninsertedUserGroup = await _services.groupService.addMembersToGroup({\n  groupId: insertedGroup.dataValues.groupId,\n  username: insertedUser.username\n});",
              "err": {},
              "uuid": "97a0f0e1-70fd-43ad-808a-94a313b4a4cf",
              "parentUUID": "4b8ea573-fcfb-4c28-8829-cc0e7d78395c",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "SHOPPINGLIST SERVICE \"after all\" hook",
              "timedOut": false,
              "duration": 11,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await _services.groupService.deleteUserFromGroup({\n  groupId: insertedGroup.dataValues.groupId,\n  userId: insertedUser.userId\n});\nawait _services.groupService.deleteGroup({\n  groupId: insertedGroup.dataValues.groupId\n});\nawait _services.userService.removeUser({\n  userId: insertedUser.userId\n});",
              "err": {},
              "uuid": "58aebcfe-d3b9-4488-8f7d-fb58ee96b506",
              "parentUUID": "4b8ea573-fcfb-4c28-8829-cc0e7d78395c",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "2c3d11d2-2e75-4f6c-91d2-6e4d1fe7062b",
              "title": "#get-shopping-list",
              "fullFile": "/Users/martinmichotte/Documents/EPHEC-Projects-3/Projet_Integration/web/server-side/tests/unit-tests/services/shoppingList-service.js",
              "file": "/server-side/tests/unit-tests/services/shoppingList-service.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "not created",
                  "fullTitle": "SHOPPINGLIST SERVICE #get-shopping-list not created",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "ade45f0e-19ce-460e-8b19-8f7428e55fc8",
                  "parentUUID": "2c3d11d2-2e75-4f6c-91d2-6e4d1fe7062b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ade45f0e-19ce-460e-8b19-8f7428e55fc8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "903dd125-a59e-4780-9414-a394321fb478",
              "title": "#get-group-shopping-list",
              "fullFile": "/Users/martinmichotte/Documents/EPHEC-Projects-3/Projet_Integration/web/server-side/tests/unit-tests/services/shoppingList-service.js",
              "file": "/server-side/tests/unit-tests/services/shoppingList-service.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "not created",
                  "fullTitle": "SHOPPINGLIST SERVICE #get-group-shopping-list not created",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "da78e028-c173-47b8-8e61-6d67a2da8f31",
                  "parentUUID": "903dd125-a59e-4780-9414-a394321fb478",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "da78e028-c173-47b8-8e61-6d67a2da8f31"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "f2590415-7494-4f7e-af9d-ee8ce20da06d",
              "title": "#add-product-to-shopping-list",
              "fullFile": "/Users/martinmichotte/Documents/EPHEC-Projects-3/Projet_Integration/web/server-side/tests/unit-tests/services/shoppingList-service.js",
              "file": "/server-side/tests/unit-tests/services/shoppingList-service.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "url must include a groupId",
                  "fullTitle": "SHOPPINGLIST SERVICE #add-product-to-shopping-list url must include a groupId",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const addProduct = await _services.shoppingListService.putProductInShoppingList({});\n(0, _chai.expect)(addProduct.message).to.equal(\"You must supply a group id.\");",
                  "err": {},
                  "uuid": "dd7e86f7-86f1-436f-9d4d-3eb96ee31c4a",
                  "parentUUID": "f2590415-7494-4f7e-af9d-ee8ce20da06d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can add a new product",
                  "fullTitle": "SHOPPINGLIST SERVICE #add-product-to-shopping-list can add a new product",
                  "timedOut": false,
                  "duration": 41,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const fakeShoppingList = (0, _fakeShoppingList.default)(CODE_BARRE, 4);\nconst addProduct = await _services.shoppingListService.putProductInShoppingList({\n  groupId: insertedGroup.dataValues.groupId,\n  userId: insertedUser.userId,\n  ...fakeShoppingList\n});\n(0, _chai.expect)(Number(addProduct.code)).to.equal(fakeShoppingList.code);\nawait _services.shoppingListService.removeProductFromShoppingList({\n  itemId: addProduct.id,\n  userId: insertedUser.userId\n});",
                  "err": {},
                  "uuid": "fe143857-67c0-4e71-9693-7e730c126af4",
                  "parentUUID": "f2590415-7494-4f7e-af9d-ee8ce20da06d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "cannot add an inexisting product",
                  "fullTitle": "SHOPPINGLIST SERVICE #add-product-to-shopping-list cannot add an inexisting product",
                  "timedOut": false,
                  "duration": 15,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const fakeShoppingList = (0, _fakeShoppingList.default)(1111111111100, 4);\nconst addProduct = await _services.shoppingListService.putProductInShoppingList({\n  groupId: insertedGroup.dataValues.groupId,\n  userId: insertedUser.userId,\n  ...fakeShoppingList\n});\n(0, _chai.expect)(addProduct.message).to.equal(`No product was found with this code ${fakeShoppingList.code}`);",
                  "err": {},
                  "uuid": "47a99196-c66a-4080-a291-6ef981937d3b",
                  "parentUUID": "f2590415-7494-4f7e-af9d-ee8ce20da06d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "cannot add twice a product for a single user",
                  "fullTitle": "SHOPPINGLIST SERVICE #add-product-to-shopping-list cannot add twice a product for a single user",
                  "timedOut": false,
                  "duration": 50,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const fakeShoppingList = (0, _fakeShoppingList.default)(CODE_BARRE, 4);\nconst addProduct = await _services.shoppingListService.putProductInShoppingList({\n  groupId: insertedGroup.dataValues.groupId,\n  userId: insertedUser.userId,\n  ...fakeShoppingList\n});\nconst newAddProduct = await _services.shoppingListService.putProductInShoppingList({\n  groupId: insertedGroup.dataValues.groupId,\n  userId: insertedUser.userId,\n  ...fakeShoppingList\n});\n(0, _chai.expect)(newAddProduct.statusCode).to.equal(409);\nawait _services.shoppingListService.removeProductFromShoppingList({\n  itemId: addProduct.id,\n  userId: insertedUser.userId\n});",
                  "err": {},
                  "uuid": "78ed06f8-01d2-425f-a577-167ca93b1e14",
                  "parentUUID": "f2590415-7494-4f7e-af9d-ee8ce20da06d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "dd7e86f7-86f1-436f-9d4d-3eb96ee31c4a",
                "fe143857-67c0-4e71-9693-7e730c126af4",
                "47a99196-c66a-4080-a291-6ef981937d3b",
                "78ed06f8-01d2-425f-a577-167ca93b1e14"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 107,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "1472ffc7-5592-49f2-8b22-7df8d0cbc9cd",
              "title": "#remove-product-to-shopping-list",
              "fullFile": "/Users/martinmichotte/Documents/EPHEC-Projects-3/Projet_Integration/web/server-side/tests/unit-tests/services/shoppingList-service.js",
              "file": "/server-side/tests/unit-tests/services/shoppingList-service.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "itemId must include in parameters",
                  "fullTitle": "SHOPPINGLIST SERVICE #remove-product-to-shopping-list itemId must include in parameters",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const removedProduct = await _services.shoppingListService.removeProductFromShoppingList({\n  itemId: undefined,\n  userId: ''\n});\n(0, _chai.expect)(removedProduct.message).to.equal('You must supply the item id.');",
                  "err": {},
                  "uuid": "918827e1-6c21-4ae4-ac6e-dd1d7a38326b",
                  "parentUUID": "1472ffc7-5592-49f2-8b22-7df8d0cbc9cd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can remove an existing product",
                  "fullTitle": "SHOPPINGLIST SERVICE #remove-product-to-shopping-list can remove an existing product",
                  "timedOut": false,
                  "duration": 21,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const fakeShoppingList = (0, _fakeShoppingList.default)(CODE_BARRE, 4);\nconst addProduct = await _services.shoppingListService.putProductInShoppingList({\n  groupId: insertedGroup.dataValues.groupId,\n  userId: insertedUser.userId,\n  ...fakeShoppingList\n});\nconst removeProduct = await _services.shoppingListService.removeProductFromShoppingList({\n  itemId: addProduct.id,\n  userId: insertedUser.userId\n});\n(0, _chai.expect)(removeProduct).to.equal(1);",
                  "err": {},
                  "uuid": "9194e3d2-5e54-4e79-93af-7a22890649b2",
                  "parentUUID": "1472ffc7-5592-49f2-8b22-7df8d0cbc9cd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "cannot remove an inexisting product",
                  "fullTitle": "SHOPPINGLIST SERVICE #remove-product-to-shopping-list cannot remove an inexisting product",
                  "timedOut": false,
                  "duration": 31,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const fakeShoppingList = (0, _fakeShoppingList.default)(CODE_BARRE, 4);\nconst addProduct = await _services.shoppingListService.putProductInShoppingList({\n  groupId: insertedGroup.dataValues.groupId,\n  userId: insertedUser.userId,\n  ...fakeShoppingList\n});\nawait _services.shoppingListService.removeProductFromShoppingList({\n  itemId: addProduct.id,\n  userId: insertedUser.userId\n});\nconst newRemoveProduct = await _services.shoppingListService.removeProductFromShoppingList({\n  itemId: addProduct.id,\n  userId: insertedUser.userId\n});\n(0, _chai.expect)(newRemoveProduct.message).to.equal(`No item with this id '${addProduct.id}' was found in the shopping list !`);",
                  "err": {},
                  "uuid": "11556ac1-d41f-4b06-be0f-e3fc35c4f130",
                  "parentUUID": "1472ffc7-5592-49f2-8b22-7df8d0cbc9cd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "918827e1-6c21-4ae4-ac6e-dd1d7a38326b",
                "9194e3d2-5e54-4e79-93af-7a22890649b2",
                "11556ac1-d41f-4b06-be0f-e3fc35c4f130"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 53,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "a838e9b7-6356-481a-ba2a-b2b20e6d6c3d",
          "title": "USER SERVICE",
          "fullFile": "/Users/martinmichotte/Documents/EPHEC-Projects-3/Projet_Integration/web/server-side/tests/unit-tests/services/user-service.js",
          "file": "/server-side/tests/unit-tests/services/user-service.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "f4cde231-6418-453a-a64e-7d7b860181db",
              "title": "#register-user",
              "fullFile": "/Users/martinmichotte/Documents/EPHEC-Projects-3/Projet_Integration/web/server-side/tests/unit-tests/services/user-service.js",
              "file": "/server-side/tests/unit-tests/services/user-service.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "inserts a user in the database",
                  "fullTitle": "USER SERVICE #register-user inserts a user in the database",
                  "timedOut": false,
                  "duration": 93,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { ...fakeUser\n} = (0, _fakeUser.default)();\nconst inserted = await _services.userService.addUser({ ...fakeUser\n});\nfakeUser.password = inserted.password;\nfakeUser.userId = inserted.userId;\n(0, _chai.expect)(inserted).to.deep.include(fakeUser);\nawait _services.userService.removeUser({\n  userId: inserted.userId\n});",
                  "err": {},
                  "uuid": "bc1c4e35-38ac-45f1-a6a9-d0d5d1a04843",
                  "parentUUID": "f4cde231-6418-453a-a64e-7d7b860181db",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can't register a user if he/she already exists",
                  "fullTitle": "USER SERVICE #register-user can't register a user if he/she already exists",
                  "timedOut": false,
                  "duration": 89,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { ...fakeUser\n} = (0, _fakeUser.default)();\nconst firstUser = await _services.userService.addUser({ ...fakeUser\n});\nconst secondtUser = await _services.userService.addUser({ ...fakeUser\n});\n(0, _chai.expect)(secondtUser.message).to.equal(\"A user with the same username or email already exists !\");\nawait _services.userService.removeUser({\n  userId: firstUser.userId\n});",
                  "err": {},
                  "uuid": "d12f2864-83a7-4f06-869f-8998ce365f51",
                  "parentUUID": "f4cde231-6418-453a-a64e-7d7b860181db",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bc1c4e35-38ac-45f1-a6a9-d0d5d1a04843",
                "d12f2864-83a7-4f06-869f-8998ce365f51"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 182,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "dfb7c066-d7a7-4ed6-965f-fec580fc1257",
              "title": "#login-user",
              "fullFile": "/Users/martinmichotte/Documents/EPHEC-Projects-3/Projet_Integration/web/server-side/tests/unit-tests/services/user-service.js",
              "file": "/server-side/tests/unit-tests/services/user-service.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "can authenticate a user",
                  "fullTitle": "USER SERVICE #login-user can authenticate a user",
                  "timedOut": false,
                  "duration": 173,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { ...fakeUser\n} = (0, _fakeUser.default)();\nconst createdUser = await _services.userService.addUser({ ...fakeUser\n});\nconst loggedInUser = await _services.userService.logInUser({\n  pseudo: fakeUser.username,\n  password: fakeUser.password\n});\n(0, _chai.expect)(loggedInUser).to.have.property('token');\n(0, _chai.expect)(loggedInUser.data.username).to.equal(fakeUser.username);\nawait _services.userService.removeUser({\n  userId: createdUser.userId\n});",
                  "err": {},
                  "uuid": "232d99f4-4fe5-4b27-bf5d-1d05e03ac42d",
                  "parentUUID": "dfb7c066-d7a7-4ed6-965f-fec580fc1257",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "must include an pseudo",
                  "fullTitle": "USER SERVICE #login-user must include an pseudo",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const loggedInUser = await _services.userService.logInUser({\n  pseudo: undefined,\n  password: \"123\"\n});\n(0, _chai.expect)(loggedInUser.message).to.equal(\"You must supply a pseudo.\");",
                  "err": {},
                  "uuid": "1616464e-b171-476c-8342-1f1921472a6e",
                  "parentUUID": "dfb7c066-d7a7-4ed6-965f-fec580fc1257",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "must include an password",
                  "fullTitle": "USER SERVICE #login-user must include an password",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const loggedInUser = await _services.userService.logInUser({\n  pseudo: \"12345\",\n  password: undefined\n});\n(0, _chai.expect)(loggedInUser.message).to.equal(\"You must supply a password.\");",
                  "err": {},
                  "uuid": "5015b64a-a76c-47fa-8343-f78542ed863d",
                  "parentUUID": "dfb7c066-d7a7-4ed6-965f-fec580fc1257",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can't authenticate unregistered user",
                  "fullTitle": "USER SERVICE #login-user can't authenticate unregistered user",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const loggedInUser = await _services.userService.logInUser({\n  pseudo: '*******',\n  password: '*******'\n});\n(0, _chai.expect)(loggedInUser.message).to.equal(\"Authentication failed !\");",
                  "err": {},
                  "uuid": "5698a782-4ca6-4f96-9ea3-09c2745117c8",
                  "parentUUID": "dfb7c066-d7a7-4ed6-965f-fec580fc1257",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can't authenticate a user with a wrong password user",
                  "fullTitle": "USER SERVICE #login-user can't authenticate a user with a wrong password user",
                  "timedOut": false,
                  "duration": 176,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { ...fakeUser\n} = (0, _fakeUser.default)();\nconst createdUser = await _services.userService.addUser({ ...fakeUser\n});\nconst loggedInUser = await _services.userService.logInUser({\n  pseudo: fakeUser.username,\n  password: '*******'\n});\n(0, _chai.expect)(loggedInUser.message).to.equal(\"Authentication failed !\");\nawait _services.userService.removeUser({\n  userId: createdUser.userId\n});",
                  "err": {},
                  "uuid": "22b34b14-7a41-4135-ad80-dea737f303db",
                  "parentUUID": "dfb7c066-d7a7-4ed6-965f-fec580fc1257",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "232d99f4-4fe5-4b27-bf5d-1d05e03ac42d",
                "1616464e-b171-476c-8342-1f1921472a6e",
                "5015b64a-a76c-47fa-8343-f78542ed863d",
                "5698a782-4ca6-4f96-9ea3-09c2745117c8",
                "22b34b14-7a41-4135-ad80-dea737f303db"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 350,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "c32d519b-39e9-4d35-b24b-f21b4669ff87",
              "title": "#list-one-user",
              "fullFile": "/Users/martinmichotte/Documents/EPHEC-Projects-3/Projet_Integration/web/server-side/tests/unit-tests/services/user-service.js",
              "file": "/server-side/tests/unit-tests/services/user-service.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "find user by id",
                  "fullTitle": "USER SERVICE #list-one-user find user by id",
                  "timedOut": false,
                  "duration": 89,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { ...fakeUser\n} = (0, _fakeUser.default)();\nconst inserted = await _services.userService.addUser({ ...fakeUser\n});\nfakeUser.userId = inserted.userId;\nconst listedOneUser = await _services.userService.listOneUser({\n  id: fakeUser.userId\n});\n(0, _chai.expect)(listedOneUser.dataValues.username).to.equal(fakeUser.username);\n(0, _chai.expect)(listedOneUser.dataValues.firstName).to.equal(fakeUser.firstName);\n(0, _chai.expect)(listedOneUser.dataValues.lastName).to.equal(fakeUser.lastName);\n(0, _chai.expect)(listedOneUser.dataValues.email).to.equal(fakeUser.email);\nawait _services.userService.removeUser({\n  userId: inserted.userId\n});",
                  "err": {},
                  "uuid": "7d7fb36d-2b00-490c-9b92-99b7b1411d69",
                  "parentUUID": "c32d519b-39e9-4d35-b24b-f21b4669ff87",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7d7fb36d-2b00-490c-9b92-99b7b1411d69"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 89,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "9029a625-2258-45cd-b771-0bcd989a1d49",
              "title": "#update-one-user",
              "fullFile": "/Users/martinmichotte/Documents/EPHEC-Projects-3/Projet_Integration/web/server-side/tests/unit-tests/services/user-service.js",
              "file": "/server-side/tests/unit-tests/services/user-service.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "update one user with userId",
                  "fullTitle": "USER SERVICE #update-one-user update one user with userId",
                  "timedOut": false,
                  "duration": 95,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inserted = await _services.userService.addUser({ ...(0, _fakeUser.default)()\n});\nconst updatedInfo = (0, _fakeUser.default)({\n  username: 'test'\n});\nconst updatedUser = await _services.userService.putUser({\n  userId: inserted.userId,\n  ...updatedInfo\n});\n(0, _chai.expect)(updatedUser[1].dataValues.username).to.equal(updatedInfo.username);\nawait _services.userService.removeUser({\n  userId: inserted.userId\n});",
                  "err": {},
                  "uuid": "d9a34b4b-1cc8-42bb-a756-ff0a466264bb",
                  "parentUUID": "9029a625-2258-45cd-b771-0bcd989a1d49",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can not update a user with an existing username or email",
                  "fullTitle": "USER SERVICE #update-one-user can not update a user with an existing username or email",
                  "timedOut": false,
                  "duration": 174,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user1 = await _services.userService.addUser({ ...(0, _fakeUser.default)()\n});\nconst user2 = await _services.userService.addUser({ ...(0, _fakeUser.default)()\n});\nconst updatedInfo = (0, _fakeUser.default)({\n  username: user2.username\n});\nconst updatedUser1 = await _services.userService.putUser({\n  userId: user1.userId,\n  ...updatedInfo\n});\n(0, _chai.expect)(updatedUser1.message).to.equal('A user with the same username already exists !');\nawait _services.userService.removeUser({\n  userId: user1.userId\n});\nawait _services.userService.removeUser({\n  userId: user2.userId\n});",
                  "err": {},
                  "uuid": "42234ff3-44f7-47a2-9815-97f61ee27bfa",
                  "parentUUID": "9029a625-2258-45cd-b771-0bcd989a1d49",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d9a34b4b-1cc8-42bb-a756-ff0a466264bb",
                "42234ff3-44f7-47a2-9815-97f61ee27bfa"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 269,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.1.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "index",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.1.1"
    },
    "marge": {
      "options": {
        "reportDir": "test-reports/unit",
        "reportFilename": "index"
      },
      "version": "5.1.0"
    }
  }
}