{
  "stats": {
    "suites": 26,
    "tests": 53,
    "passes": 53,
    "pending": 0,
    "failures": 0,
    "start": "2020-12-03T12:13:19.669Z",
    "end": "2020-12-03T12:13:22.483Z",
    "duration": 2814,
    "testsRegistered": 53,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "e2405141-e664-4190-a409-aa7d740d5e30",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "640e7157-d62a-4a59-85fc-64a413954aa7",
          "title": "GROUP ENTITY",
          "fullFile": "/Users/martinmichotte/Documents/EPHEC-Projects-3/Projet_Integration/web/server-side/tests/unit-tests/entities/group.js",
          "file": "/server-side/tests/unit-tests/entities/group.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "d95f41e4-0c38-4e66-886a-9cd9f325ded3",
              "title": "#group",
              "fullFile": "/Users/martinmichotte/Documents/EPHEC-Projects-3/Projet_Integration/web/server-side/tests/unit-tests/entities/group.js",
              "file": "/server-side/tests/unit-tests/entities/group.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should make a group",
                  "fullTitle": "GROUP ENTITY #group it should make a group",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const randomGroup = Math.random().toString(36).substr(2, 9);\nconst group = (0, _fakeGroup.default)(randomGroup, randomGroup + randomGroup);\nconst buildGroup = (0, _domain.makeGroup)({ ...group\n});\n(0, _chai.expect)(buildGroup.getGroupName()).to.be.eql(group.groupName);\n(0, _chai.expect)(buildGroup.getGroupDescription()).to.be.eql(group.groupDescription);",
                  "err": {},
                  "uuid": "b56e819a-5225-463f-b997-5e3a17a867b7",
                  "parentUUID": "d95f41e4-0c38-4e66-886a-9cd9f325ded3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b56e819a-5225-463f-b997-5e3a17a867b7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "33528c66-8a3b-4f8e-9e53-0e6e16145020",
              "title": "#groupName",
              "fullFile": "/Users/martinmichotte/Documents/EPHEC-Projects-3/Projet_Integration/web/server-side/tests/unit-tests/entities/group.js",
              "file": "/server-side/tests/unit-tests/entities/group.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "a group must have a groupName",
                  "fullTitle": "GROUP ENTITY #groupName a group must have a groupName",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const group = (0, _fakeGroup.default)(undefined, \"test\");\n(0, _chai.expect)(() => (0, _domain.makeGroup)({ ...group\n})).to.throw(_errors.RequiredParameterError, 'A groupName is a required.');",
                  "err": {},
                  "uuid": "fce6cf7e-f64b-49bd-aa69-572eae5ba846",
                  "parentUUID": "33528c66-8a3b-4f8e-9e53-0e6e16145020",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "a groupName can't be null",
                  "fullTitle": "GROUP ENTITY #groupName a groupName can't be null",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const group = (0, _fakeGroup.default)(null, \"test\");\n(0, _chai.expect)(() => (0, _domain.makeGroup)({ ...group\n})).to.throw(TypeError, 'A groupName must be a string.');",
                  "err": {},
                  "uuid": "c590b9b3-daa3-4a87-8dd6-9d3ae8f70bae",
                  "parentUUID": "33528c66-8a3b-4f8e-9e53-0e6e16145020",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "a groupName can't be a number",
                  "fullTitle": "GROUP ENTITY #groupName a groupName can't be a number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const group = (0, _fakeGroup.default)(404, \"test\");\n(0, _chai.expect)(() => (0, _domain.makeGroup)({ ...group\n})).to.throw(TypeError, 'A groupName must be a string.');",
                  "err": {},
                  "uuid": "1399412c-ab64-4717-bec4-05dd14ed9d0f",
                  "parentUUID": "33528c66-8a3b-4f8e-9e53-0e6e16145020",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fce6cf7e-f64b-49bd-aa69-572eae5ba846",
                "c590b9b3-daa3-4a87-8dd6-9d3ae8f70bae",
                "1399412c-ab64-4717-bec4-05dd14ed9d0f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "e7594068-e1f8-48f3-8a1a-cd693dda7412",
              "title": "#groupDescription",
              "fullFile": "/Users/martinmichotte/Documents/EPHEC-Projects-3/Projet_Integration/web/server-side/tests/unit-tests/entities/group.js",
              "file": "/server-side/tests/unit-tests/entities/group.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "a group must have a groupDescription",
                  "fullTitle": "GROUP ENTITY #groupDescription a group must have a groupDescription",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const group = (0, _fakeGroup.default)(\"test\", undefined);\n(0, _chai.expect)(() => (0, _domain.makeGroup)({ ...group\n})).to.throw(_errors.RequiredParameterError, 'A group description is a required.');",
                  "err": {},
                  "uuid": "7b10fb0e-0d63-4f33-a60e-472064ab7ed1",
                  "parentUUID": "e7594068-e1f8-48f3-8a1a-cd693dda7412",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "a groupDescription can't be null",
                  "fullTitle": "GROUP ENTITY #groupDescription a groupDescription can't be null",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const group = (0, _fakeGroup.default)(\"test\", null);\n(0, _chai.expect)(() => (0, _domain.makeGroup)({ ...group\n})).to.throw(TypeError, 'A group description must be a string.');",
                  "err": {},
                  "uuid": "432b9308-2d2b-45cb-b35d-a8dd8b30c3ce",
                  "parentUUID": "e7594068-e1f8-48f3-8a1a-cd693dda7412",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "a groupDescription can't be a number",
                  "fullTitle": "GROUP ENTITY #groupDescription a groupDescription can't be a number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const group = (0, _fakeGroup.default)(\"test\", 404);\n(0, _chai.expect)(() => (0, _domain.makeGroup)({ ...group\n})).to.throw(TypeError, 'A group description must be a string.');",
                  "err": {},
                  "uuid": "a71ace80-06ff-455e-a4ea-3e87affd32b3",
                  "parentUUID": "e7594068-e1f8-48f3-8a1a-cd693dda7412",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7b10fb0e-0d63-4f33-a60e-472064ab7ed1",
                "432b9308-2d2b-45cb-b35d-a8dd8b30c3ce",
                "a71ace80-06ff-455e-a4ea-3e87affd32b3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "7d4f9873-bf19-4c86-8a4f-ce6b65b317e8",
          "title": "PRODUCT ENTITY",
          "fullFile": "/Users/martinmichotte/Documents/EPHEC-Projects-3/Projet_Integration/web/server-side/tests/unit-tests/entities/product.js",
          "file": "/server-side/tests/unit-tests/entities/product.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "e1f23c18-93bc-42ed-a035-be9761ea9c48",
              "title": "#product",
              "fullFile": "/Users/martinmichotte/Documents/EPHEC-Projects-3/Projet_Integration/web/server-side/tests/unit-tests/entities/product.js",
              "file": "/server-side/tests/unit-tests/entities/product.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should make a product",
                  "fullTitle": "PRODUCT ENTITY #product it should make a product",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const product = (0, _fakeProduct.default)(\"jasmin\");\nconst buildProduct = (0, _domain.makeProduct)({ ...product\n});\n(0, _chai.expect)(buildProduct.getProductName()).to.be.eql(product.productName);",
                  "err": {},
                  "uuid": "6e9550ee-ca2e-4ab1-8271-449615739118",
                  "parentUUID": "e1f23c18-93bc-42ed-a035-be9761ea9c48",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6e9550ee-ca2e-4ab1-8271-449615739118"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "5ac747c3-e603-4dc3-a186-fa6f772f12ad",
              "title": "#productName",
              "fullFile": "/Users/martinmichotte/Documents/EPHEC-Projects-3/Projet_Integration/web/server-side/tests/unit-tests/entities/product.js",
              "file": "/server-side/tests/unit-tests/entities/product.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "a product must have a productName",
                  "fullTitle": "PRODUCT ENTITY #productName a product must have a productName",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const product = (0, _fakeProduct.default)(undefined);\n(0, _chai.expect)(() => (0, _domain.makeProduct)({ ...product\n})).to.throw(_errors.RequiredParameterError, 'A productName is a required.');",
                  "err": {},
                  "uuid": "8bc1b160-cbce-4612-8f49-75422fded2e6",
                  "parentUUID": "5ac747c3-e603-4dc3-a186-fa6f772f12ad",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "a productName can't be null",
                  "fullTitle": "PRODUCT ENTITY #productName a productName can't be null",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const product = (0, _fakeProduct.default)(null);\n(0, _chai.expect)(() => (0, _domain.makeProduct)({ ...product\n})).to.throw(TypeError, 'A product name must be a string.');",
                  "err": {},
                  "uuid": "809d9b32-a083-46f5-b97f-00899c621e9e",
                  "parentUUID": "5ac747c3-e603-4dc3-a186-fa6f772f12ad",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "a productName can't be a number",
                  "fullTitle": "PRODUCT ENTITY #productName a productName can't be a number",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const product = (0, _fakeProduct.default)(404);\n(0, _chai.expect)(() => (0, _domain.makeProduct)({ ...product\n})).to.throw(TypeError, 'A product name must be a string.');",
                  "err": {},
                  "uuid": "dce9b907-03e2-43b3-a4bc-ec937dbe0c7e",
                  "parentUUID": "5ac747c3-e603-4dc3-a186-fa6f772f12ad",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8bc1b160-cbce-4612-8f49-75422fded2e6",
                "809d9b32-a083-46f5-b97f-00899c621e9e",
                "dce9b907-03e2-43b3-a4bc-ec937dbe0c7e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "79993e08-ede6-456e-834b-d0a002d1c712",
          "title": "SHOPPINGLIST ENTITY",
          "fullFile": "/Users/martinmichotte/Documents/EPHEC-Projects-3/Projet_Integration/web/server-side/tests/unit-tests/entities/shoppingList.js",
          "file": "/server-side/tests/unit-tests/entities/shoppingList.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "c585b715-e742-498f-8fda-2a3cde167f7f",
              "title": "#shoppingList",
              "fullFile": "/Users/martinmichotte/Documents/EPHEC-Projects-3/Projet_Integration/web/server-side/tests/unit-tests/entities/shoppingList.js",
              "file": "/server-side/tests/unit-tests/entities/shoppingList.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should make a shopping list",
                  "fullTitle": "SHOPPINGLIST ENTITY #shoppingList it should make a shopping list",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const shoppingList = (0, _fakeShoppingList.default)(11223344, 4);\nconst buildShoppingList = (0, _domain.makeShoppingList)({ ...shoppingList\n});\n(0, _chai.expect)(buildShoppingList.getProductCode()).to.be.eql(shoppingList.code);\n(0, _chai.expect)(buildShoppingList.getProductQuantity()).to.be.eql(shoppingList.quantity);",
                  "err": {},
                  "uuid": "2f8884e8-cee5-496f-9caf-f1c3f6c1730e",
                  "parentUUID": "c585b715-e742-498f-8fda-2a3cde167f7f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2f8884e8-cee5-496f-9caf-f1c3f6c1730e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "09f857af-cff7-4496-b26f-dc5648cc6fa2",
              "title": "#code",
              "fullFile": "/Users/martinmichotte/Documents/EPHEC-Projects-3/Projet_Integration/web/server-side/tests/unit-tests/entities/shoppingList.js",
              "file": "/server-side/tests/unit-tests/entities/shoppingList.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "a shoppingList must have a code",
                  "fullTitle": "SHOPPINGLIST ENTITY #code a shoppingList must have a code",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const shoppingList = (0, _fakeShoppingList.default)(undefined, 4);\n(0, _chai.expect)(() => (0, _domain.makeShoppingList)({ ...shoppingList\n})).to.throw(_errors.RequiredParameterError, 'A product code is a required.');",
                  "err": {},
                  "uuid": "30ba3d26-0a3f-45f4-b705-ede99fd86a7d",
                  "parentUUID": "09f857af-cff7-4496-b26f-dc5648cc6fa2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "a code can't be null",
                  "fullTitle": "SHOPPINGLIST ENTITY #code a code can't be null",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const shoppingList = (0, _fakeShoppingList.default)(null, 4);\n(0, _chai.expect)(() => (0, _domain.makeShoppingList)({ ...shoppingList\n})).to.throw(TypeError, 'A product code must be a number.');",
                  "err": {},
                  "uuid": "59dec2ea-f9d5-4dab-ac91-a7448737b4f6",
                  "parentUUID": "09f857af-cff7-4496-b26f-dc5648cc6fa2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "a code can't be a string",
                  "fullTitle": "SHOPPINGLIST ENTITY #code a code can't be a string",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const shoppingList = (0, _fakeShoppingList.default)(\"404\", 4);\n(0, _chai.expect)(() => (0, _domain.makeShoppingList)({ ...shoppingList\n})).to.throw(TypeError, 'A product code must be a number');",
                  "err": {},
                  "uuid": "25863d10-cae9-4c02-a1ad-9abc64bdac4b",
                  "parentUUID": "09f857af-cff7-4496-b26f-dc5648cc6fa2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "30ba3d26-0a3f-45f4-b705-ede99fd86a7d",
                "59dec2ea-f9d5-4dab-ac91-a7448737b4f6",
                "25863d10-cae9-4c02-a1ad-9abc64bdac4b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "64b68376-c5f3-49d2-b186-578269c9208d",
              "title": "#quantity",
              "fullFile": "/Users/martinmichotte/Documents/EPHEC-Projects-3/Projet_Integration/web/server-side/tests/unit-tests/entities/shoppingList.js",
              "file": "/server-side/tests/unit-tests/entities/shoppingList.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "a shoppingList must have a quantity",
                  "fullTitle": "SHOPPINGLIST ENTITY #quantity a shoppingList must have a quantity",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const shoppingList = (0, _fakeShoppingList.default)(11223344, undefined);\n(0, _chai.expect)(() => (0, _domain.makeShoppingList)({ ...shoppingList\n})).to.throw(_errors.RequiredParameterError, 'A product quantity is a required.');",
                  "err": {},
                  "uuid": "b25f2bd2-5f81-40e5-bfd8-714f51d2ef66",
                  "parentUUID": "64b68376-c5f3-49d2-b186-578269c9208d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "a quantity can't be null",
                  "fullTitle": "SHOPPINGLIST ENTITY #quantity a quantity can't be null",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const shoppingList = (0, _fakeShoppingList.default)(11223344, null);\n(0, _chai.expect)(() => (0, _domain.makeShoppingList)({ ...shoppingList\n})).to.throw(TypeError, \"A product's quantity must be a number.\");",
                  "err": {},
                  "uuid": "6a6daea0-0561-4c88-aff8-c2db53665c65",
                  "parentUUID": "64b68376-c5f3-49d2-b186-578269c9208d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "a quantity can't be a string",
                  "fullTitle": "SHOPPINGLIST ENTITY #quantity a quantity can't be a string",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const shoppingList = (0, _fakeShoppingList.default)(11223344, \"404\");\n(0, _chai.expect)(() => (0, _domain.makeShoppingList)({ ...shoppingList\n})).to.throw(TypeError, \"A product's quantity must be a number.\");",
                  "err": {},
                  "uuid": "4a1c9bbf-d075-4996-abaa-b9d5d06f68f1",
                  "parentUUID": "64b68376-c5f3-49d2-b186-578269c9208d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "a quantity can't be to big",
                  "fullTitle": "SHOPPINGLIST ENTITY #quantity a quantity can't be to big",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const shoppingList = (0, _fakeShoppingList.default)(11223344, 22);\n(0, _chai.expect)(() => (0, _domain.makeShoppingList)({ ...shoppingList\n})).to.throw(RangeError, \"A product's quantity must be between 1 and 20.\");",
                  "err": {},
                  "uuid": "67144bbd-7999-4208-9c4a-c4a3642651b8",
                  "parentUUID": "64b68376-c5f3-49d2-b186-578269c9208d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "a quantity can't be small than 1",
                  "fullTitle": "SHOPPINGLIST ENTITY #quantity a quantity can't be small than 1",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const shoppingList = (0, _fakeShoppingList.default)(11223344, 0);\n(0, _chai.expect)(() => (0, _domain.makeShoppingList)({ ...shoppingList\n})).to.throw(RangeError, \"A product's quantity must be between 1 and 20.\");",
                  "err": {},
                  "uuid": "1c00d30b-2b91-4e27-8d18-b82cbd2dbf63",
                  "parentUUID": "64b68376-c5f3-49d2-b186-578269c9208d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b25f2bd2-5f81-40e5-bfd8-714f51d2ef66",
                "6a6daea0-0561-4c88-aff8-c2db53665c65",
                "4a1c9bbf-d075-4996-abaa-b9d5d06f68f1",
                "67144bbd-7999-4208-9c4a-c4a3642651b8",
                "1c00d30b-2b91-4e27-8d18-b82cbd2dbf63"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 10,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "924979a3-6d56-4aa6-a65b-e3c06e55f72d",
          "title": "USER ENTITY",
          "fullFile": "/Users/martinmichotte/Documents/EPHEC-Projects-3/Projet_Integration/web/server-side/tests/unit-tests/entities/user.js",
          "file": "/server-side/tests/unit-tests/entities/user.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "1315f84d-0ec9-4715-a1c8-01eed145eb58",
              "title": "#user",
              "fullFile": "/Users/martinmichotte/Documents/EPHEC-Projects-3/Projet_Integration/web/server-side/tests/unit-tests/entities/user.js",
              "file": "/server-side/tests/unit-tests/entities/user.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should make a user",
                  "fullTitle": "USER ENTITY #user it should make a user",
                  "timedOut": false,
                  "duration": 158,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = (0, _fakeUser.default)();\nconst buildUser = (0, _domain.makeUser)({ ...user\n});\n(0, _chai.expect)(buildUser.getFirstName()).to.be.eql(user.firstName);\n(0, _chai.expect)(buildUser.getLastName()).to.be.eql(user.lastName);\n(0, _chai.expect)(buildUser.getUsername()).to.be.eql(user.username);\n(0, _chai.expect)(buildUser.getEmail()).to.be.eql(user.email);\n(0, _chai.expect)(buildUser.getPassword()).not.to.be.eql(user.password);",
                  "err": {},
                  "uuid": "c02e0ec0-05a6-4498-b842-816108a540b0",
                  "parentUUID": "1315f84d-0ec9-4715-a1c8-01eed145eb58",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c02e0ec0-05a6-4498-b842-816108a540b0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 158,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "710d46af-4544-4bdf-a33f-e59428f4f8d0",
              "title": "#username",
              "fullFile": "/Users/martinmichotte/Documents/EPHEC-Projects-3/Projet_Integration/web/server-side/tests/unit-tests/entities/user.js",
              "file": "/server-side/tests/unit-tests/entities/user.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "a user must have a username",
                  "fullTitle": "USER ENTITY #username a user must have a username",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = (0, _fakeUser.default)({\n  username: undefined\n});\n(0, _chai.expect)(() => (0, _domain.makeUser)({ ...user\n})).to.throw(_errors.RequiredParameterError, 'A username is a required.');",
                  "err": {},
                  "uuid": "e3af66f3-a8e2-44ae-ad21-1a3369610ee9",
                  "parentUUID": "710d46af-4544-4bdf-a33f-e59428f4f8d0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "a username can't be null",
                  "fullTitle": "USER ENTITY #username a username can't be null",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = (0, _fakeUser.default)({\n  username: null\n});\n(0, _chai.expect)(() => (0, _domain.makeUser)({ ...user\n})).to.throw(TypeError, 'A username must be a string.');",
                  "err": {},
                  "uuid": "87cc5da9-b697-4778-8dcf-e751b17a7756",
                  "parentUUID": "710d46af-4544-4bdf-a33f-e59428f4f8d0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "a username can't be a number",
                  "fullTitle": "USER ENTITY #username a username can't be a number",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = (0, _fakeUser.default)({\n  username: 123\n});\n(0, _chai.expect)(() => (0, _domain.makeUser)({ ...user\n})).to.throw(TypeError, 'A username must be a string.');",
                  "err": {},
                  "uuid": "edb027d8-8623-4c90-8b3e-9c62d09f8f0b",
                  "parentUUID": "710d46af-4544-4bdf-a33f-e59428f4f8d0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "a username max length must be 32",
                  "fullTitle": "USER ENTITY #username a username max length must be 32",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = (0, _fakeUser.default)({\n  username: \"abc\".repeat(35)\n});\n(0, _chai.expect)(() => (0, _domain.makeUser)({ ...user\n})).to.throw(RangeError, 'A username length must be between 4 and 32.');",
                  "err": {},
                  "uuid": "e3e1f784-bbf7-4547-8bf9-30fce59f09ff",
                  "parentUUID": "710d46af-4544-4bdf-a33f-e59428f4f8d0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "a username min length must be 4",
                  "fullTitle": "USER ENTITY #username a username min length must be 4",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = (0, _fakeUser.default)({\n  username: \"ab\"\n});\n(0, _chai.expect)(() => (0, _domain.makeUser)({ ...user\n})).to.throw(RangeError, 'A username length must be between 4 and 32.');",
                  "err": {},
                  "uuid": "2dcfb802-9f32-4115-ad7c-193e456f3c4c",
                  "parentUUID": "710d46af-4544-4bdf-a33f-e59428f4f8d0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e3af66f3-a8e2-44ae-ad21-1a3369610ee9",
                "87cc5da9-b697-4778-8dcf-e751b17a7756",
                "edb027d8-8623-4c90-8b3e-9c62d09f8f0b",
                "e3e1f784-bbf7-4547-8bf9-30fce59f09ff",
                "2dcfb802-9f32-4115-ad7c-193e456f3c4c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 13,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "068c46fd-14f6-45b8-87d1-d2133da2e83f",
              "title": "#email",
              "fullFile": "/Users/martinmichotte/Documents/EPHEC-Projects-3/Projet_Integration/web/server-side/tests/unit-tests/entities/user.js",
              "file": "/server-side/tests/unit-tests/entities/user.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "a user must have an email",
                  "fullTitle": "USER ENTITY #email a user must have an email",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = (0, _fakeUser.default)({\n  email: undefined\n});\n(0, _chai.expect)(() => (0, _domain.makeUser)({ ...user\n})).to.throw(_errors.RequiredParameterError, 'An email is a required.');",
                  "err": {},
                  "uuid": "32d00035-9007-4665-b53f-d24726b6378f",
                  "parentUUID": "068c46fd-14f6-45b8-87d1-d2133da2e83f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "an email must be a valid email",
                  "fullTitle": "USER ENTITY #email an email must be a valid email",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = (0, _fakeUser.default)({\n  email: \"dangamil.com\"\n});\n(0, _chai.expect)(() => (0, _domain.makeUser)({ ...user\n})).to.throw(SyntaxError, 'Invalid email.');",
                  "err": {},
                  "uuid": "15923717-8f6e-4a2f-b0bd-e0fec62574a9",
                  "parentUUID": "068c46fd-14f6-45b8-87d1-d2133da2e83f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "an email can't be null",
                  "fullTitle": "USER ENTITY #email an email can't be null",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = (0, _fakeUser.default)({\n  email: null\n});\n(0, _chai.expect)(() => (0, _domain.makeUser)({ ...user\n})).to.throw(SyntaxError, 'An email must be of type string.');",
                  "err": {},
                  "uuid": "ffb0f530-58ec-4bf3-9a68-878950b523b9",
                  "parentUUID": "068c46fd-14f6-45b8-87d1-d2133da2e83f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "an email can't be a number",
                  "fullTitle": "USER ENTITY #email an email can't be a number",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = (0, _fakeUser.default)({\n  email: 123\n});\n(0, _chai.expect)(() => (0, _domain.makeUser)({ ...user\n})).to.throw(SyntaxError, 'An email must be of type string.');",
                  "err": {},
                  "uuid": "d033e398-a91d-4949-bdc3-563f8ab8e80d",
                  "parentUUID": "068c46fd-14f6-45b8-87d1-d2133da2e83f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "32d00035-9007-4665-b53f-d24726b6378f",
                "15923717-8f6e-4a2f-b0bd-e0fec62574a9",
                "ffb0f530-58ec-4bf3-9a68-878950b523b9",
                "d033e398-a91d-4949-bdc3-563f8ab8e80d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 6,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "b5965f98-3d68-409a-9247-dbda00ad5f5c",
              "title": "#password",
              "fullFile": "/Users/martinmichotte/Documents/EPHEC-Projects-3/Projet_Integration/web/server-side/tests/unit-tests/entities/user.js",
              "file": "/server-side/tests/unit-tests/entities/user.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "a user must a have password",
                  "fullTitle": "USER ENTITY #password a user must a have password",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = (0, _fakeUser.default)({\n  password: undefined\n});\n(0, _chai.expect)(() => (0, _domain.makeUser)({ ...user\n})).to.throw(_errors.RequiredParameterError, 'A password is a required.');",
                  "err": {},
                  "uuid": "e96defaa-4853-48d3-bf77-cfa08d7c5c54",
                  "parentUUID": "b5965f98-3d68-409a-9247-dbda00ad5f5c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can hash password",
                  "fullTitle": "USER ENTITY #password can hash password",
                  "timedOut": false,
                  "duration": 207,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = (0, _fakeUser.default)();\nconst password = (0, _domain.makeUser)({ ...user\n}).getPassword();\n(0, _chai.expect)(password.match(/^\\$2[aby]?\\$\\d{1,2}\\$[.\\/A-Za-z0-9]{53}$/)).to.not.be.null;",
                  "err": {},
                  "uuid": "034b3aab-f9ad-40ff-84ea-62994a41017d",
                  "parentUUID": "b5965f98-3d68-409a-9247-dbda00ad5f5c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "a password can't be a null",
                  "fullTitle": "USER ENTITY #password a password can't be a null",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = (0, _fakeUser.default)({\n  password: null\n});\n(0, _chai.expect)(() => (0, _domain.makeUser)({ ...user\n})).to.throw(TypeError, 'The password must be of type string.');",
                  "err": {},
                  "uuid": "cd209b0d-60a0-4780-96ee-0ace7730cd3f",
                  "parentUUID": "b5965f98-3d68-409a-9247-dbda00ad5f5c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "a password can't be a number",
                  "fullTitle": "USER ENTITY #password a password can't be a number",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = (0, _fakeUser.default)({\n  password: 123\n});\n(0, _chai.expect)(() => (0, _domain.makeUser)({ ...user\n})).to.throw(TypeError, 'The password must be of type string.');",
                  "err": {},
                  "uuid": "224a8e93-b009-44ff-9935-c79ca52d2848",
                  "parentUUID": "b5965f98-3d68-409a-9247-dbda00ad5f5c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e96defaa-4853-48d3-bf77-cfa08d7c5c54",
                "034b3aab-f9ad-40ff-84ea-62994a41017d",
                "cd209b0d-60a0-4780-96ee-0ace7730cd3f",
                "224a8e93-b009-44ff-9935-c79ca52d2848"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 208,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "3c0f0546-8389-4cd4-a6ae-6eb8bf3bbef3",
          "title": "SHOPPINGLIST SERVICE",
          "fullFile": "/Users/martinmichotte/Documents/EPHEC-Projects-3/Projet_Integration/web/server-side/tests/unit-tests/services/shoppingList-service.js",
          "file": "/server-side/tests/unit-tests/services/shoppingList-service.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "SHOPPINGLIST SERVICE \"before all\" hook",
              "timedOut": false,
              "duration": 287,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { ...fakeUser\n} = (0, _fakeUser.default)();\nconst { ...fakeGroup\n} = (0, _fakeGroup.default)(\"testoss\", \"testoss\");\ninsertedUser = await _services.userService.addUser({ ...fakeUser\n});\ninsertedGroup = await _services.groupService.addGroup({\n  username: insertedUser.username,\n  ...fakeGroup\n});\ninsertedUserGroup = await _services.groupService.addMembersToGroup({\n  groupId: insertedGroup.dataValues.groupId,\n  username: insertedUser.username\n});",
              "err": {},
              "uuid": "0f370241-e25b-411f-8c62-8fa0638adcf2",
              "parentUUID": "3c0f0546-8389-4cd4-a6ae-6eb8bf3bbef3",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "SHOPPINGLIST SERVICE \"after all\" hook",
              "timedOut": false,
              "duration": 20,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await _services.groupService.deleteUserFromGroup({\n  groupId: insertedGroup.dataValues.groupId,\n  userId: insertedUser.userId\n});\nawait _services.groupService.deleteGroup({\n  groupId: insertedGroup.dataValues.groupId\n});\nawait _services.userService.removeUser({\n  userId: insertedUser.userId\n});",
              "err": {},
              "uuid": "16b00cb4-bd0b-4972-bd2d-03ea0c2851a7",
              "parentUUID": "3c0f0546-8389-4cd4-a6ae-6eb8bf3bbef3",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "9f264101-048d-407c-9196-187b1cb648b7",
              "title": "#get-shopping-list",
              "fullFile": "/Users/martinmichotte/Documents/EPHEC-Projects-3/Projet_Integration/web/server-side/tests/unit-tests/services/shoppingList-service.js",
              "file": "/server-side/tests/unit-tests/services/shoppingList-service.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "not created",
                  "fullTitle": "SHOPPINGLIST SERVICE #get-shopping-list not created",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "025467ec-cf1b-4bd6-88a6-690d8344b81e",
                  "parentUUID": "9f264101-048d-407c-9196-187b1cb648b7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "025467ec-cf1b-4bd6-88a6-690d8344b81e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "ffd4009d-14a2-4b07-8870-65a616a80fb3",
              "title": "#get-group-shopping-list",
              "fullFile": "/Users/martinmichotte/Documents/EPHEC-Projects-3/Projet_Integration/web/server-side/tests/unit-tests/services/shoppingList-service.js",
              "file": "/server-side/tests/unit-tests/services/shoppingList-service.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "not created",
                  "fullTitle": "SHOPPINGLIST SERVICE #get-group-shopping-list not created",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "aa60954d-8c61-43eb-9bc4-83dcb1b1fef7",
                  "parentUUID": "ffd4009d-14a2-4b07-8870-65a616a80fb3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "aa60954d-8c61-43eb-9bc4-83dcb1b1fef7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "c1de73eb-a60f-497b-9a6a-3bd20cef2bcb",
              "title": "#add-product-to-shopping-list",
              "fullFile": "/Users/martinmichotte/Documents/EPHEC-Projects-3/Projet_Integration/web/server-side/tests/unit-tests/services/shoppingList-service.js",
              "file": "/server-side/tests/unit-tests/services/shoppingList-service.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "url must include a groupId",
                  "fullTitle": "SHOPPINGLIST SERVICE #add-product-to-shopping-list url must include a groupId",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const addProduct = await _services.shoppingListService.putProductInShoppingList({});\n(0, _chai.expect)(addProduct.message).to.equal(\"You must supply a group id.\");",
                  "err": {},
                  "uuid": "f2b9ce5a-d280-46a9-b844-679542a4f7c9",
                  "parentUUID": "c1de73eb-a60f-497b-9a6a-3bd20cef2bcb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can add a new product",
                  "fullTitle": "SHOPPINGLIST SERVICE #add-product-to-shopping-list can add a new product",
                  "timedOut": false,
                  "duration": 72,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const fakeShoppingList = (0, _fakeShoppingList.default)(CODE_BARRE, 4);\nconst addProduct = await _services.shoppingListService.putProductInShoppingList({\n  groupId: insertedGroup.dataValues.groupId,\n  userId: insertedUser.userId,\n  ...fakeShoppingList\n});\n(0, _chai.expect)(Number(addProduct.code)).to.equal(fakeShoppingList.code);\nawait _services.shoppingListService.removeProductFromShoppingList({\n  itemId: addProduct.id,\n  userId: insertedUser.userId\n});",
                  "err": {},
                  "uuid": "b6a09da0-aeb8-4540-a2e6-ac4d5a720000",
                  "parentUUID": "c1de73eb-a60f-497b-9a6a-3bd20cef2bcb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "cannot add an inexisting product",
                  "fullTitle": "SHOPPINGLIST SERVICE #add-product-to-shopping-list cannot add an inexisting product",
                  "timedOut": false,
                  "duration": 61,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const fakeShoppingList = (0, _fakeShoppingList.default)(1111111111100, 4);\nconst addProduct = await _services.shoppingListService.putProductInShoppingList({\n  groupId: insertedGroup.dataValues.groupId,\n  userId: insertedUser.userId,\n  ...fakeShoppingList\n});\n(0, _chai.expect)(addProduct.message).to.equal(`No product was found with this code ${fakeShoppingList.code}`);",
                  "err": {},
                  "uuid": "e6f40f04-6352-425e-80ed-06e532f2c3ab",
                  "parentUUID": "c1de73eb-a60f-497b-9a6a-3bd20cef2bcb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "cannot add twice a product for a single user",
                  "fullTitle": "SHOPPINGLIST SERVICE #add-product-to-shopping-list cannot add twice a product for a single user",
                  "timedOut": false,
                  "duration": 132,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const fakeShoppingList = (0, _fakeShoppingList.default)(CODE_BARRE, 4);\nconst addProduct = await _services.shoppingListService.putProductInShoppingList({\n  groupId: insertedGroup.dataValues.groupId,\n  userId: insertedUser.userId,\n  ...fakeShoppingList\n});\nconst newAddProduct = await _services.shoppingListService.putProductInShoppingList({\n  groupId: insertedGroup.dataValues.groupId,\n  userId: insertedUser.userId,\n  ...fakeShoppingList\n});\n(0, _chai.expect)(newAddProduct.statusCode).to.equal(409);\nawait _services.shoppingListService.removeProductFromShoppingList({\n  itemId: addProduct.id,\n  userId: insertedUser.userId\n});",
                  "err": {},
                  "uuid": "d63247a9-e8d5-45a9-b99d-d5cda8a43e33",
                  "parentUUID": "c1de73eb-a60f-497b-9a6a-3bd20cef2bcb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f2b9ce5a-d280-46a9-b844-679542a4f7c9",
                "b6a09da0-aeb8-4540-a2e6-ac4d5a720000",
                "e6f40f04-6352-425e-80ed-06e532f2c3ab",
                "d63247a9-e8d5-45a9-b99d-d5cda8a43e33"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 268,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "ddc43401-db7f-41a8-88c6-02451d0fe810",
              "title": "#remove-product-to-shopping-list",
              "fullFile": "/Users/martinmichotte/Documents/EPHEC-Projects-3/Projet_Integration/web/server-side/tests/unit-tests/services/shoppingList-service.js",
              "file": "/server-side/tests/unit-tests/services/shoppingList-service.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "itemId must include in parameters",
                  "fullTitle": "SHOPPINGLIST SERVICE #remove-product-to-shopping-list itemId must include in parameters",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const removedProduct = await _services.shoppingListService.removeProductFromShoppingList({\n  itemId: undefined,\n  userId: ''\n});\n(0, _chai.expect)(removedProduct.message).to.equal('You must supply the item id.');",
                  "err": {},
                  "uuid": "d45c316e-d742-48bf-9167-acafad169377",
                  "parentUUID": "ddc43401-db7f-41a8-88c6-02451d0fe810",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can remove an existing product",
                  "fullTitle": "SHOPPINGLIST SERVICE #remove-product-to-shopping-list can remove an existing product",
                  "timedOut": false,
                  "duration": 34,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const fakeShoppingList = (0, _fakeShoppingList.default)(CODE_BARRE, 4);\nconst addProduct = await _services.shoppingListService.putProductInShoppingList({\n  groupId: insertedGroup.dataValues.groupId,\n  userId: insertedUser.userId,\n  ...fakeShoppingList\n});\nconst removeProduct = await _services.shoppingListService.removeProductFromShoppingList({\n  itemId: addProduct.id,\n  userId: insertedUser.userId\n});\n(0, _chai.expect)(removeProduct).to.equal(1);",
                  "err": {},
                  "uuid": "3a1a583e-e349-46fe-a2a5-100398bfbf69",
                  "parentUUID": "ddc43401-db7f-41a8-88c6-02451d0fe810",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "cannot remove an inexisting product",
                  "fullTitle": "SHOPPINGLIST SERVICE #remove-product-to-shopping-list cannot remove an inexisting product",
                  "timedOut": false,
                  "duration": 42,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const fakeShoppingList = (0, _fakeShoppingList.default)(CODE_BARRE, 4);\nconst addProduct = await _services.shoppingListService.putProductInShoppingList({\n  groupId: insertedGroup.dataValues.groupId,\n  userId: insertedUser.userId,\n  ...fakeShoppingList\n});\nawait _services.shoppingListService.removeProductFromShoppingList({\n  itemId: addProduct.id,\n  userId: insertedUser.userId\n});\nconst newRemoveProduct = await _services.shoppingListService.removeProductFromShoppingList({\n  itemId: addProduct.id,\n  userId: insertedUser.userId\n});\n(0, _chai.expect)(newRemoveProduct.message).to.equal(`No item with this id '${addProduct.id}' was found in the shopping list !`);",
                  "err": {},
                  "uuid": "0b824ca1-26eb-4bf8-ae25-696ca3cfbcff",
                  "parentUUID": "ddc43401-db7f-41a8-88c6-02451d0fe810",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d45c316e-d742-48bf-9167-acafad169377",
                "3a1a583e-e349-46fe-a2a5-100398bfbf69",
                "0b824ca1-26eb-4bf8-ae25-696ca3cfbcff"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 76,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "a88b128a-e064-4eac-80d2-1f664b0e7200",
          "title": "USER SERVICE",
          "fullFile": "/Users/martinmichotte/Documents/EPHEC-Projects-3/Projet_Integration/web/server-side/tests/unit-tests/services/user-service.js",
          "file": "/server-side/tests/unit-tests/services/user-service.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "5dd9e45d-039d-40f4-895b-d2d1bdd2dec2",
              "title": "#register-user",
              "fullFile": "/Users/martinmichotte/Documents/EPHEC-Projects-3/Projet_Integration/web/server-side/tests/unit-tests/services/user-service.js",
              "file": "/server-side/tests/unit-tests/services/user-service.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "inserts a user in the database",
                  "fullTitle": "USER SERVICE #register-user inserts a user in the database",
                  "timedOut": false,
                  "duration": 113,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { ...fakeUser\n} = (0, _fakeUser.default)();\nconst inserted = await _services.userService.addUser({ ...fakeUser\n});\nfakeUser.password = inserted.password;\nfakeUser.userId = inserted.userId;\n(0, _chai.expect)(inserted).to.deep.include(fakeUser);\nawait _services.userService.removeUser({\n  userId: inserted.userId\n});",
                  "err": {},
                  "uuid": "88763ed5-f6bb-4a96-8c28-0b79d187b236",
                  "parentUUID": "5dd9e45d-039d-40f4-895b-d2d1bdd2dec2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can't register a user if he/she already exists",
                  "fullTitle": "USER SERVICE #register-user can't register a user if he/she already exists",
                  "timedOut": false,
                  "duration": 171,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { ...fakeUser\n} = (0, _fakeUser.default)();\nconst firstUser = await _services.userService.addUser({ ...fakeUser\n});\nconst secondtUser = await _services.userService.addUser({ ...fakeUser\n});\n(0, _chai.expect)(secondtUser.message).to.equal(\"A user with the same username or email already exists !\");\nawait _services.userService.removeUser({\n  userId: firstUser.userId\n});",
                  "err": {},
                  "uuid": "1255c91c-67ef-41bc-99f9-2cb16ee22cb2",
                  "parentUUID": "5dd9e45d-039d-40f4-895b-d2d1bdd2dec2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "88763ed5-f6bb-4a96-8c28-0b79d187b236",
                "1255c91c-67ef-41bc-99f9-2cb16ee22cb2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 284,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "89bbd4bc-f217-4686-8b94-30bc42eba414",
              "title": "#login-user",
              "fullFile": "/Users/martinmichotte/Documents/EPHEC-Projects-3/Projet_Integration/web/server-side/tests/unit-tests/services/user-service.js",
              "file": "/server-side/tests/unit-tests/services/user-service.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "can authenticate a user",
                  "fullTitle": "USER SERVICE #login-user can authenticate a user",
                  "timedOut": false,
                  "duration": 208,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { ...fakeUser\n} = (0, _fakeUser.default)();\nconst createdUser = await _services.userService.addUser({ ...fakeUser\n});\nconst loggedInUser = await _services.userService.logInUser({\n  pseudo: fakeUser.username,\n  password: fakeUser.password\n});\n(0, _chai.expect)(loggedInUser).to.have.property('token');\n(0, _chai.expect)(loggedInUser.data.username).to.equal(fakeUser.username);\nawait _services.userService.removeUser({\n  userId: createdUser.userId\n});",
                  "err": {},
                  "uuid": "bea9475b-7b99-426b-8327-3cbd532619f8",
                  "parentUUID": "89bbd4bc-f217-4686-8b94-30bc42eba414",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "must include an pseudo",
                  "fullTitle": "USER SERVICE #login-user must include an pseudo",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const loggedInUser = await _services.userService.logInUser({\n  pseudo: undefined,\n  password: \"123\"\n});\n(0, _chai.expect)(loggedInUser.message).to.equal(\"You must supply a pseudo.\");",
                  "err": {},
                  "uuid": "0aa6387a-cfdc-4364-b16d-899b6f88510f",
                  "parentUUID": "89bbd4bc-f217-4686-8b94-30bc42eba414",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "must include an password",
                  "fullTitle": "USER SERVICE #login-user must include an password",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const loggedInUser = await _services.userService.logInUser({\n  pseudo: \"12345\",\n  password: undefined\n});\n(0, _chai.expect)(loggedInUser.message).to.equal(\"You must supply a password.\");",
                  "err": {},
                  "uuid": "67974735-fc19-4c0a-b808-4494403bf848",
                  "parentUUID": "89bbd4bc-f217-4686-8b94-30bc42eba414",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can't authenticate unregistered user",
                  "fullTitle": "USER SERVICE #login-user can't authenticate unregistered user",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const loggedInUser = await _services.userService.logInUser({\n  pseudo: '*******',\n  password: '*******'\n});\n(0, _chai.expect)(loggedInUser.message).to.equal(\"Authentication failed !\");",
                  "err": {},
                  "uuid": "fd0dc958-a459-4db1-b9cf-3e0a367adf0e",
                  "parentUUID": "89bbd4bc-f217-4686-8b94-30bc42eba414",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can't authenticate a user with a wrong password user",
                  "fullTitle": "USER SERVICE #login-user can't authenticate a user with a wrong password user",
                  "timedOut": false,
                  "duration": 206,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { ...fakeUser\n} = (0, _fakeUser.default)();\nconst createdUser = await _services.userService.addUser({ ...fakeUser\n});\nconst loggedInUser = await _services.userService.logInUser({\n  pseudo: fakeUser.username,\n  password: '*******'\n});\n(0, _chai.expect)(loggedInUser.message).to.equal(\"Authentication failed !\");\nawait _services.userService.removeUser({\n  userId: createdUser.userId\n});",
                  "err": {},
                  "uuid": "4baeae3e-4711-45ab-8c1b-9b0d3495311f",
                  "parentUUID": "89bbd4bc-f217-4686-8b94-30bc42eba414",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bea9475b-7b99-426b-8327-3cbd532619f8",
                "0aa6387a-cfdc-4364-b16d-899b6f88510f",
                "67974735-fc19-4c0a-b808-4494403bf848",
                "fd0dc958-a459-4db1-b9cf-3e0a367adf0e",
                "4baeae3e-4711-45ab-8c1b-9b0d3495311f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 416,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "68160a48-75df-47c7-95b5-43f715a3826a",
              "title": "#list-one-user",
              "fullFile": "/Users/martinmichotte/Documents/EPHEC-Projects-3/Projet_Integration/web/server-side/tests/unit-tests/services/user-service.js",
              "file": "/server-side/tests/unit-tests/services/user-service.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "find user by id",
                  "fullTitle": "USER SERVICE #list-one-user find user by id",
                  "timedOut": false,
                  "duration": 236,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { ...fakeUser\n} = (0, _fakeUser.default)();\nconst inserted = await _services.userService.addUser({ ...fakeUser\n});\nfakeUser.userId = inserted.userId;\nconst listedOneUser = await _services.userService.listOneUser({\n  id: fakeUser.userId\n});\n(0, _chai.expect)(listedOneUser.dataValues.username).to.equal(fakeUser.username);\n(0, _chai.expect)(listedOneUser.dataValues.firstName).to.equal(fakeUser.firstName);\n(0, _chai.expect)(listedOneUser.dataValues.lastName).to.equal(fakeUser.lastName);\n(0, _chai.expect)(listedOneUser.dataValues.email).to.equal(fakeUser.email);\nawait _services.userService.removeUser({\n  userId: inserted.userId\n});",
                  "err": {},
                  "uuid": "02b1a4a5-864b-46e1-b205-7b512d138d1c",
                  "parentUUID": "68160a48-75df-47c7-95b5-43f715a3826a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "02b1a4a5-864b-46e1-b205-7b512d138d1c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 236,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "f211b615-dff5-4ac0-b8f9-f8dea5ab4709",
              "title": "#update-one-user",
              "fullFile": "/Users/martinmichotte/Documents/EPHEC-Projects-3/Projet_Integration/web/server-side/tests/unit-tests/services/user-service.js",
              "file": "/server-side/tests/unit-tests/services/user-service.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "update one user with userId",
                  "fullTitle": "USER SERVICE #update-one-user update one user with userId",
                  "timedOut": false,
                  "duration": 189,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inserted = await _services.userService.addUser({ ...(0, _fakeUser.default)()\n});\nconst updatedInfo = (0, _fakeUser.default)({\n  username: 'test'\n});\nconst updatedUser = await _services.userService.putUser({\n  userId: inserted.userId,\n  ...updatedInfo\n});\n(0, _chai.expect)(updatedUser[1].dataValues.username).to.equal(updatedInfo.username);\nawait _services.userService.removeUser({\n  userId: inserted.userId\n});",
                  "err": {},
                  "uuid": "c4276f45-d53c-45b8-a030-046228574a6c",
                  "parentUUID": "f211b615-dff5-4ac0-b8f9-f8dea5ab4709",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can not update a user with an existing username or email",
                  "fullTitle": "USER SERVICE #update-one-user can not update a user with an existing username or email",
                  "timedOut": false,
                  "duration": 318,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user1 = await _services.userService.addUser({ ...(0, _fakeUser.default)()\n});\nconst user2 = await _services.userService.addUser({ ...(0, _fakeUser.default)()\n});\nconst updatedInfo = (0, _fakeUser.default)({\n  username: user2.username\n});\nconst updatedUser1 = await _services.userService.putUser({\n  userId: user1.userId,\n  ...updatedInfo\n});\n(0, _chai.expect)(updatedUser1.message).to.equal('A user with the same username already exists !');\nawait _services.userService.removeUser({\n  userId: user1.userId\n});\nawait _services.userService.removeUser({\n  userId: user2.userId\n});",
                  "err": {},
                  "uuid": "38745465-386c-45bc-96b3-6c2d80a16dd5",
                  "parentUUID": "f211b615-dff5-4ac0-b8f9-f8dea5ab4709",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c4276f45-d53c-45b8-a030-046228574a6c",
                "38745465-386c-45bc-96b3-6c2d80a16dd5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 507,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.1.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "index",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.1.1"
    },
    "marge": {
      "options": {
        "reportDir": "test-reports/unit",
        "reportFilename": "index"
      },
      "version": "5.1.0"
    }
  }
}