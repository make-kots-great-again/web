{
  "stats": {
    "suites": 26,
    "tests": 53,
    "passes": 53,
    "pending": 0,
    "failures": 0,
    "start": "2020-12-04T15:39:59.199Z",
    "end": "2020-12-04T15:40:00.802Z",
    "duration": 1603,
    "testsRegistered": 53,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "3ddc6bc8-794c-4ae6-bead-045c644dfa38",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "fa6b13be-1afc-4fc6-aa7f-c01a7131ba38",
          "title": "GROUP ENTITY",
          "fullFile": "C:\\Users\\morga\\Documents\\web\\server-side\\tests\\unit-tests\\entities\\group.js",
          "file": "\\server-side\\tests\\unit-tests\\entities\\group.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "b649f5a5-4c82-4820-bffe-fc3ac4b70fc1",
              "title": "#group",
              "fullFile": "C:\\Users\\morga\\Documents\\web\\server-side\\tests\\unit-tests\\entities\\group.js",
              "file": "\\server-side\\tests\\unit-tests\\entities\\group.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should make a group",
                  "fullTitle": "GROUP ENTITY #group it should make a group",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const randomGroup = Math.random().toString(36).substr(2, 9);\nconst group = (0, _fakeGroup.default)(randomGroup, randomGroup + randomGroup);\nconst buildGroup = (0, _domain.makeGroup)({ ...group\n});\n(0, _chai.expect)(buildGroup.getGroupName()).to.be.eql(group.groupName);\n(0, _chai.expect)(buildGroup.getGroupDescription()).to.be.eql(group.groupDescription);",
                  "err": {},
                  "uuid": "15fcb367-1327-4903-8422-65f21c6258eb",
                  "parentUUID": "b649f5a5-4c82-4820-bffe-fc3ac4b70fc1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "15fcb367-1327-4903-8422-65f21c6258eb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "86e343b3-c1b7-4ac7-8d0b-018b845e82ad",
              "title": "#groupName",
              "fullFile": "C:\\Users\\morga\\Documents\\web\\server-side\\tests\\unit-tests\\entities\\group.js",
              "file": "\\server-side\\tests\\unit-tests\\entities\\group.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "a group must have a groupName",
                  "fullTitle": "GROUP ENTITY #groupName a group must have a groupName",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const group = (0, _fakeGroup.default)(undefined, \"test\");\n(0, _chai.expect)(() => (0, _domain.makeGroup)({ ...group\n})).to.throw(_errors.RequiredParameterError, 'A groupName is a required.');",
                  "err": {},
                  "uuid": "02a7e250-0af4-4966-9167-7fa5df9b4d71",
                  "parentUUID": "86e343b3-c1b7-4ac7-8d0b-018b845e82ad",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "a groupName can't be null",
                  "fullTitle": "GROUP ENTITY #groupName a groupName can't be null",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const group = (0, _fakeGroup.default)(null, \"test\");\n(0, _chai.expect)(() => (0, _domain.makeGroup)({ ...group\n})).to.throw(TypeError, 'A groupName must be a string.');",
                  "err": {},
                  "uuid": "45c11963-bb2a-4357-9aae-31cc88b2bd3c",
                  "parentUUID": "86e343b3-c1b7-4ac7-8d0b-018b845e82ad",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "a groupName can't be a number",
                  "fullTitle": "GROUP ENTITY #groupName a groupName can't be a number",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const group = (0, _fakeGroup.default)(404, \"test\");\n(0, _chai.expect)(() => (0, _domain.makeGroup)({ ...group\n})).to.throw(TypeError, 'A groupName must be a string.');",
                  "err": {},
                  "uuid": "8c0bcd39-03c3-4927-a1cc-41703bc8052f",
                  "parentUUID": "86e343b3-c1b7-4ac7-8d0b-018b845e82ad",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "02a7e250-0af4-4966-9167-7fa5df9b4d71",
                "45c11963-bb2a-4357-9aae-31cc88b2bd3c",
                "8c0bcd39-03c3-4927-a1cc-41703bc8052f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "89f029eb-6bbc-4d24-8483-4cbf113017e2",
              "title": "#groupDescription",
              "fullFile": "C:\\Users\\morga\\Documents\\web\\server-side\\tests\\unit-tests\\entities\\group.js",
              "file": "\\server-side\\tests\\unit-tests\\entities\\group.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "a group must have a groupDescription",
                  "fullTitle": "GROUP ENTITY #groupDescription a group must have a groupDescription",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const group = (0, _fakeGroup.default)(\"test\", undefined);\n(0, _chai.expect)(() => (0, _domain.makeGroup)({ ...group\n})).to.throw(_errors.RequiredParameterError, 'A group description is a required.');",
                  "err": {},
                  "uuid": "fc5e2065-dc7a-44e5-8924-c0a41b407651",
                  "parentUUID": "89f029eb-6bbc-4d24-8483-4cbf113017e2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "a groupDescription can't be null",
                  "fullTitle": "GROUP ENTITY #groupDescription a groupDescription can't be null",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const group = (0, _fakeGroup.default)(\"test\", null);\n(0, _chai.expect)(() => (0, _domain.makeGroup)({ ...group\n})).to.throw(TypeError, 'A group description must be a string.');",
                  "err": {},
                  "uuid": "51cd573b-eee2-4172-ad03-72dfe7521ca9",
                  "parentUUID": "89f029eb-6bbc-4d24-8483-4cbf113017e2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "a groupDescription can't be a number",
                  "fullTitle": "GROUP ENTITY #groupDescription a groupDescription can't be a number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const group = (0, _fakeGroup.default)(\"test\", 404);\n(0, _chai.expect)(() => (0, _domain.makeGroup)({ ...group\n})).to.throw(TypeError, 'A group description must be a string.');",
                  "err": {},
                  "uuid": "dc48d98d-5782-4655-9a6c-b5f53ed13d32",
                  "parentUUID": "89f029eb-6bbc-4d24-8483-4cbf113017e2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fc5e2065-dc7a-44e5-8924-c0a41b407651",
                "51cd573b-eee2-4172-ad03-72dfe7521ca9",
                "dc48d98d-5782-4655-9a6c-b5f53ed13d32"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "3c238de7-302e-4ba3-9722-319510551a8b",
          "title": "PRODUCT ENTITY",
          "fullFile": "C:\\Users\\morga\\Documents\\web\\server-side\\tests\\unit-tests\\entities\\product.js",
          "file": "\\server-side\\tests\\unit-tests\\entities\\product.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "a05ba21b-0a98-498c-821d-64da112eb38e",
              "title": "#product",
              "fullFile": "C:\\Users\\morga\\Documents\\web\\server-side\\tests\\unit-tests\\entities\\product.js",
              "file": "\\server-side\\tests\\unit-tests\\entities\\product.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should make a product",
                  "fullTitle": "PRODUCT ENTITY #product it should make a product",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const product = (0, _fakeProduct.default)(\"jasmin\");\nconst buildProduct = (0, _domain.makeProduct)({ ...product\n});\n(0, _chai.expect)(buildProduct.getProductName()).to.be.eql(product.productName);",
                  "err": {},
                  "uuid": "cff52f0c-cdba-4fda-a579-46a4f4de7316",
                  "parentUUID": "a05ba21b-0a98-498c-821d-64da112eb38e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cff52f0c-cdba-4fda-a579-46a4f4de7316"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "e0557748-e205-499e-977b-f8089cf2acf5",
              "title": "#productName",
              "fullFile": "C:\\Users\\morga\\Documents\\web\\server-side\\tests\\unit-tests\\entities\\product.js",
              "file": "\\server-side\\tests\\unit-tests\\entities\\product.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "a product must have a productName",
                  "fullTitle": "PRODUCT ENTITY #productName a product must have a productName",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const product = (0, _fakeProduct.default)(undefined);\n(0, _chai.expect)(() => (0, _domain.makeProduct)({ ...product\n})).to.throw(_errors.RequiredParameterError, 'A productName is a required.');",
                  "err": {},
                  "uuid": "54a272c0-8e1d-4d31-9ab2-b9fba65d6de9",
                  "parentUUID": "e0557748-e205-499e-977b-f8089cf2acf5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "a productName can't be null",
                  "fullTitle": "PRODUCT ENTITY #productName a productName can't be null",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const product = (0, _fakeProduct.default)(null);\n(0, _chai.expect)(() => (0, _domain.makeProduct)({ ...product\n})).to.throw(TypeError, 'A product name must be a string.');",
                  "err": {},
                  "uuid": "0e3f2d10-c21d-4a75-9f3b-79c648e28052",
                  "parentUUID": "e0557748-e205-499e-977b-f8089cf2acf5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "a productName can't be a number",
                  "fullTitle": "PRODUCT ENTITY #productName a productName can't be a number",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const product = (0, _fakeProduct.default)(404);\n(0, _chai.expect)(() => (0, _domain.makeProduct)({ ...product\n})).to.throw(TypeError, 'A product name must be a string.');",
                  "err": {},
                  "uuid": "dd0eca8d-fe2a-4805-b42b-026fcf315141",
                  "parentUUID": "e0557748-e205-499e-977b-f8089cf2acf5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "54a272c0-8e1d-4d31-9ab2-b9fba65d6de9",
                "0e3f2d10-c21d-4a75-9f3b-79c648e28052",
                "dd0eca8d-fe2a-4805-b42b-026fcf315141"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "6a54c4f3-a35d-4690-aad5-5d9327796600",
          "title": "SHOPPINGLIST ENTITY",
          "fullFile": "C:\\Users\\morga\\Documents\\web\\server-side\\tests\\unit-tests\\entities\\shoppingList.js",
          "file": "\\server-side\\tests\\unit-tests\\entities\\shoppingList.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "e544187e-8d49-4f61-be30-c367db9f75d0",
              "title": "#shoppingList",
              "fullFile": "C:\\Users\\morga\\Documents\\web\\server-side\\tests\\unit-tests\\entities\\shoppingList.js",
              "file": "\\server-side\\tests\\unit-tests\\entities\\shoppingList.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should make a shopping list",
                  "fullTitle": "SHOPPINGLIST ENTITY #shoppingList it should make a shopping list",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const shoppingList = (0, _fakeShoppingList.default)(11223344, 4);\nconst buildShoppingList = (0, _domain.makeShoppingList)({ ...shoppingList\n});\n(0, _chai.expect)(buildShoppingList.getProductCode()).to.be.eql(shoppingList.code);\n(0, _chai.expect)(buildShoppingList.getProductQuantity()).to.be.eql(shoppingList.quantity);",
                  "err": {},
                  "uuid": "44cd1485-1e12-43d3-b41b-3a77014d5539",
                  "parentUUID": "e544187e-8d49-4f61-be30-c367db9f75d0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "44cd1485-1e12-43d3-b41b-3a77014d5539"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "5558d297-6a07-45bf-8112-1db1260d4cc9",
              "title": "#code",
              "fullFile": "C:\\Users\\morga\\Documents\\web\\server-side\\tests\\unit-tests\\entities\\shoppingList.js",
              "file": "\\server-side\\tests\\unit-tests\\entities\\shoppingList.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "a shoppingList must have a code",
                  "fullTitle": "SHOPPINGLIST ENTITY #code a shoppingList must have a code",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const shoppingList = (0, _fakeShoppingList.default)(undefined, 4);\n(0, _chai.expect)(() => (0, _domain.makeShoppingList)({ ...shoppingList\n})).to.throw(_errors.RequiredParameterError, 'A product code is a required.');",
                  "err": {},
                  "uuid": "8080404c-06ac-44b1-b2a2-55dcf029ddba",
                  "parentUUID": "5558d297-6a07-45bf-8112-1db1260d4cc9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "a code can't be null",
                  "fullTitle": "SHOPPINGLIST ENTITY #code a code can't be null",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const shoppingList = (0, _fakeShoppingList.default)(null, 4);\n(0, _chai.expect)(() => (0, _domain.makeShoppingList)({ ...shoppingList\n})).to.throw(TypeError, 'A product code must be a number.');",
                  "err": {},
                  "uuid": "c0591bf3-0f11-4270-8a32-90787dcd2674",
                  "parentUUID": "5558d297-6a07-45bf-8112-1db1260d4cc9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "a code can't be a string",
                  "fullTitle": "SHOPPINGLIST ENTITY #code a code can't be a string",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const shoppingList = (0, _fakeShoppingList.default)(\"404\", 4);\n(0, _chai.expect)(() => (0, _domain.makeShoppingList)({ ...shoppingList\n})).to.throw(TypeError, 'A product code must be a number');",
                  "err": {},
                  "uuid": "47705758-b98c-4a1f-945a-f33e667a01fe",
                  "parentUUID": "5558d297-6a07-45bf-8112-1db1260d4cc9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8080404c-06ac-44b1-b2a2-55dcf029ddba",
                "c0591bf3-0f11-4270-8a32-90787dcd2674",
                "47705758-b98c-4a1f-945a-f33e667a01fe"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "776ad9ea-b156-40a2-9ea8-29e48a14c951",
              "title": "#quantity",
              "fullFile": "C:\\Users\\morga\\Documents\\web\\server-side\\tests\\unit-tests\\entities\\shoppingList.js",
              "file": "\\server-side\\tests\\unit-tests\\entities\\shoppingList.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "a shoppingList must have a quantity",
                  "fullTitle": "SHOPPINGLIST ENTITY #quantity a shoppingList must have a quantity",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const shoppingList = (0, _fakeShoppingList.default)(11223344, undefined);\n(0, _chai.expect)(() => (0, _domain.makeShoppingList)({ ...shoppingList\n})).to.throw(_errors.RequiredParameterError, 'A product quantity is a required.');",
                  "err": {},
                  "uuid": "59db1841-bed9-46ac-a230-d95c8ef077d5",
                  "parentUUID": "776ad9ea-b156-40a2-9ea8-29e48a14c951",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "a quantity can't be null",
                  "fullTitle": "SHOPPINGLIST ENTITY #quantity a quantity can't be null",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const shoppingList = (0, _fakeShoppingList.default)(11223344, null);\n(0, _chai.expect)(() => (0, _domain.makeShoppingList)({ ...shoppingList\n})).to.throw(TypeError, \"A product's quantity must be a number.\");",
                  "err": {},
                  "uuid": "f4dfdb3f-d9f2-47b1-ad7f-4c64d0b6e2c5",
                  "parentUUID": "776ad9ea-b156-40a2-9ea8-29e48a14c951",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "a quantity can't be a string",
                  "fullTitle": "SHOPPINGLIST ENTITY #quantity a quantity can't be a string",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const shoppingList = (0, _fakeShoppingList.default)(11223344, \"404\");\n(0, _chai.expect)(() => (0, _domain.makeShoppingList)({ ...shoppingList\n})).to.throw(TypeError, \"A product's quantity must be a number.\");",
                  "err": {},
                  "uuid": "7bf227c8-0be3-4db8-9344-4dcd219b8cba",
                  "parentUUID": "776ad9ea-b156-40a2-9ea8-29e48a14c951",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "a quantity can't be to big",
                  "fullTitle": "SHOPPINGLIST ENTITY #quantity a quantity can't be to big",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const shoppingList = (0, _fakeShoppingList.default)(11223344, 22);\n(0, _chai.expect)(() => (0, _domain.makeShoppingList)({ ...shoppingList\n})).to.throw(RangeError, \"A product's quantity must be between 1 and 20.\");",
                  "err": {},
                  "uuid": "c0f7280f-9bc0-4767-95ba-252cafea1553",
                  "parentUUID": "776ad9ea-b156-40a2-9ea8-29e48a14c951",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "a quantity can't be small than 1",
                  "fullTitle": "SHOPPINGLIST ENTITY #quantity a quantity can't be small than 1",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const shoppingList = (0, _fakeShoppingList.default)(11223344, 0);\n(0, _chai.expect)(() => (0, _domain.makeShoppingList)({ ...shoppingList\n})).to.throw(RangeError, \"A product's quantity must be between 1 and 20.\");",
                  "err": {},
                  "uuid": "7e6447bc-1555-4ea6-bc26-f3a31033c0e2",
                  "parentUUID": "776ad9ea-b156-40a2-9ea8-29e48a14c951",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "59db1841-bed9-46ac-a230-d95c8ef077d5",
                "f4dfdb3f-d9f2-47b1-ad7f-4c64d0b6e2c5",
                "7bf227c8-0be3-4db8-9344-4dcd219b8cba",
                "c0f7280f-9bc0-4767-95ba-252cafea1553",
                "7e6447bc-1555-4ea6-bc26-f3a31033c0e2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "362c3a1e-e824-49ec-a1b0-bc199d298221",
          "title": "USER ENTITY",
          "fullFile": "C:\\Users\\morga\\Documents\\web\\server-side\\tests\\unit-tests\\entities\\user.js",
          "file": "\\server-side\\tests\\unit-tests\\entities\\user.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "d2066e15-1456-47fb-9455-80d3c9377695",
              "title": "#user",
              "fullFile": "C:\\Users\\morga\\Documents\\web\\server-side\\tests\\unit-tests\\entities\\user.js",
              "file": "\\server-side\\tests\\unit-tests\\entities\\user.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should make a user",
                  "fullTitle": "USER ENTITY #user it should make a user",
                  "timedOut": false,
                  "duration": 79,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = (0, _fakeUser.default)();\nconst buildUser = (0, _domain.makeUser)({ ...user\n});\n(0, _chai.expect)(buildUser.getFirstName()).to.be.eql(user.firstName);\n(0, _chai.expect)(buildUser.getLastName()).to.be.eql(user.lastName);\n(0, _chai.expect)(buildUser.getUsername()).to.be.eql(user.username);\n(0, _chai.expect)(buildUser.getEmail()).to.be.eql(user.email);\n(0, _chai.expect)(buildUser.getPassword()).not.to.be.eql(user.password);",
                  "err": {},
                  "uuid": "30deb99e-d340-47a3-9ff0-fb7acaa2208c",
                  "parentUUID": "d2066e15-1456-47fb-9455-80d3c9377695",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "30deb99e-d340-47a3-9ff0-fb7acaa2208c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 79,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "3c751857-fc4c-4db3-b3d5-7e7f7fe02e92",
              "title": "#username",
              "fullFile": "C:\\Users\\morga\\Documents\\web\\server-side\\tests\\unit-tests\\entities\\user.js",
              "file": "\\server-side\\tests\\unit-tests\\entities\\user.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "a user must have a username",
                  "fullTitle": "USER ENTITY #username a user must have a username",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = (0, _fakeUser.default)({\n  username: undefined\n});\n(0, _chai.expect)(() => (0, _domain.makeUser)({ ...user\n})).to.throw(_errors.RequiredParameterError, 'A username is a required.');",
                  "err": {},
                  "uuid": "002d3122-e0c6-4ce8-ab84-45c1ebae2336",
                  "parentUUID": "3c751857-fc4c-4db3-b3d5-7e7f7fe02e92",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "a username can't be null",
                  "fullTitle": "USER ENTITY #username a username can't be null",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = (0, _fakeUser.default)({\n  username: null\n});\n(0, _chai.expect)(() => (0, _domain.makeUser)({ ...user\n})).to.throw(TypeError, 'A username must be a string.');",
                  "err": {},
                  "uuid": "db4e66e6-b21e-47fa-a6e3-7fa8cca57692",
                  "parentUUID": "3c751857-fc4c-4db3-b3d5-7e7f7fe02e92",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "a username can't be a number",
                  "fullTitle": "USER ENTITY #username a username can't be a number",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = (0, _fakeUser.default)({\n  username: 123\n});\n(0, _chai.expect)(() => (0, _domain.makeUser)({ ...user\n})).to.throw(TypeError, 'A username must be a string.');",
                  "err": {},
                  "uuid": "817bcff5-a73c-45e0-88e7-7971eabb1049",
                  "parentUUID": "3c751857-fc4c-4db3-b3d5-7e7f7fe02e92",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "a username max length must be 32",
                  "fullTitle": "USER ENTITY #username a username max length must be 32",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = (0, _fakeUser.default)({\n  username: \"abc\".repeat(35)\n});\n(0, _chai.expect)(() => (0, _domain.makeUser)({ ...user\n})).to.throw(RangeError, 'A username length must be between 4 and 32.');",
                  "err": {},
                  "uuid": "b6808853-b3c8-481e-9ca4-3bef80c1f020",
                  "parentUUID": "3c751857-fc4c-4db3-b3d5-7e7f7fe02e92",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "a username min length must be 4",
                  "fullTitle": "USER ENTITY #username a username min length must be 4",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = (0, _fakeUser.default)({\n  username: \"ab\"\n});\n(0, _chai.expect)(() => (0, _domain.makeUser)({ ...user\n})).to.throw(RangeError, 'A username length must be between 4 and 32.');",
                  "err": {},
                  "uuid": "dc2e11b7-4be2-43ef-8751-1c37c9b154be",
                  "parentUUID": "3c751857-fc4c-4db3-b3d5-7e7f7fe02e92",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "002d3122-e0c6-4ce8-ab84-45c1ebae2336",
                "db4e66e6-b21e-47fa-a6e3-7fa8cca57692",
                "817bcff5-a73c-45e0-88e7-7971eabb1049",
                "b6808853-b3c8-481e-9ca4-3bef80c1f020",
                "dc2e11b7-4be2-43ef-8751-1c37c9b154be"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "a15cfa78-fe59-44fc-9f72-c58b162e83e0",
              "title": "#email",
              "fullFile": "C:\\Users\\morga\\Documents\\web\\server-side\\tests\\unit-tests\\entities\\user.js",
              "file": "\\server-side\\tests\\unit-tests\\entities\\user.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "a user must have an email",
                  "fullTitle": "USER ENTITY #email a user must have an email",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = (0, _fakeUser.default)({\n  email: undefined\n});\n(0, _chai.expect)(() => (0, _domain.makeUser)({ ...user\n})).to.throw(_errors.RequiredParameterError, 'An email is a required.');",
                  "err": {},
                  "uuid": "9b4ac0a7-1245-4481-aa16-1aafa925e763",
                  "parentUUID": "a15cfa78-fe59-44fc-9f72-c58b162e83e0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "an email must be a valid email",
                  "fullTitle": "USER ENTITY #email an email must be a valid email",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = (0, _fakeUser.default)({\n  email: \"dangamil.com\"\n});\n(0, _chai.expect)(() => (0, _domain.makeUser)({ ...user\n})).to.throw(SyntaxError, 'Invalid email.');",
                  "err": {},
                  "uuid": "c08b3c72-5bd5-4c1a-af83-1941c09b3b57",
                  "parentUUID": "a15cfa78-fe59-44fc-9f72-c58b162e83e0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "an email can't be null",
                  "fullTitle": "USER ENTITY #email an email can't be null",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = (0, _fakeUser.default)({\n  email: null\n});\n(0, _chai.expect)(() => (0, _domain.makeUser)({ ...user\n})).to.throw(SyntaxError, 'An email must be of type string.');",
                  "err": {},
                  "uuid": "918520d7-380a-49c7-9124-589651d5fc43",
                  "parentUUID": "a15cfa78-fe59-44fc-9f72-c58b162e83e0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "an email can't be a number",
                  "fullTitle": "USER ENTITY #email an email can't be a number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = (0, _fakeUser.default)({\n  email: 123\n});\n(0, _chai.expect)(() => (0, _domain.makeUser)({ ...user\n})).to.throw(SyntaxError, 'An email must be of type string.');",
                  "err": {},
                  "uuid": "24e85f7c-f47a-4d2f-a73f-71cec466db10",
                  "parentUUID": "a15cfa78-fe59-44fc-9f72-c58b162e83e0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9b4ac0a7-1245-4481-aa16-1aafa925e763",
                "c08b3c72-5bd5-4c1a-af83-1941c09b3b57",
                "918520d7-380a-49c7-9124-589651d5fc43",
                "24e85f7c-f47a-4d2f-a73f-71cec466db10"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "99d72897-5d0d-40bd-84a9-c4657b903a2f",
              "title": "#password",
              "fullFile": "C:\\Users\\morga\\Documents\\web\\server-side\\tests\\unit-tests\\entities\\user.js",
              "file": "\\server-side\\tests\\unit-tests\\entities\\user.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "a user must a have password",
                  "fullTitle": "USER ENTITY #password a user must a have password",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = (0, _fakeUser.default)({\n  password: undefined\n});\n(0, _chai.expect)(() => (0, _domain.makeUser)({ ...user\n})).to.throw(_errors.RequiredParameterError, 'A password is a required.');",
                  "err": {},
                  "uuid": "fbe2b712-fb1a-464c-a708-02b7543f3b5e",
                  "parentUUID": "99d72897-5d0d-40bd-84a9-c4657b903a2f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can hash password",
                  "fullTitle": "USER ENTITY #password can hash password",
                  "timedOut": false,
                  "duration": 77,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = (0, _fakeUser.default)();\nconst password = (0, _domain.makeUser)({ ...user\n}).getPassword();\n(0, _chai.expect)(password.match(/^\\$2[aby]?\\$\\d{1,2}\\$[.\\/A-Za-z0-9]{53}$/)).to.not.be.null;",
                  "err": {},
                  "uuid": "8e2c752c-f28b-45a5-936d-52ddcfe6715b",
                  "parentUUID": "99d72897-5d0d-40bd-84a9-c4657b903a2f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "a password can't be a null",
                  "fullTitle": "USER ENTITY #password a password can't be a null",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = (0, _fakeUser.default)({\n  password: null\n});\n(0, _chai.expect)(() => (0, _domain.makeUser)({ ...user\n})).to.throw(TypeError, 'The password must be of type string.');",
                  "err": {},
                  "uuid": "f86b69a4-7b3e-4b56-9a19-da8f3fe17037",
                  "parentUUID": "99d72897-5d0d-40bd-84a9-c4657b903a2f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "a password can't be a number",
                  "fullTitle": "USER ENTITY #password a password can't be a number",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = (0, _fakeUser.default)({\n  password: 123\n});\n(0, _chai.expect)(() => (0, _domain.makeUser)({ ...user\n})).to.throw(TypeError, 'The password must be of type string.');",
                  "err": {},
                  "uuid": "57b0793e-230e-4859-9999-242c57b99674",
                  "parentUUID": "99d72897-5d0d-40bd-84a9-c4657b903a2f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fbe2b712-fb1a-464c-a708-02b7543f3b5e",
                "8e2c752c-f28b-45a5-936d-52ddcfe6715b",
                "f86b69a4-7b3e-4b56-9a19-da8f3fe17037",
                "57b0793e-230e-4859-9999-242c57b99674"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 78,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "8b7a7ffd-8988-414a-b6a0-bfadf6819881",
          "title": "SHOPPINGLIST SERVICE",
          "fullFile": "C:\\Users\\morga\\Documents\\web\\server-side\\tests\\unit-tests\\services\\shoppingList-service.js",
          "file": "\\server-side\\tests\\unit-tests\\services\\shoppingList-service.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "SHOPPINGLIST SERVICE \"before all\" hook",
              "timedOut": false,
              "duration": 435,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { ...fakeUser\n} = (0, _fakeUser.default)();\nconst { ...fakeGroup\n} = (0, _fakeGroup.default)(\"testoss\", \"testoss\");\ninsertedUser = await _services.userService.addUser({ ...fakeUser\n});\ninsertedGroup = await _services.groupService.addGroup({\n  username: insertedUser.username,\n  ...fakeGroup\n});\ninsertedUserGroup = await _services.groupService.addMembersToGroup({\n  groupId: insertedGroup.dataValues.groupId,\n  username: insertedUser.username\n});",
              "err": {},
              "uuid": "5cadfd14-7815-4806-a142-2fa85a2ded2e",
              "parentUUID": "8b7a7ffd-8988-414a-b6a0-bfadf6819881",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "SHOPPINGLIST SERVICE \"after all\" hook",
              "timedOut": false,
              "duration": 8,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await _services.groupService.deleteUserFromGroup({\n  groupId: insertedGroup.dataValues.groupId,\n  userId: insertedUser.userId\n});\nawait _services.groupService.deleteGroup({\n  groupId: insertedGroup.dataValues.groupId\n});\nawait _services.userService.removeUser({\n  userId: insertedUser.userId\n});",
              "err": {},
              "uuid": "9f9a3de5-94f8-41a1-b5b1-7b2f76714992",
              "parentUUID": "8b7a7ffd-8988-414a-b6a0-bfadf6819881",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "a08d2fac-3406-4a7c-9160-f0f121514ad9",
              "title": "#get-shopping-list",
              "fullFile": "C:\\Users\\morga\\Documents\\web\\server-side\\tests\\unit-tests\\services\\shoppingList-service.js",
              "file": "\\server-side\\tests\\unit-tests\\services\\shoppingList-service.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "not created",
                  "fullTitle": "SHOPPINGLIST SERVICE #get-shopping-list not created",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "501a09d3-cbce-4e3d-9d71-8fa9b2cc4c0b",
                  "parentUUID": "a08d2fac-3406-4a7c-9160-f0f121514ad9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "501a09d3-cbce-4e3d-9d71-8fa9b2cc4c0b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "19712fe3-ee73-4e78-b67d-0d3febbc70fd",
              "title": "#get-group-shopping-list",
              "fullFile": "C:\\Users\\morga\\Documents\\web\\server-side\\tests\\unit-tests\\services\\shoppingList-service.js",
              "file": "\\server-side\\tests\\unit-tests\\services\\shoppingList-service.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "not created",
                  "fullTitle": "SHOPPINGLIST SERVICE #get-group-shopping-list not created",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "506f5d76-48b9-4561-8cee-8bafdc7fdd4f",
                  "parentUUID": "19712fe3-ee73-4e78-b67d-0d3febbc70fd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "506f5d76-48b9-4561-8cee-8bafdc7fdd4f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "b813eb80-4f17-4ed1-9f67-dfce5535e402",
              "title": "#add-product-to-shopping-list",
              "fullFile": "C:\\Users\\morga\\Documents\\web\\server-side\\tests\\unit-tests\\services\\shoppingList-service.js",
              "file": "\\server-side\\tests\\unit-tests\\services\\shoppingList-service.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "url must include a groupId",
                  "fullTitle": "SHOPPINGLIST SERVICE #add-product-to-shopping-list url must include a groupId",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const addProduct = await _services.shoppingListService.putProductInShoppingList({});\n(0, _chai.expect)(addProduct.message).to.equal(\"You must supply a group id.\");",
                  "err": {},
                  "uuid": "a7706a31-a3a3-4a09-9ae2-095823519422",
                  "parentUUID": "b813eb80-4f17-4ed1-9f67-dfce5535e402",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can add a new product",
                  "fullTitle": "SHOPPINGLIST SERVICE #add-product-to-shopping-list can add a new product",
                  "timedOut": false,
                  "duration": 25,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const fakeShoppingList = (0, _fakeShoppingList.default)(CODE_BARRE, 4);\nconst addProduct = await _services.shoppingListService.putProductInShoppingList({\n  groupId: insertedGroup.dataValues.groupId,\n  userId: insertedUser.userId,\n  ...fakeShoppingList\n});\n(0, _chai.expect)(Number(addProduct.code)).to.equal(fakeShoppingList.code);\nawait _services.shoppingListService.removeProductFromShoppingList({\n  itemId: addProduct.id,\n  userId: insertedUser.userId\n});",
                  "err": {},
                  "uuid": "4a03d45e-2f5b-45f4-be79-ad3397c0cb13",
                  "parentUUID": "b813eb80-4f17-4ed1-9f67-dfce5535e402",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "cannot add an inexisting product",
                  "fullTitle": "SHOPPINGLIST SERVICE #add-product-to-shopping-list cannot add an inexisting product",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const fakeShoppingList = (0, _fakeShoppingList.default)(1111111111100, 4);\nconst addProduct = await _services.shoppingListService.putProductInShoppingList({\n  groupId: insertedGroup.dataValues.groupId,\n  userId: insertedUser.userId,\n  ...fakeShoppingList\n});\n(0, _chai.expect)(addProduct.message).to.equal(`No product was found with this code ${fakeShoppingList.code}`);",
                  "err": {},
                  "uuid": "bf4073a8-62b9-4a16-958c-231dca2dad4b",
                  "parentUUID": "b813eb80-4f17-4ed1-9f67-dfce5535e402",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "cannot add twice a product for a single user",
                  "fullTitle": "SHOPPINGLIST SERVICE #add-product-to-shopping-list cannot add twice a product for a single user",
                  "timedOut": false,
                  "duration": 37,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const fakeShoppingList = (0, _fakeShoppingList.default)(CODE_BARRE, 4);\nconst addProduct = await _services.shoppingListService.putProductInShoppingList({\n  groupId: insertedGroup.dataValues.groupId,\n  userId: insertedUser.userId,\n  ...fakeShoppingList\n});\nconst newAddProduct = await _services.shoppingListService.putProductInShoppingList({\n  groupId: insertedGroup.dataValues.groupId,\n  userId: insertedUser.userId,\n  ...fakeShoppingList\n});\n(0, _chai.expect)(newAddProduct.statusCode).to.equal(409);\nawait _services.shoppingListService.removeProductFromShoppingList({\n  itemId: addProduct.id,\n  userId: insertedUser.userId\n});",
                  "err": {},
                  "uuid": "1c9439f0-611d-43cd-aeef-8d460326b574",
                  "parentUUID": "b813eb80-4f17-4ed1-9f67-dfce5535e402",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a7706a31-a3a3-4a09-9ae2-095823519422",
                "4a03d45e-2f5b-45f4-be79-ad3397c0cb13",
                "bf4073a8-62b9-4a16-958c-231dca2dad4b",
                "1c9439f0-611d-43cd-aeef-8d460326b574"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 75,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "5fd3de79-16ae-4ea6-8714-532941d3bbd7",
              "title": "#remove-product-to-shopping-list",
              "fullFile": "C:\\Users\\morga\\Documents\\web\\server-side\\tests\\unit-tests\\services\\shoppingList-service.js",
              "file": "\\server-side\\tests\\unit-tests\\services\\shoppingList-service.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "itemId must include in parameters",
                  "fullTitle": "SHOPPINGLIST SERVICE #remove-product-to-shopping-list itemId must include in parameters",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const removedProduct = await _services.shoppingListService.removeProductFromShoppingList({\n  itemId: undefined,\n  userId: ''\n});\n(0, _chai.expect)(removedProduct.message).to.equal('You must supply the item id.');",
                  "err": {},
                  "uuid": "e7bd713d-8333-4ec6-8b61-cbf3bc04057b",
                  "parentUUID": "5fd3de79-16ae-4ea6-8714-532941d3bbd7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can remove an existing product",
                  "fullTitle": "SHOPPINGLIST SERVICE #remove-product-to-shopping-list can remove an existing product",
                  "timedOut": false,
                  "duration": 19,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const fakeShoppingList = (0, _fakeShoppingList.default)(CODE_BARRE, 4);\nconst addProduct = await _services.shoppingListService.putProductInShoppingList({\n  groupId: insertedGroup.dataValues.groupId,\n  userId: insertedUser.userId,\n  ...fakeShoppingList\n});\nconst removeProduct = await _services.shoppingListService.removeProductFromShoppingList({\n  itemId: addProduct.id,\n  userId: insertedUser.userId\n});\n(0, _chai.expect)(removeProduct).to.equal(1);",
                  "err": {},
                  "uuid": "f9c07390-6442-4fb7-85a0-645b26ee23c8",
                  "parentUUID": "5fd3de79-16ae-4ea6-8714-532941d3bbd7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "cannot remove an inexisting product",
                  "fullTitle": "SHOPPINGLIST SERVICE #remove-product-to-shopping-list cannot remove an inexisting product",
                  "timedOut": false,
                  "duration": 21,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const fakeShoppingList = (0, _fakeShoppingList.default)(CODE_BARRE, 4);\nconst addProduct = await _services.shoppingListService.putProductInShoppingList({\n  groupId: insertedGroup.dataValues.groupId,\n  userId: insertedUser.userId,\n  ...fakeShoppingList\n});\nawait _services.shoppingListService.removeProductFromShoppingList({\n  itemId: addProduct.id,\n  userId: insertedUser.userId\n});\nconst newRemoveProduct = await _services.shoppingListService.removeProductFromShoppingList({\n  itemId: addProduct.id,\n  userId: insertedUser.userId\n});\n(0, _chai.expect)(newRemoveProduct.message).to.equal(`No item with this id '${addProduct.id}' was found in the shopping list !`);",
                  "err": {},
                  "uuid": "09f85f29-ab18-462a-8566-a4e55171d02c",
                  "parentUUID": "5fd3de79-16ae-4ea6-8714-532941d3bbd7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e7bd713d-8333-4ec6-8b61-cbf3bc04057b",
                "f9c07390-6442-4fb7-85a0-645b26ee23c8",
                "09f85f29-ab18-462a-8566-a4e55171d02c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 40,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "ec75d97b-288d-46ca-a64c-30b9500f4686",
          "title": "USER SERVICE",
          "fullFile": "C:\\Users\\morga\\Documents\\web\\server-side\\tests\\unit-tests\\services\\user-service.js",
          "file": "\\server-side\\tests\\unit-tests\\services\\user-service.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "65a5844c-bef5-41cf-93bf-a3b2cfc9fef6",
              "title": "#register-user",
              "fullFile": "C:\\Users\\morga\\Documents\\web\\server-side\\tests\\unit-tests\\services\\user-service.js",
              "file": "\\server-side\\tests\\unit-tests\\services\\user-service.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "inserts a user in the database",
                  "fullTitle": "USER SERVICE #register-user inserts a user in the database",
                  "timedOut": false,
                  "duration": 89,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { ...fakeUser\n} = (0, _fakeUser.default)();\nconst inserted = await _services.userService.addUser({ ...fakeUser\n});\nfakeUser.password = inserted.password;\nfakeUser.userId = inserted.userId;\n(0, _chai.expect)(inserted).to.deep.include(fakeUser);\nawait _services.userService.removeUser({\n  userId: inserted.userId\n});",
                  "err": {},
                  "uuid": "5c7ce897-6c5c-4a3a-a6f6-fcda843569e4",
                  "parentUUID": "65a5844c-bef5-41cf-93bf-a3b2cfc9fef6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can't register a user if he/she already exists",
                  "fullTitle": "USER SERVICE #register-user can't register a user if he/she already exists",
                  "timedOut": false,
                  "duration": 82,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { ...fakeUser\n} = (0, _fakeUser.default)();\nconst firstUser = await _services.userService.addUser({ ...fakeUser\n});\nconst secondtUser = await _services.userService.addUser({ ...fakeUser\n});\n(0, _chai.expect)(secondtUser.message).to.equal(\"A user with the same username or email already exists !\");\nawait _services.userService.removeUser({\n  userId: firstUser.userId\n});",
                  "err": {},
                  "uuid": "12cc5a27-ef1c-4020-a8ee-8cc4d5a44e9a",
                  "parentUUID": "65a5844c-bef5-41cf-93bf-a3b2cfc9fef6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5c7ce897-6c5c-4a3a-a6f6-fcda843569e4",
                "12cc5a27-ef1c-4020-a8ee-8cc4d5a44e9a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 171,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "132b52a3-39cc-44c9-acc6-dc3f37b1a16d",
              "title": "#login-user",
              "fullFile": "C:\\Users\\morga\\Documents\\web\\server-side\\tests\\unit-tests\\services\\user-service.js",
              "file": "\\server-side\\tests\\unit-tests\\services\\user-service.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "can authenticate a user",
                  "fullTitle": "USER SERVICE #login-user can authenticate a user",
                  "timedOut": false,
                  "duration": 170,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { ...fakeUser\n} = (0, _fakeUser.default)();\nconst createdUser = await _services.userService.addUser({ ...fakeUser\n});\nconst loggedInUser = await _services.userService.logInUser({\n  pseudo: fakeUser.username,\n  password: fakeUser.password\n});\n(0, _chai.expect)(loggedInUser).to.have.property('token');\n(0, _chai.expect)(loggedInUser.data.username).to.equal(fakeUser.username);\nawait _services.userService.removeUser({\n  userId: createdUser.userId\n});",
                  "err": {},
                  "uuid": "c7b6de9d-9005-4251-9317-2adb56c324d0",
                  "parentUUID": "132b52a3-39cc-44c9-acc6-dc3f37b1a16d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "must include an pseudo",
                  "fullTitle": "USER SERVICE #login-user must include an pseudo",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const loggedInUser = await _services.userService.logInUser({\n  pseudo: undefined,\n  password: \"123\"\n});\n(0, _chai.expect)(loggedInUser.message).to.equal(\"You must supply a pseudo.\");",
                  "err": {},
                  "uuid": "c06ba65d-7223-48a5-a0b5-08425e0598e0",
                  "parentUUID": "132b52a3-39cc-44c9-acc6-dc3f37b1a16d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "must include an password",
                  "fullTitle": "USER SERVICE #login-user must include an password",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const loggedInUser = await _services.userService.logInUser({\n  pseudo: \"12345\",\n  password: undefined\n});\n(0, _chai.expect)(loggedInUser.message).to.equal(\"You must supply a password.\");",
                  "err": {},
                  "uuid": "c9e3e934-f6b6-48e4-b9ba-d105fca8c23b",
                  "parentUUID": "132b52a3-39cc-44c9-acc6-dc3f37b1a16d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can't authenticate unregistered user",
                  "fullTitle": "USER SERVICE #login-user can't authenticate unregistered user",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const loggedInUser = await _services.userService.logInUser({\n  pseudo: '*******',\n  password: '*******'\n});\n(0, _chai.expect)(loggedInUser.message).to.equal(\"Authentication failed !\");",
                  "err": {},
                  "uuid": "f8b4a5bb-deda-4557-b960-86d8ff6c7ebb",
                  "parentUUID": "132b52a3-39cc-44c9-acc6-dc3f37b1a16d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can't authenticate a user with a wrong password user",
                  "fullTitle": "USER SERVICE #login-user can't authenticate a user with a wrong password user",
                  "timedOut": false,
                  "duration": 156,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { ...fakeUser\n} = (0, _fakeUser.default)();\nconst createdUser = await _services.userService.addUser({ ...fakeUser\n});\nconst loggedInUser = await _services.userService.logInUser({\n  pseudo: fakeUser.username,\n  password: '*******'\n});\n(0, _chai.expect)(loggedInUser.message).to.equal(\"Authentication failed !\");\nawait _services.userService.removeUser({\n  userId: createdUser.userId\n});",
                  "err": {},
                  "uuid": "ee096a80-8e13-4e72-9f09-66d8b4899bfb",
                  "parentUUID": "132b52a3-39cc-44c9-acc6-dc3f37b1a16d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c7b6de9d-9005-4251-9317-2adb56c324d0",
                "c06ba65d-7223-48a5-a0b5-08425e0598e0",
                "c9e3e934-f6b6-48e4-b9ba-d105fca8c23b",
                "f8b4a5bb-deda-4557-b960-86d8ff6c7ebb",
                "ee096a80-8e13-4e72-9f09-66d8b4899bfb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 328,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "3360a2fc-79b4-4baa-83da-8eb970f0e0f2",
              "title": "#list-one-user",
              "fullFile": "C:\\Users\\morga\\Documents\\web\\server-side\\tests\\unit-tests\\services\\user-service.js",
              "file": "\\server-side\\tests\\unit-tests\\services\\user-service.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "find user by id",
                  "fullTitle": "USER SERVICE #list-one-user find user by id",
                  "timedOut": false,
                  "duration": 85,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { ...fakeUser\n} = (0, _fakeUser.default)();\nconst inserted = await _services.userService.addUser({ ...fakeUser\n});\nfakeUser.userId = inserted.userId;\nconst listedOneUser = await _services.userService.listOneUser({\n  id: fakeUser.userId\n});\n(0, _chai.expect)(listedOneUser.dataValues.username).to.equal(fakeUser.username);\n(0, _chai.expect)(listedOneUser.dataValues.firstName).to.equal(fakeUser.firstName);\n(0, _chai.expect)(listedOneUser.dataValues.lastName).to.equal(fakeUser.lastName);\n(0, _chai.expect)(listedOneUser.dataValues.email).to.equal(fakeUser.email);\nawait _services.userService.removeUser({\n  userId: inserted.userId\n});",
                  "err": {},
                  "uuid": "bcfa16f0-8581-41a9-a5ec-c57cfc5d6257",
                  "parentUUID": "3360a2fc-79b4-4baa-83da-8eb970f0e0f2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bcfa16f0-8581-41a9-a5ec-c57cfc5d6257"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 85,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "903056c3-0608-4511-9b82-18e2bad599b9",
              "title": "#update-one-user",
              "fullFile": "C:\\Users\\morga\\Documents\\web\\server-side\\tests\\unit-tests\\services\\user-service.js",
              "file": "\\server-side\\tests\\unit-tests\\services\\user-service.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "update one user with userId",
                  "fullTitle": "USER SERVICE #update-one-user update one user with userId",
                  "timedOut": false,
                  "duration": 93,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inserted = await _services.userService.addUser({ ...(0, _fakeUser.default)()\n});\nconst updatedInfo = (0, _fakeUser.default)({\n  username: 'test'\n});\nconst updatedUser = await _services.userService.putUser({\n  userId: inserted.userId,\n  ...updatedInfo\n});\n(0, _chai.expect)(updatedUser[1].dataValues.username).to.equal(updatedInfo.username);\nawait _services.userService.removeUser({\n  userId: inserted.userId\n});",
                  "err": {},
                  "uuid": "7ebc8db2-3348-40b6-8909-c6f2e47b1031",
                  "parentUUID": "903056c3-0608-4511-9b82-18e2bad599b9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can not update a user with an existing username or email",
                  "fullTitle": "USER SERVICE #update-one-user can not update a user with an existing username or email",
                  "timedOut": false,
                  "duration": 183,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user1 = await _services.userService.addUser({ ...(0, _fakeUser.default)()\n});\nconst user2 = await _services.userService.addUser({ ...(0, _fakeUser.default)()\n});\nconst updatedInfo = (0, _fakeUser.default)({\n  username: user2.username\n});\nconst updatedUser1 = await _services.userService.putUser({\n  userId: user1.userId,\n  ...updatedInfo\n});\n(0, _chai.expect)(updatedUser1.message).to.equal('A user with the same username already exists !');\nawait _services.userService.removeUser({\n  userId: user1.userId\n});\nawait _services.userService.removeUser({\n  userId: user2.userId\n});",
                  "err": {},
                  "uuid": "4971905d-b4c6-4fee-840e-b16e7bee55c5",
                  "parentUUID": "903056c3-0608-4511-9b82-18e2bad599b9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7ebc8db2-3348-40b6-8909-c6f2e47b1031",
                "4971905d-b4c6-4fee-840e-b16e7bee55c5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 276,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.1.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "index",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.1.1"
    },
    "marge": {
      "options": {
        "reportDir": "test-reports/unit",
        "reportFilename": "index"
      },
      "version": "5.1.0"
    }
  }
}